  
  GetData
  ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── RowGroup::Fetch	[vim src/storage/table/row_group.cpp +474]
  │   ├── StandardColumnData::Fetch	[vim src/storage/table/standard_column_data.cpp +96]
  │   ├── StandardColumnData::Fetch	[vim src/storage/table/standard_column_data.cpp +96]
  │   ├── ColumnData::Update	[vim src/storage/table/column_data.cpp +300]
  │   ├── StructColumnData::Fetch	[vim src/storage/table/struct_column_data.cpp +137]
  │   ├── TryFetch	[vim src/include/duckdb/main/query_result.hpp +70]
  │   ├── QueryResultIterator	[vim src/include/duckdb/main/query_result.hpp +107]
  │   ├── Next	[vim src/include/duckdb/main/query_result.hpp +118]
  │   ├── PhysicalIndexJoin::Output	[vim src/execution/operator/join/physical_index_join.cpp +90]
  │   ├── ReservoirSample::GetChunk	[vim src/execution/reservoir_sample.cpp +38]
  │   ├── ResultArrowArrayStreamWrapper::MyStreamGetNext	[vim src/common/arrow_wrapper.cpp +91]
  │   ├── QueryResult::Equals	[vim src/main/query_result.cpp +31]
  │   ├── StreamQueryResult::FetchRaw	[vim src/main/stream_query_result.cpp +30]
  │   ├── StreamQueryResult::Materialize	[vim src/main/stream_query_result.cpp +43]
  │   ├── MaterializedQueryResult::FetchRaw	[vim src/main/materialized_query_result.cpp +49]
  │   ├── IndexScanFunction	[vim src/function/table/table_scan.cpp +172]
  │   ├── ParquetMetaDataImplementation	[vim extension/parquet/parquet_metadata.cpp +447]
  │   ├── duckdb::FetchStmtResult	[vim tools/odbc/statement_functions.cpp +111]
  │   ├── OdbcFetch::FetchNext	[vim tools/odbc/odbc_fetch.cpp +60]
  │   ├── FetchNext	[vim tools/pythonpkg/src/pyresult.cpp +134]
  │   ├── duckdb_execute_R_impl	[vim tools/rpkg/src/statement.cpp +452]
  │   ├── FetchArrowChunk	[vim tools/rpkg/src/statement.cpp +527]
  │   ├── Callback	[vim tools/nodejs/src/statement.cpp +216]
  │   ├── main	[vim tools/rest/server.cpp +229]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +715]
  │   ├── LocalStorage::Flush	[vim src/storage/local_storage.cpp +369]
  │   └── CleanupState::Flush	[vim src/transaction/cleanup_state.cpp +70]
  ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── Index::Delete	[vim src/storage/index.cpp +38]
  │   ├── DataTable::RevertAppend	[vim src/storage/data_table.cpp +657]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +728]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── StorageManager::CreateCheckpoint	[vim src/storage/storage_manager.cpp +130]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── RowGroup::Delete	[vim src/storage/table/row_group.cpp +796]
  │   ├── VersionDeleteState::Flush	[vim src/storage/table/row_group.cpp +851]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   └── PhysicalDelete::Sink	[vim src/execution/operator/persistent/physical_delete.cpp +22]
  ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── AppendLoop	[vim src/storage/compression/fixed_size_uncompressed.cpp +164]
  │   ├── RLEAnalyze	[vim src/storage/compression/rle.cpp +95]
  │   ├── Append	[vim src/storage/compression/rle.cpp +159]
  │   ├── WriteValue	[vim src/storage/compression/rle.cpp +167]
  │   ├── RowGroup::Update	[vim src/storage/table/row_group.cpp +600]
  │   ├── StandardColumnData::Update	[vim src/storage/table/standard_column_data.cpp +107]
  │   ├── StandardColumnData::Update	[vim src/storage/table/standard_column_data.cpp +107]
  │   ├── StandardColumnData::UpdateColumn	[vim src/storage/table/standard_column_data.cpp +113]
  │   ├── ColumnData::Update	[vim src/storage/table/column_data.cpp +300]
  │   ├── ColumnData::UpdateColumn	[vim src/storage/table/column_data.cpp +314]
  │   ├── StructColumnData::Update	[vim src/storage/table/struct_column_data.cpp +154]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── UpdateStringStats	[vim src/storage/compression/string_uncompressed.cpp +66]
  │   ├── StatisticsPropagator::StatisticsFromValue	[vim src/optimizer/statistics/expression/propagate_constant.cpp +10]
  │   ├── ChunkIterator	[vim src/execution/operator/aggregate/physical_window.cpp +194]
  │   ├── MaskTypedColumn	[vim src/execution/operator/aggregate/physical_window.cpp +231]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   └── ParquetTransformColumnStatistics	[vim extension/parquet/parquet_statistics.cpp +78]
  ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   └── ReplayState::ReplayEntry	[vim src/storage/wal_replay.cpp +155]
  ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   └── FixedSizeScan	[vim src/storage/compression/fixed_size_uncompressed.cpp +140]
  ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   └── RLEScan	[vim src/storage/compression/rle.cpp +321]
  ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── LocalStorage::Update	[vim src/storage/local_storage.cpp +328]
  │   ├── LocalStorage::AddColumn	[vim src/storage/local_storage.cpp +423]
  │   ├── GetChunk	[vim src/include/duckdb/common/types/chunk_collection.hpp +85]
  │   ├── PhysicalChunkScan::GetData	[vim src/execution/operator/scan/physical_chunk_scan.cpp +18]
  │   ├── PhysicalRecursiveCTE::GetData	[vim src/execution/operator/set/physical_recursive_cte.cpp +77]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── MaskColumn	[vim src/execution/operator/aggregate/physical_window.cpp +295]
  │   ├── MaterializeExpressions	[vim src/execution/operator/aggregate/physical_window.cpp +395]
  │   ├── PhysicalNestedLoopJoin::ResolveComplexJoin	[vim src/execution/operator/join/physical_nested_loop_join.cpp +313]
  │   ├── PhysicalPiecewiseMergeJoin::Finalize	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +109]
  │   ├── PhysicalPiecewiseMergeJoin::ResolveComplexJoin	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +223]
  │   ├── PhysicalBlockwiseNLJoin::Execute	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +94]
  │   ├── PhysicalLimit::GetData	[vim src/execution/operator/helper/physical_limit.cpp +127]
  │   ├── PhysicalReservoirSample::GetData	[vim src/execution/operator/helper/physical_reservoir_sample.cpp +54]
  │   ├── NestedLoopJoinMark::Perform	[vim src/execution/nested_loop_join/nested_loop_join_mark.cpp +90]
  │   ├── PhysicalComparisonJoin::ConstructFullOuterJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +81]
  │   ├── ReservoirSamplePercentage::GetChunk	[vim src/execution/reservoir_sample.cpp +131]
  │   ├── ReservoirSamplePercentage::Finalize	[vim src/execution/reservoir_sample.cpp +147]
  │   ├── ChunkCollection::Fuse	[vim src/common/types/chunk_collection.cpp +132]
  │   ├── CompareTuple	[vim src/common/types/chunk_collection.cpp +226]
  │   ├── PragmaDetailedProfilingOutputFunction	[vim src/function/table/pragma_detailed_profiling_output.cpp +110]
  │   └── PragmaLastProfilingOutputFunction	[vim src/function/table/pragma_last_profiling_output.cpp +64]
  ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── Index::Delete	[vim src/storage/index.cpp +38]
  │   ├── DataTable::RevertAppend	[vim src/storage/data_table.cpp +657]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +728]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── StorageManager::CreateCheckpoint	[vim src/storage/storage_manager.cpp +130]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── RowGroup::Delete	[vim src/storage/table/row_group.cpp +796]
  │   ├── VersionDeleteState::Flush	[vim src/storage/table/row_group.cpp +851]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   └── PhysicalDelete::Sink	[vim src/execution/operator/persistent/physical_delete.cpp +22]
  ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   └── UpdateChunk	[vim src/storage/local_storage.cpp +297]
  ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::InitializeScanWithOffset	[vim src/storage/table/list_column_data.cpp +45]
  │   └── ListColumnData::RevertAppend	[vim src/storage/table/list_column_data.cpp +205]
  ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Scan	[vim src/storage/table/list_column_data.cpp +69]
  │   ├── ListColumnData::ScanCommitted	[vim src/storage/table/list_column_data.cpp +73]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── StandardColumnData::ScanCount	[vim src/storage/table/standard_column_data.cpp +70]
  │   ├── StandardColumnData::ScanCount	[vim src/storage/table/standard_column_data.cpp +70]
  │   └── StructColumnData::ScanCount	[vim src/storage/table/struct_column_data.cpp +86]
  ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── Index::Append	[vim src/storage/index.cpp +32]
  │   ├── DataTable::Append	[vim src/storage/data_table.cpp +469]
  │   ├── DataTable::Append	[vim src/storage/data_table.cpp +508]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── ReplayState::ReplayInsert	[vim src/storage/wal_replay.cpp +427]
  │   ├── UncompressedFunctions::Compress	[vim src/storage/compression/fixed_size_uncompressed.cpp +79]
  │   ├── RLECompress	[vim src/storage/compression/rle.cpp +230]
  │   ├── LocalStorage::Append	[vim src/storage/local_storage.cpp +165]
  │   ├── LocalStorage::Flush	[vim src/storage/local_storage.cpp +369]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::AlterType	[vim src/storage/table/row_group.cpp +110]
  │   ├── RowGroup::AddColumn	[vim src/storage/table/row_group.cpp +156]
  │   ├── RowGroup::AppendVersionInfo	[vim src/storage/table/row_group.cpp +503]
  │   ├── RowGroup::Append	[vim src/storage/table/row_group.cpp +592]
  │   ├── ColumnData::AppendData	[vim src/storage/table/column_data.cpp +232]
  │   ├── StructColumnData::Append	[vim src/storage/table/struct_column_data.cpp +107]
  │   ├── AppendRowRecursive	[vim src/include/duckdb/main/appender.hpp +94]
  │   ├── InClauseRewriter::VisitReplace	[vim src/optimizer/in_clause_rewriter.cpp +26]
  │   ├── PhysicalExpressionScan::GetData	[vim src/execution/operator/scan/physical_expression_scan.cpp +41]
  │   ├── PhysicalCreateTableAs::Sink	[vim src/execution/operator/schema/physical_create_table_as.cpp +36]
  │   ├── PhysicalRecursiveCTE::Sink	[vim src/execution/operator/set/physical_recursive_cte.cpp +60]
  │   ├── TopNSortState::Sink	[vim src/execution/operator/order/physical_top_n.cpp +120]
  │   ├── TopNHeap::ExtractBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +295]
  │   ├── MaterializeExpressions	[vim src/execution/operator/aggregate/physical_window.cpp +395]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── ScanSortedPartition	[vim src/execution/operator/aggregate/physical_window.cpp +532]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalWindow::Sink	[vim src/execution/operator/aggregate/physical_window.cpp +1311]
  │   ├── PhysicalCrossProduct::Sink	[vim src/execution/operator/join/physical_cross_product.cpp +30]
  │   ├── PhysicalNestedLoopJoin::Sink	[vim src/execution/operator/join/physical_nested_loop_join.cpp +144]
  │   ├── PhysicalPiecewiseMergeJoin::Sink	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +76]
  │   ├── PhysicalBlockwiseNLJoin::Sink	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +46]
  │   ├── Merge	[vim src/execution/operator/join/physical_delim_join.cpp +41]
  │   ├── Append	[vim src/execution/operator/join/physical_delim_join.cpp +52]
  │   ├── PhysicalDelimJoin::Sink	[vim src/execution/operator/join/physical_delim_join.cpp +72]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PhysicalInsert::Sink	[vim src/execution/operator/persistent/physical_insert.cpp +41]
  │   ├── PhysicalLimit::Sink	[vim src/execution/operator/helper/physical_limit.cpp +49]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_show_select.cpp +8]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_expression_get.cpp +8]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_explain.cpp +10]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── SelectNotNull	[vim src/execution/expression_executor/execute_comparison.cpp +153]
  │   ├── ReservoirSample::FillReservoir	[vim src/execution/reservoir_sample.cpp +51]
  │   ├── ResultArrowArrayStreamWrapper::MyStreamGetNext	[vim src/common/arrow_wrapper.cpp +91]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +24]
  │   ├── ChunkCollection::Merge	[vim src/common/types/chunk_collection.cpp +30]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +56]
  │   ├── ListVector::Append	[vim src/common/types/vector.cpp +1545]
  │   ├── ListVector::Append	[vim src/common/types/vector.cpp +1554]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── DistinctSelectNotNull	[vim src/common/vector_operations/is_distinct_from.cpp +285]
  │   ├── DistinctSelectList	[vim src/common/vector_operations/is_distinct_from.cpp +518]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── Appender::FlushChunk	[vim src/main/appender.cpp +243]
  │   ├── Appender::Flush	[vim src/main/appender.cpp +254]
  │   ├── ClientContext::ExecutePreparedStatement	[vim src/main/client_context.cpp +226]
  │   ├── ClientContext::Append	[vim src/main/client_context.cpp +837]
  │   ├── Connection::Append	[vim src/main/connection.cpp +109]
  │   ├── Connection::Append	[vim src/main/connection.cpp +115]
  │   ├── StreamQueryResult::Materialize	[vim src/main/stream_query_result.cpp +43]
  │   ├── duckdb_append_internal	[vim src/main/capi/appender-c.cpp +91]
  │   ├── PipelineExecutor::CacheChunk	[vim src/parallel/pipeline_executor.cpp +152]
  │   ├── ListUpdateFunction	[vim src/function/aggregate/nested/list.cpp +29]
  │   ├── ListCombineFunction	[vim src/function/aggregate/nested/list.cpp +51]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── SimpleUpdate	[vim src/function/aggregate/sorted_aggregate_function.cpp +113]
  │   ├── ScatterUpdate	[vim src/function/aggregate/sorted_aggregate_function.cpp +125]
  │   ├── Combine	[vim src/function/aggregate/sorted_aggregate_function.cpp +177]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ExtractFunctions	[vim src/function/table/pragma_detailed_profiling_output.cpp +87]
  │   ├── PragmaDetailedProfilingOutputFunction	[vim src/function/table/pragma_detailed_profiling_output.cpp +110]
  │   ├── PragmaLastProfilingOutputFunction	[vim src/function/table/pragma_last_profiling_output.cpp +64]
  │   ├── ByteSinkUtil::appendChange	[vim extension/icu/icu-collate.cpp +3581]
  │   ├── ByteSinkUtil::appendCodePoint	[vim extension/icu/icu-collate.cpp +3631]
  │   ├── ByteSinkUtil::appendTwoBytes	[vim extension/icu/icu-collate.cpp +3646]
  │   ├── ByteSinkUtil::appendNonEmptyUnchanged	[vim extension/icu/icu-collate.cpp +3653]
  │   ├── BytesTrie::append	[vim extension/icu/icu-collate.cpp +4896]
  │   ├── FilteredNormalizer2::normalizeUTF8	[vim extension/icu/icu-collate.cpp +23568]
  │   ├── Locale::getKeywordValue	[vim extension/icu/icu-collate.cpp +37837]
  │   ├── Locale::getUnicodeKeywordValue	[vim extension/icu/icu-collate.cpp +37898]
  │   ├── createTagStringWithAlternates	[vim extension/icu/icu-collate.cpp +38195]
  │   ├── _uloc_addLikelySubtags	[vim extension/icu/icu-collate.cpp +38851]
  │   ├── _uloc_minimizeSubtags	[vim extension/icu/icu-collate.cpp +38931]
  │   ├── if	[vim extension/icu/icu-collate.cpp +44201]
  │   ├── appendCodePointDelta	[vim extension/icu/icu-collate.cpp +45093]
  │   ├── Flush	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +51]
  │   ├── AppendValue	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +121]
  │   ├── append_varchar	[vim extension/tpcds/dsdgen/append_info-c.cpp +32]
  │   ├── append_key	[vim extension/tpcds/dsdgen/append_info-c.cpp +47]
  │   ├── append_integer	[vim extension/tpcds/dsdgen/append_info-c.cpp +52]
  │   ├── append_boolean	[vim extension/tpcds/dsdgen/append_info-c.cpp +57]
  │   ├── append_decimal	[vim extension/tpcds/dsdgen/append_info-c.cpp +71]
  │   ├── Flush	[vim extension/tpch/dbgen/dbgen.cpp +122]
  │   ├── ParquetWriteSink	[vim extension/parquet/parquet-extension.cpp +440]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── ParquetMetaDataOperatorData::LoadFileMetaData	[vim extension/parquet/parquet_metadata.cpp +160]
  │   ├── ParquetMetaDataOperatorData::LoadSchemaData	[vim extension/parquet/parquet_metadata.cpp +348]
  │   ├── NumpyResultConversion::Append	[vim tools/pythonpkg/src/array_wrapper.cpp +663]
  │   ├── MapFunction::MapFunctionExec	[vim tools/pythonpkg/src/map.cpp +76]
  │   ├── DuckDBPyResult::FetchNumpyInternal	[vim tools/pythonpkg/src/pyresult.cpp +207]
  │   ├── FetchArrowChunk	[vim tools/rpkg/src/statement.cpp +527]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1boolean	[vim tools/jdbc/src/jni/duckdb_java.cpp +458]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1byte	[vim tools/jdbc/src/jni/duckdb_java.cpp +468]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1short	[vim tools/jdbc/src/jni/duckdb_java.cpp +478]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1int	[vim tools/jdbc/src/jni/duckdb_java.cpp +488]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1long	[vim tools/jdbc/src/jni/duckdb_java.cpp +498]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1float	[vim tools/jdbc/src/jni/duckdb_java.cpp +508]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1double	[vim tools/jdbc/src/jni/duckdb_java.cpp +518]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1string	[vim tools/jdbc/src/jni/duckdb_java.cpp +528]
  ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── StandardColumnData::FetchRow	[vim src/storage/table/standard_column_data.cpp +137]
  │   ├── ColumnData::FetchRow	[vim src/storage/table/column_data.cpp +287]
  │   └── StructColumnData::FetchRow	[vim src/storage/table/struct_column_data.cpp +196]
  ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::Scan	[vim src/storage/table/row_group.cpp +426]
  │   └── RowGroup::ScanCommitted	[vim src/storage/table/row_group.cpp +430]
  ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── StandardColumnData::FetchRow	[vim src/storage/table/standard_column_data.cpp +137]
  │   ├── ColumnData::FetchRow	[vim src/storage/table/column_data.cpp +287]
  │   └── StructColumnData::FetchRow	[vim src/storage/table/struct_column_data.cpp +196]
  ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── DataTable::UpdateColumn	[vim src/storage/data_table.cpp +963]
  │   ├── ReplayState::ReplayUpdate	[vim src/storage/wal_replay.cpp +463]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── StandardColumnData::UpdateColumn	[vim src/storage/table/standard_column_data.cpp +113]
  │   └── StructColumnData::UpdateColumn	[vim src/storage/table/struct_column_data.cpp +163]
  ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── ColumnData::Select	[vim src/storage/table/column_data.cpp +155]
  │   └── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   └── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── ConstantScanPartial	[vim src/storage/compression/numeric_constant.cpp +69]
  │   └── ConstantFetchRow	[vim src/storage/compression/numeric_constant.cpp +83]
  ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   └── UncompressedStringStorage::StringScan	[vim src/storage/compression/string_uncompressed.cpp +164]
  ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── ColumnSegment::Scan	[vim src/storage/table/column_segment.cpp +77]
  │   ├── UpdateSegment::FetchUpdates	[vim src/storage/table/update_segment.cpp +161]
  │   ├── UpdateSegment::FetchCommitted	[vim src/storage/table/update_segment.cpp +226]
  │   ├── UpdateSegment::FetchCommittedRange	[vim src/storage/table/update_segment.cpp +322]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── Validity	[vim src/include/duckdb/common/types/vector.hpp +221]
  │   ├── SelVector	[vim src/include/duckdb/common/types/vector.hpp +234]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── IsNull	[vim src/include/duckdb/common/types/vector.hpp +286]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteSwitch	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +218]
  │   ├── Select	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +468]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── NullaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +204]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── ExpressionExecutor::EvaluateScalar	[vim src/execution/expression_executor.cpp +79]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor.cpp +138]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ValidityFillLoop	[vim src/execution/expression_executor/execute_case.cpp +93]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── CompareTuple	[vim src/common/types/chunk_collection.cpp +226]
  │   ├── Vector::Slice	[vim src/common/types/vector.cpp +115]
  │   ├── Vector::Slice	[vim src/common/types/vector.cpp +151]
  │   ├── Vector::Slice	[vim src/common/types/vector.cpp +171]
  │   ├── Vector::SetValue	[vim src/common/types/vector.cpp +283]
  │   ├── Vector::GetValue	[vim src/common/types/vector.cpp +430]
  │   ├── Vector::ToString	[vim src/common/types/vector.cpp +578]
  │   ├── Vector::ToString	[vim src/common/types/vector.cpp +611]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── FlatVector::SetNull	[vim src/common/types/vector.cpp +1144]
  │   ├── ConstantVector::SetNull	[vim src/common/types/vector.cpp +1156]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── StringVector::AddHeapReference	[vim src/common/types/vector.cpp +1320]
  │   ├── StructVector::GetEntries	[vim src/common/types/vector.cpp +1334]
  │   ├── ListVector::GetEntry	[vim src/common/types/vector.cpp +1351]
  │   ├── ListVector::Reserve	[vim src/common/types/vector.cpp +1369]
  │   ├── ListVector::GetListSize	[vim src/common/types/vector.cpp +1519]
  │   ├── ListVector::ReferenceEntry	[vim src/common/types/vector.cpp +1528]
  │   ├── ListVector::SetListSize	[vim src/common/types/vector.cpp +1537]
  │   ├── DataChunk::Copy	[vim src/common/types/data_chunk.cpp +96]
  │   ├── DataChunk::Copy	[vim src/common/types/data_chunk.cpp +107]
  │   ├── DataChunk::Append	[vim src/common/types/data_chunk.cpp +135]
  │   ├── DataChunk::Slice	[vim src/common/types/data_chunk.cpp +225]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +224]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ValueStringCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +473]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── EnumCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +582]
  │   ├── StructCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +639]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── VectorOperations::HasNotNull	[vim src/common/vector_operations/null_operations.cpp +41]
  │   ├── VectorOperations::HasNull	[vim src/common/vector_operations/null_operations.cpp +64]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelect	[vim src/common/vector_operations/is_distinct_from.cpp +260]
  │   ├── StructVectorGetSlicedEntries	[vim src/common/vector_operations/is_distinct_from.cpp +449]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── RowOperations::Gather	[vim src/common/row_operations/row_gather.cpp +62]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── ComputeStructEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +21]
  │   ├── HeapScatterStructVector	[vim src/common/row_operations/row_heap_scatter.cpp +210]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── Finalize	[vim src/function/aggregate/distributive/first.cpp +177]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── ListUpdateFunction	[vim src/function/aggregate/nested/list.cpp +29]
  │   ├── Finalize	[vim src/function/aggregate/sorted_aggregate_function.cpp +185]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── ConcatWSFunction	[vim src/function/scalar/string/concat.cpp +188]
  │   ├── StructExtractFunction	[vim src/function/scalar/struct/struct_extract.cpp +27]
  │   ├── StructPackFunction	[vim src/function/scalar/struct/struct_pack.cpp +11]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── MapExtractFunction	[vim src/function/scalar/map/map_extract.cpp +22]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ArraySliceFunction	[vim src/function/scalar/list/array_slice.cpp +139]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractFunction	[vim src/function/scalar/list/list_extract.cpp +169]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── CastSQLite::ToVectorsSQLiteValue	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +46]
  │   └── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── DataTable::UpdateColumn	[vim src/storage/data_table.cpp +963]
  │   ├── UpdateInfo::ToString	[vim src/storage/table/update_segment.cpp +65]
  │   ├── GetValue	[vim src/include/duckdb/main/query_result.hpp +100]
  │   ├── GetValue	[vim src/include/duckdb/main/materialized_query_result.hpp +40]
  │   ├── CastHugeintToSmallestType	[vim src/optimizer/statistics/expression/propagate_and_compress.cpp +12]
  │   ├── TemplatedCastToSmallestType	[vim src/optimizer/statistics/expression/propagate_and_compress.cpp +60]
  │   ├── ExpressionExecutor::EvaluateScalar	[vim src/execution/expression_executor.cpp +79]
  │   ├── ART::VerifyAppend	[vim src/execution/index/art/art.cpp +268]
  │   ├── MaskTypedColumn	[vim src/execution/operator/aggregate/physical_window.cpp +231]
  │   ├── PhysicalIndexJoin::GetRHSMatches	[vim src/execution/operator/join/physical_index_join.cpp +146]
  │   ├── GetDelimiter	[vim src/execution/operator/helper/physical_limit.cpp +26]
  │   ├── SampleGlobalSinkState	[vim src/execution/operator/helper/physical_reservoir_sample.cpp +11]
  │   ├── CheckForPerfectJoinOpt	[vim src/execution/physical_plan/plan_comparison_join.cpp +35]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_sample.cpp +8]
  │   ├── BufferedCSVReader::DetectCandidateTypes	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +596]
  │   ├── BufferedCSVReader::DetectHeader	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +760]
  │   ├── ReservoirSample::ReplaceElement	[vim src/execution/reservoir_sample.cpp +42]
  │   ├── Transformer::TransformSampleOptions	[vim src/parser/transform/helpers/transform_sample.cpp +21]
  │   ├── BinaryValueOperation	[vim src/common/value_operations/numeric_operations.cpp +13]
  │   ├── Value::TryCastAs	[vim src/common/types/value.cpp +1188]
  │   ├── Value::Deserialize	[vim src/common/types/value.cpp +1282]
  │   ├── ChunkCollection::Reorder	[vim src/common/types/chunk_collection.cpp +376]
  │   ├── ChunkCollection::GetValue	[vim src/common/types/chunk_collection.cpp +408]
  │   ├── ChunkCollection::Equals	[vim src/common/types/chunk_collection.cpp +427]
  │   ├── Vector::GetValue	[vim src/common/types/vector.cpp +430]
  │   ├── Vector::ToString	[vim src/common/types/vector.cpp +578]
  │   ├── Vector::ToString	[vim src/common/types/vector.cpp +611]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::GetValuesFromOffsets	[vim src/common/types/vector.cpp +1509]
  │   ├── DataChunk::GetValue	[vim src/common/types/data_chunk.cpp +69]
  │   ├── ValueStringCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +473]
  │   ├── EnumCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +582]
  │   ├── StructCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +639]
  │   ├── QueryResult::Equals	[vim src/main/query_result.cpp +31]
  │   ├── DBConfig::SetOption	[vim src/main/config.cpp +60]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── MaterializedQueryResult::GetValue	[vim src/main/materialized_query_result.cpp +19]
  │   ├── MaterializedQueryResult::ToString	[vim src/main/materialized_query_result.cpp +25]
  │   ├── duckdb_arrow_rows_changed	[vim src/main/capi/arrow-c.cpp +55]
  │   ├── BindApproxQuantile	[vim src/function/aggregate/holistic/approximate_quantile.cpp +125]
  │   ├── BindReservoirQuantile	[vim src/function/aggregate/holistic/reservoir_quantile.cpp +178]
  │   ├── CheckQuantile	[vim src/function/aggregate/holistic/quantile.cpp +1107]
  │   ├── StrfTimeBindFunction	[vim src/function/scalar/date/strftime.cpp +583]
  │   ├── MapExtractFunction	[vim src/function/scalar/map/map_extract.cpp +22]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── PragmaSetProfilerHistorySize	[vim src/function/pragma/pragma_functions.cpp +34]
  │   ├── PragmaSetThreads	[vim src/function/pragma/pragma_functions.cpp +116]
  │   ├── PragmaSetProgressBarWaitTime	[vim src/function/pragma/pragma_functions.cpp +125]
  │   ├── PragmaPerfectHashThreshold	[vim src/function/pragma/pragma_functions.cpp +224]
  │   ├── ReadCSVBind	[vim src/function/table/read_csv.cpp +17]
  │   ├── SummaryFunction	[vim src/function/table/summary.cpp +27]
  │   ├── RangeFunctionBind	[vim src/function/table/range.cpp +21]
  │   ├── RangeDateTimeBind	[vim src/function/table/range.cpp +126]
  │   ├── PragmaTableInfoBind	[vim src/function/table/system/pragma_table_info.cpp +30]
  │   ├── PragmaStorageInfoBind	[vim src/function/table/system/pragma_storage_info.cpp +33]
  │   ├── PragmaStorageInfoFunction	[vim src/function/table/system/pragma_storage_info.cpp +101]
  │   ├── RepeatBind	[vim src/function/table/repeat.cpp +20]
  │   ├── ArrowTableFunction::ArrowScanBind	[vim src/function/table/arrow.cpp +163]
  │   ├── ParseString	[vim src/function/table/copy_csv.cpp +40]
  │   ├── ParseInteger	[vim src/function/table/copy_csv.cpp +51]
  │   ├── ParseColumnList	[vim src/function/table/copy_csv.cpp +132]
  │   ├── GroupBinder::BindConstant	[vim src/planner/expression_binder/group_binder.cpp +68]
  │   ├── OrderBinder::Bind	[vim src/planner/expression_binder/order_binder.cpp +28]
  │   ├── Binder::BindDelimiter	[vim src/planner/binder/query_node/bind_select_node.cpp +36]
  │   ├── MyExpressionExecutor::Execute	[vim examples/standalone-plan/main.cpp +565]
  │   ├── DsdgenBind	[vim extension/tpcds/tpcds-extension.cpp +28]
  │   ├── PragmaTpcdsQuery	[vim extension/tpcds/tpcds-extension.cpp +154]
  │   ├── PragmaTpchQuery	[vim extension/tpch/tpch-extension.cpp +150]
  │   ├── ParquetScanBind	[vim extension/parquet/parquet-extension.cpp +190]
  │   ├── ParquetMetaDataBind	[vim extension/parquet/parquet_metadata.cpp +407]
  │   ├── GetInternalValue	[vim tools/odbc/statement_functions.cpp +144]
  │   ├── CastTimestampValue	[vim tools/odbc/statement_functions.cpp +163]
  │   ├── duckdb::GetDataStmtResult	[vim tools/odbc/statement_functions.cpp +223]
  │   ├── OdbcFetch::GetValue	[vim tools/odbc/odbc_fetch.cpp +247]
  │   ├── OdbcInterval::GetInterval	[vim tools/odbc/odbc_interval.cpp +8]
  │   ├── GetScalar	[vim tools/pythonpkg/src/arrow_array_stream.cpp +58]
  │   ├── GetValueToPython	[vim tools/pythonpkg/src/pyresult.cpp +34]
  │   ├── GetValueToPython	[vim tools/pythonpkg/src/pyresult.cpp +34]
  │   ├── DuckDBPyResult::Fetchone	[vim tools/pythonpkg/src/pyresult.cpp +150]
  │   ├── RApiTypes::ValueToSexp	[vim tools/rpkg/src/utils.cpp +229]
  │   ├── convert_chunk	[vim tools/nodejs/src/statement.cpp +124]
  │   ├── ToVectorStringValue	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/include/cast_sqlite.hpp +38]
  │   ├── CastSQLite::ToVectorStringValue	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +132]
  │   ├── sqlite3_step	[vim tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp +208]
  │   └── sqlite3_column_has_value	[vim tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp +435]
  ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Vector::GetValue	[vim src/common/types/vector.cpp +430]
  │   ├── Vector::ToString	[vim src/common/types/vector.cpp +578]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   └── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +224]
  ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── Index::ExecuteExpressions	[vim src/storage/index.cpp +44]
  │   ├── DataTable::AddIndex	[vim src/storage/data_table.cpp +1021]
  │   ├── Execute	[vim src/include/duckdb/execution/expression_executor.hpp +31]
  │   ├── ExecuteRecursive	[vim src/include/duckdb/main/prepared_statement.hpp +64]
  │   ├── Finish	[vim src/include/duckdb/parallel/task_counter.hpp +30]
  │   ├── UnaryFunction	[vim src/include/duckdb/function/scalar_function.hpp +135]
  │   ├── CreateBinaryFunction	[vim src/include/duckdb/function/udf_function.hpp +153]
  │   ├── CreateTernaryFunction	[vim src/include/duckdb/function/udf_function.hpp +161]
  │   ├── CreateBinaryFunction	[vim src/include/duckdb/function/udf_function.hpp +251]
  │   ├── CreateTernaryFunction	[vim src/include/duckdb/function/udf_function.hpp +276]
  │   ├── ExpressionExecutor::ExecuteExpression	[vim src/execution/expression_executor.cpp +71]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor.cpp +138]
  │   ├── ExpressionExecutor::DefaultSelect	[vim src/execution/expression_executor.cpp +246]
  │   ├── PhysicalExpressionScan::EvaluateExpression	[vim src/execution/operator/scan/physical_expression_scan.cpp +31]
  │   ├── PhysicalUnnest::Execute	[vim src/execution/operator/projection/physical_unnest.cpp +152]
  │   ├── PhysicalOrder::Sink	[vim src/execution/operator/order/physical_order.cpp +72]
  │   ├── TopNSortState::Sink	[vim src/execution/operator/order/physical_top_n.cpp +120]
  │   ├── TopNHeap::ExtractBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +295]
  │   ├── MaterializeExpressions	[vim src/execution/operator/aggregate/physical_window.cpp +395]
  │   ├── MaterializeOverForWindow	[vim src/execution/operator/aggregate/physical_window.cpp +586]
  │   ├── PhysicalIndexJoin::Execute	[vim src/execution/operator/join/physical_index_join.cpp +176]
  │   ├── PhysicalNestedLoopJoin::Sink	[vim src/execution/operator/join/physical_nested_loop_join.cpp +144]
  │   ├── PhysicalNestedLoopJoin::ResolveSimpleJoin	[vim src/execution/operator/join/physical_nested_loop_join.cpp +268]
  │   ├── PhysicalNestedLoopJoin::ResolveComplexJoin	[vim src/execution/operator/join/physical_nested_loop_join.cpp +313]
  │   ├── PerfectHashJoinExecutor::ProbePerfectHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +149]
  │   ├── PhysicalProjection::Execute	[vim src/execution/operator/projection/physical_projection.cpp +26]
  │   ├── PhysicalHashJoin::Sink	[vim src/execution/operator/join/physical_hash_join.cpp +128]
  │   ├── PhysicalHashJoin::Execute	[vim src/execution/operator/join/physical_hash_join.cpp +217]
  │   ├── GetDelimiter	[vim src/execution/operator/helper/physical_limit.cpp +26]
  │   ├── TemplatedTryCastDateVector	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +441]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_function.cpp +19]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_case.cpp +27]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_cast.cpp +15]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_conjunction.cpp +28]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_comparison.cpp +20]
  │   ├── ExpressionExecutor::Select	[vim src/execution/expression_executor/execute_comparison.cpp +271]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_operator.cpp +17]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_between.cpp +92]
  │   ├── ExpressionExecutor::Select	[vim src/execution/expression_executor/execute_between.cpp +124]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── VectorOperations::Not	[vim src/common/vector_operations/boolean_operators.cpp +172]
  │   ├── TimestampCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +350]
  │   ├── TimestampNsCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +383]
  │   ├── TimestampMsCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +400]
  │   ├── TimestampSecCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +417]
  │   ├── TemplatedExecute	[vim src/common/vector_operations/comparison_operators.cpp +135]
  │   ├── VectorOperations::Equals	[vim src/common/vector_operations/comparison_operators.cpp +196]
  │   ├── VectorOperations::NotEquals	[vim src/common/vector_operations/comparison_operators.cpp +200]
  │   ├── VectorOperations::GreaterThanEquals	[vim src/common/vector_operations/comparison_operators.cpp +204]
  │   ├── VectorOperations::LessThanEquals	[vim src/common/vector_operations/comparison_operators.cpp +208]
  │   ├── VectorOperations::GreaterThan	[vim src/common/vector_operations/comparison_operators.cpp +212]
  │   ├── VectorOperations::LessThan	[vim src/common/vector_operations/comparison_operators.cpp +216]
  │   ├── Relation::Execute	[vim src/main/relation.cpp +188]
  │   ├── Relation::Insert	[vim src/main/relation.cpp +202]
  │   ├── Relation::Create	[vim src/main/relation.cpp +220]
  │   ├── Relation::WriteCSV	[vim src/main/relation.cpp +228]
  │   ├── Relation::CreateView	[vim src/main/relation.cpp +236]
  │   ├── Relation::Explain	[vim src/main/relation.cpp +254]
  │   ├── Relation::Head	[vim src/main/relation.cpp +298]
  │   ├── Connection::QueryParamsRecursive	[vim src/main/connection.cpp +85]
  │   ├── PreparedStatement::Execute	[vim src/main/prepared_statement.cpp +40]
  │   ├── duckdb_execute_prepared	[vim src/main/capi/prepared-c.cpp +163]
  │   ├── TableRelation::Update	[vim src/main/relation/table_relation.cpp +53]
  │   ├── TableRelation::Delete	[vim src/main/relation/table_relation.cpp +63]
  │   ├── duckdb_execute_prepared_arrow	[vim src/main/capi/arrow-c.cpp +81]
  │   ├── TaskScheduler::ExecuteForever	[vim src/parallel/task_scheduler.cpp +123]
  │   ├── ExecuteTask	[vim src/parallel/pipeline.cpp +34]
  │   ├── Executor::WorkOnTasks	[vim src/parallel/executor.cpp +251]
  │   ├── PipelineExecutor::ExecutePushInternal	[vim src/parallel/pipeline_executor.cpp +72]
  │   ├── PipelineExecutor::ExecutePull	[vim src/parallel/pipeline_executor.cpp +173]
  │   ├── PipelineExecutor::Execute	[vim src/parallel/pipeline_executor.cpp +227]
  │   ├── ConstantOperation	[vim src/function/aggregate/distributive/minmax.cpp +65]
  │   ├── Operation	[vim src/function/aggregate/distributive/minmax.cpp +77]
  │   ├── Combine	[vim src/function/aggregate/distributive/minmax.cpp +183]
  │   ├── Update	[vim src/function/aggregate/distributive/minmax.cpp +418]
  │   ├── Combine	[vim src/function/aggregate/distributive/minmax.cpp +443]
  │   ├── ReplaceFunction	[vim src/function/scalar/string/replace.cpp +65]
  │   ├── MismatchesFunction	[vim src/function/scalar/string/mismatches.cpp +32]
  │   ├── BinaryTrimFunction	[vim src/function/scalar/string/trim.cpp +78]
  │   ├── PadFunction	[vim src/function/scalar/string/pad.cpp +120]
  │   ├── RepeatFunction	[vim src/function/scalar/string/repeat.cpp +25]
  │   ├── LevenshteinFunction	[vim src/function/scalar/string/levenshtein.cpp +72]
  │   ├── JaccardFunction	[vim src/function/scalar/string/jaccard.cpp +52]
  │   ├── LikeEscapeFunction	[vim src/function/scalar/string/like.cpp +424]
  │   ├── RegularLikeFunction	[vim src/function/scalar/string/like.cpp +450]
  │   ├── SubstringFunction	[vim src/function/scalar/string/substring.cpp +133]
  │   ├── SubstringFunctionASCII	[vim src/function/scalar/string/substring.cpp +153]
  │   ├── ConcatOperator	[vim src/function/scalar/string/concat.cpp +99]
  │   ├── LeftFunction	[vim src/function/scalar/string/left_right.cpp +19]
  │   ├── RightFunction	[vim src/function/scalar/string/left_right.cpp +46]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── AgeFunctionStandard	[vim src/function/scalar/date/age.cpp +11]
  │   ├── AgeFunction	[vim src/function/scalar/date/age.cpp +20]
  │   ├── StrfTimeFunctionDate	[vim src/function/scalar/date/strftime.cpp +600]
  │   ├── StrfTimeFunctionTimestamp	[vim src/function/scalar/date/strftime.cpp +619]
  │   ├── StrpTimeFunction	[vim src/function/scalar/date/strftime.cpp +1169]
  │   ├── EpochSecFunction	[vim src/function/scalar/date/epoch.cpp +17]
  │   ├── EpochMillisFunction	[vim src/function/scalar/date/epoch.cpp +30]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LastYearFunction	[vim src/function/scalar/date/date_part.cpp +73]
  │   ├── BinaryDoubleFunctionWrapper	[vim src/function/scalar/math/numeric.cpp +79]
  │   ├── Operation	[vim src/function/scalar/math/numeric.cpp +271]
  │   ├── Operation	[vim src/function/scalar/math/numeric.cpp +327]
  │   ├── Operation	[vim src/function/scalar/math/numeric.cpp +405]
  │   ├── DecimalRoundNegativePrecisionFunction	[vim src/function/scalar/math/numeric.cpp +438]
  │   ├── DecimalRoundPositivePrecisionFunction	[vim src/function/scalar/math/numeric.cpp +464]
  │   ├── DecodeFunction	[vim src/function/scalar/blob/encode.cpp +25]
  │   ├── ExecuteStringExtract	[vim src/function/scalar/list/list_extract.cpp +162]
  │   ├── DateTruncUnaryExecutor	[vim src/function/scalar/date/date_trunc.cpp +254]
  │   ├── BinaryScalarFunctionIgnoreZero	[vim src/function/scalar/operators/arithmetic.cpp +726]
  │   ├── main	[vim examples/embedded-c++-windows/cppintegration.cpp +13]
  │   ├── ExecuteFilter	[vim examples/standalone-plan/main.cpp +386]
  │   ├── GetNextRow	[vim examples/standalone-plan/main.cpp +418]
  │   ├── ExecuteAggregate	[vim examples/standalone-plan/main.cpp +445]
  │   ├── MyExpressionExecutor::Execute	[vim examples/standalone-plan/main.cpp +543]
  │   ├── MyExpressionExecutor::Execute	[vim examples/standalone-plan/main.cpp +547]
  │   ├── MyExpressionExecutor::Execute	[vim examples/standalone-plan/main.cpp +569]
  │   ├── MyExpressionExecutor::Execute	[vim examples/standalone-plan/main.cpp +601]
  │   ├── MyExpressionExecutor::Execute	[vim examples/standalone-plan/main.cpp +610]
  │   ├── stem_function	[vim extension/fts/fts-extension.cpp +17]
  │   ├── ICUCollateFunction	[vim extension/icu/icu-extension.cpp +56]
  │   ├── duckdb::SingleExecuteStmt	[vim tools/odbc/statement_functions.cpp +82]
  │   ├── DuckDBPyConnection::ExecuteMany	[vim tools/pythonpkg/src/pyconnection.cpp +94]
  │   ├── DuckDBPyConnection::Execute	[vim tools/pythonpkg/src/pyconnection.cpp +99]
  │   ├── DuckDBPyConnection::Append	[vim tools/pythonpkg/src/pyconnection.cpp +154]
  │   ├── DuckDBPyConnection::Begin	[vim tools/pythonpkg/src/pyconnection.cpp +300]
  │   ├── DuckDBPyConnection::Commit	[vim tools/pythonpkg/src/pyconnection.cpp +305]
  │   ├── DuckDBPyConnection::Rollback	[vim tools/pythonpkg/src/pyconnection.cpp +313]
  │   ├── DuckDBPyRelation::ToDF	[vim tools/pythonpkg/src/pyrelation.cpp +154]
  │   ├── DuckDBPyRelation::Fetchone	[vim tools/pythonpkg/src/pyrelation.cpp +166]
  │   ├── DuckDBPyRelation::Fetchall	[vim tools/pythonpkg/src/pyrelation.cpp +178]
  │   ├── DuckDBPyRelation::ToArrowTable	[vim tools/pythonpkg/src/pyrelation.cpp +190]
  │   ├── DuckDBPyRelation::Execute	[vim tools/pythonpkg/src/pyrelation.cpp +241]
  │   ├── DuckDBPyRelation::Print	[vim tools/pythonpkg/src/pyrelation.cpp +287]
  │   ├── RApi::Bind	[vim tools/rpkg/src/statement.cpp +146]
  │   ├── RApi::Execute	[vim tools/rpkg/src/statement.cpp +634]
  │   ├── DoWork	[vim tools/nodejs/src/statement.cpp +206]
  │   ├── RegexpMatchesFunction	[vim src/function/scalar/string/regexp.cpp +117]
  │   ├── RegexReplaceFunction	[vim src/function/scalar/string/regexp.cpp +166]
  │   ├── RegexExtractFunction	[vim src/function/scalar/string/regexp.cpp +218]
  │   ├── sqlite3_step	[vim tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp +208]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1execute	[vim tools/jdbc/src/jni/duckdb_java.cpp +132]
  ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   └── ExecuteSwitch	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +218]
  ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteSwitch	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +218]
  │   └── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── ExecuteSwitch	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +218]
  │   └── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   └── Select	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +468]
  ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   └── Select	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +468]
  ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +173]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +178]
  │   ├── GenericExecute	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +183]
  │   ├── BinaryFunction	[vim src/include/duckdb/function/scalar_function.hpp +141]
  │   ├── RegularLikeFunction	[vim src/function/scalar/string/like.cpp +450]
  │   ├── DateSubBinaryExecutor	[vim src/function/scalar/date/date_sub.cpp +346]
  │   ├── DateDiffBinaryExecutor	[vim src/function/scalar/date/date_diff.cpp +310]
  │   ├── DatePartFunction	[vim src/function/scalar/date/date_part.cpp +693]
  │   └── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   └── UnaryScatterUpdate	[vim src/include/duckdb/function/aggregate_function.hpp +178]
  ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   └── UnaryUpdate	[vim src/include/duckdb/function/aggregate_function.hpp +185]
  ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UncompressedFunctions::FinalizeCompress	[vim src/storage/compression/fixed_size_uncompressed.cpp +103]
  │   ├── RLEFinalizeCompress	[vim src/storage/compression/rle.cpp +239]
  │   ├── FormatSigned	[vim src/include/duckdb/common/types/cast_helpers.hpp +61]
  │   ├── Format	[vim src/include/duckdb/common/types/cast_helpers.hpp +131]
  │   ├── FormatSigned	[vim src/include/duckdb/common/types/cast_helpers.hpp +234]
  │   ├── FormatDecimal	[vim src/include/duckdb/common/types/cast_helpers.hpp +311]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── StateFinalize	[vim src/include/duckdb/function/aggregate_function.hpp +219]
  │   ├── TopNHeap::Combine	[vim src/execution/operator/order/physical_top_n.cpp +242]
  │   ├── TopNHeap::Finalize	[vim src/execution/operator/order/physical_top_n.cpp +258]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── PhysicalTopN::Finalize	[vim src/execution/operator/order/physical_top_n.cpp +445]
  │   ├── PhysicalHashAggregate::Finalize	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +218]
  │   ├── PhysicalHashJoin::Finalize	[vim src/execution/operator/join/physical_hash_join.cpp +165]
  │   ├── PhysicalDelimJoin::Finalize	[vim src/execution/operator/join/physical_delim_join.cpp +87]
  │   ├── RadixPartitionedHashTable::Combine	[vim src/execution/radix_partitioned_hashtable.cpp +154]
  │   ├── RadixPartitionedHashTable::Finalize	[vim src/execution/radix_partitioned_hashtable.cpp +191]
  │   ├── RadixAggregateFinalizeTask	[vim src/execution/radix_partitioned_hashtable.cpp +258]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_function.cpp +6]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_case.cpp +17]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_cast.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_parameter.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_reference.cpp +6]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_conjunction.cpp +18]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_constant.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_comparison.cpp +11]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_operator.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_between.cpp +82]
  │   ├── ReservoirSamplePercentage::GetChunk	[vim src/execution/reservoir_sample.cpp +131]
  │   ├── PartitionableHashTable::ListAddChunk	[vim src/execution/partitionable_hashtable.cpp +66]
  │   ├── PartitionableHashTable::Finalize	[vim src/execution/partitionable_hashtable.cpp +160]
  │   ├── StringHeap::AddBlob	[vim src/common/types/string_heap.cpp +34]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +86]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +104]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +121]
  │   ├── IntegerCastLoop	[vim src/common/operator/cast_operators.cpp +825]
  │   ├── CastFromBlob::Operation	[vim src/common/operator/cast_operators.cpp +1275]
  │   ├── TryCastToBlob::Operation	[vim src/common/operator/cast_operators.cpp +1288]
  │   ├── CastFromUUID::Operation	[vim src/common/operator/cast_operators.cpp +1305]
  │   ├── HandleExponent	[vim src/common/operator/cast_operators.cpp +1536]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── PipelineFinishEvent::FinishEvent	[vim src/parallel/pipeline_finish_event.cpp +13]
  │   ├── Pipeline::Finalize	[vim src/parallel/pipeline.cpp +145]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_sxy.cpp +38]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +31]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_intercept.cpp +44]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_r2.cpp +43]
  │   ├── ASCIICaseConvert	[vim src/function/scalar/string/caseconvert.cpp +42]
  │   ├── UnicodeCaseConvert	[vim src/function/scalar/string/caseconvert.cpp +108]
  │   ├── Operation	[vim src/function/scalar/string/trim.cpp +15]
  │   ├── BinaryTrimFunction	[vim src/function/scalar/string/trim.cpp +78]
  │   ├── SubstringEmptyString	[vim src/function/scalar/string/substring.cpp +13]
  │   ├── SubstringSlice	[vim src/function/scalar/string/substring.cpp +19]
  │   ├── Operation	[vim src/function/scalar/string/md5.cpp +11]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── ConcatOperator	[vim src/function/scalar/string/concat.cpp +99]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── Operation	[vim src/function/scalar/string/reverse.cpp +34]
  │   ├── StrfTimeFunctionDate	[vim src/function/scalar/date/strftime.cpp +600]
  │   ├── StrfTimeFunctionTimestamp	[vim src/function/scalar/date/strftime.cpp +619]
  │   ├── Operation	[vim src/function/scalar/blob/base64.cpp +8]
  │   ├── Operation	[vim src/function/scalar/blob/base64.cpp +18]
  │   ├── WriteCSVBind	[vim src/function/table/copy_csv.cpp +163]
  │   ├── ReadCSVBind	[vim src/function/table/copy_csv.cpp +191]
  │   ├── QueryProfiler::Finalize	[vim src/main/query_profiler.cpp +66]
  │   ├── QueryProfiler::EndQuery	[vim src/main/query_profiler.cpp +75]
  │   ├── ParquetWriteFinalize	[vim extension/parquet/parquet-extension.cpp +463]
  │   └── DecodePythonUnicode	[vim tools/pythonpkg/src/vector_conversion.cpp +92]
  ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   └── UnaryWindow	[vim src/include/duckdb/function/aggregate_function.hpp +192]
  ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::ConstructTree	[vim src/execution/window_segment_tree.cpp +135]
  │   └── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   └── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── DataTable::AddIndex	[vim src/storage/data_table.cpp +1021]
  │   ├── Node16::Insert	[vim src/execution/index/art/node16.cpp +54]
  │   ├── Node::InsertLeaf	[vim src/execution/index/art/node.cpp +38]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Append	[vim src/execution/index/art/art.cpp +257]
  │   ├── ART::InsertToLeaf	[vim src/execution/index/art/art.cpp +304]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +312]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +312]
  │   ├── Node48::Insert	[vim src/execution/index/art/node48.cpp +58]
  │   ├── Node4::Insert	[vim src/execution/index/art/node4.cpp +51]
  │   ├── Relation::Insert	[vim src/main/relation.cpp +198]
  │   ├── Relation::Insert	[vim src/main/relation.cpp +210]
  │   ├── DuckDBPyRelation::InsertInto	[vim tools/pythonpkg/src/pyrelation.cpp +257]
  │   └── DuckDBPyRelation::Insert	[vim tools/pythonpkg/src/pyrelation.cpp +268]
  ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── Index::Delete	[vim src/storage/index.cpp +38]
  │   ├── DataTable::RevertAppend	[vim src/storage/data_table.cpp +657]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +728]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── StorageManager::CreateCheckpoint	[vim src/storage/storage_manager.cpp +130]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── RowGroup::Delete	[vim src/storage/table/row_group.cpp +796]
  │   ├── VersionDeleteState::Flush	[vim src/storage/table/row_group.cpp +851]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   └── PhysicalDelete::Sink	[vim src/execution/operator/persistent/physical_delete.cpp +22]
  ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   └── UnnestVector	[vim src/execution/operator/projection/physical_unnest.cpp +83]
  ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── DataTable::Fetch	[vim src/storage/data_table.cpp +392]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── FixedSizeScanPartial	[vim src/storage/compression/fixed_size_uncompressed.cpp +126]
  │   ├── FixedSizeFetchRow	[vim src/storage/compression/fixed_size_uncompressed.cpp +149]
  │   ├── RLEScanPartial	[vim src/storage/compression/rle.cpp +297]
  │   ├── RLEFetchRow	[vim src/storage/compression/rle.cpp +330]
  │   ├── GetChunk	[vim src/storage/local_storage.cpp +212]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ListColumnData::FetchListEntry	[vim src/storage/table/list_column_data.cpp +34]
  │   ├── ListColumnData::ScanCount	[vim src/storage/table/list_column_data.cpp +77]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RowGroup::FetchRow	[vim src/storage/table/row_group.cpp +486]
  │   ├── RowGroup::UpdateColumn	[vim src/storage/table/row_group.cpp +616]
  │   ├── ColumnSegment::FilterSelection	[vim src/storage/table/column_segment.cpp +282]
  │   ├── UpdateMergeFetch	[vim src/storage/table/update_segment.cpp +119]
  │   ├── TemplatedFetchCommitted	[vim src/storage/table/update_segment.cpp +185]
  │   ├── TemplatedFetchCommittedRange	[vim src/storage/table/update_segment.cpp +280]
  │   ├── TemplatedFetchRow	[vim src/storage/table/update_segment.cpp +371]
  │   ├── InitializeUpdateData	[vim src/storage/table/update_segment.cpp +620]
  │   ├── MergeUpdateLoop	[vim src/storage/table/update_segment.cpp +838]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── ConstantScanFunction	[vim src/storage/compression/numeric_constant.cpp +31]
  │   ├── ConstantFillFunction	[vim src/storage/compression/numeric_constant.cpp +53]
  │   ├── UncompressedStringStorage::StringScanPartial	[vim src/storage/compression/string_uncompressed.cpp +148]
  │   ├── UncompressedStringStorage::StringFetchRow	[vim src/storage/compression/string_uncompressed.cpp +172]
  │   ├── GetVectorType	[vim src/include/duckdb/common/types/vector.hpp +149]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +198]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +209]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +213]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +253]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +257]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +261]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── GetData	[vim src/include/duckdb/common/types/vector.hpp +296]
  │   ├── GetSequence	[vim src/include/duckdb/common/types/vector.hpp +354]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── ExecuteConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +115]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectConstant	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +259]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── WindowSegmentTree::Compute	[vim src/execution/window_segment_tree.cpp +176]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── TemplatedUnnest	[vim src/execution/operator/projection/physical_unnest.cpp +54]
  │   ├── PhysicalHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +255]
  │   ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  │   ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  │   ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  │   ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  │   ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  │   ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  │   ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  ├── Update	[vim src/execution/operator/aggregate/physical_window.cpp +200]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── AppendLoop	[vim src/storage/compression/fixed_size_uncompressed.cpp +164]
  │   ├── RLEAnalyze	[vim src/storage/compression/rle.cpp +95]
  │   ├── Append	[vim src/storage/compression/rle.cpp +159]
  │   ├── WriteValue	[vim src/storage/compression/rle.cpp +167]
  │   ├── RowGroup::Update	[vim src/storage/table/row_group.cpp +600]
  │   ├── StandardColumnData::Update	[vim src/storage/table/standard_column_data.cpp +107]
  │   ├── StandardColumnData::Update	[vim src/storage/table/standard_column_data.cpp +107]
  │   ├── StandardColumnData::UpdateColumn	[vim src/storage/table/standard_column_data.cpp +113]
  │   ├── ColumnData::Update	[vim src/storage/table/column_data.cpp +300]
  │   ├── ColumnData::UpdateColumn	[vim src/storage/table/column_data.cpp +314]
  │   ├── StructColumnData::Update	[vim src/storage/table/struct_column_data.cpp +154]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── UpdateStringStats	[vim src/storage/compression/string_uncompressed.cpp +66]
  │   ├── StatisticsPropagator::StatisticsFromValue	[vim src/optimizer/statistics/expression/propagate_constant.cpp +10]
  │   ├── ChunkIterator	[vim src/execution/operator/aggregate/physical_window.cpp +194]
  │   ├── MaskTypedColumn	[vim src/execution/operator/aggregate/physical_window.cpp +231]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   └── ParquetTransformColumnStatistics	[vim extension/parquet/parquet_statistics.cpp +78]
  ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   └── GeneratePartition	[vim src/execution/operator/aggregate/physical_window.cpp +1224]
  ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   └── PhysicalWindow::Sink	[vim src/execution/operator/aggregate/physical_window.cpp +1311]
  ├── GetCell	[vim src/execution/operator/aggregate/physical_window.cpp +670]
  │   ├── FindTypedRangeBound	[vim src/execution/operator/aggregate/physical_window.cpp +738]
  │   ├── UpdateWindowBoundaries	[vim src/execution/operator/aggregate/physical_window.cpp +805]
  │   └── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   └── ComputeWindowExpressions	[vim src/execution/operator/aggregate/physical_window.cpp +1187]
  ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PhysicalNestedLoopJoin::ResolveSimpleJoin	[vim src/execution/operator/join/physical_nested_loop_join.cpp +268]
  │   ├── PhysicalPiecewiseMergeJoin::ResolveSimpleJoin	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +194]
  │   └── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  ├── PerfectHashJoinExecutor::FullScanHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +35]
  │   └── PerfectHashJoinExecutor::BuildPerfectHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +20]
  ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── TopNHeap::Sink	[vim src/execution/operator/order/physical_top_n.cpp +238]
  │   ├── TopNHeap::Combine	[vim src/execution/operator/order/physical_top_n.cpp +242]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── PhysicalTopN::Sink	[vim src/execution/operator/order/physical_top_n.cpp +421]
  │   ├── PhysicalHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +152]
  │   ├── PhysicalDelimJoin::Sink	[vim src/execution/operator/join/physical_delim_join.cpp +72]
  │   ├── PipelineExecutor::ExecutePushInternal	[vim src/parallel/pipeline_executor.cpp +72]
  │   └── main	[vim examples/standalone-window/main.cpp +14]
  ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PhysicalPerfectHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +117]
  │   ├── RadixPartitionedHashTable::Sink	[vim src/execution/radix_partitioned_hashtable.cpp +103]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +254]
  │   └── PartitionableHashTable::ListAddChunk	[vim src/execution/partitionable_hashtable.cpp +66]
  ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   ├── StructColumnData::Append	[vim src/storage/table/struct_column_data.cpp +107]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── Combine	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +304]
  │   ├── StateCombine	[vim src/include/duckdb/function/aggregate_function.hpp +214]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/regression/regr_slope.hpp +36]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/sum_helpers.hpp +142]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/algebraic/corr.hpp +44]
  │   ├── PhysicalTopN::Combine	[vim src/execution/operator/order/physical_top_n.cpp +433]
  │   ├── PhysicalHashAggregate::Combine	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +187]
  │   ├── PhysicalPerfectHashAggregate::Combine	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +162]
  │   ├── PhysicalDelimJoin::Combine	[vim src/execution/operator/join/physical_delim_join.cpp +80]
  │   ├── RadixPartitionedHashTable::Finalize	[vim src/execution/radix_partitioned_hashtable.cpp +191]
  │   ├── RadixAggregateFinalizeTask	[vim src/execution/radix_partitioned_hashtable.cpp +258]
  │   ├── Combine	[vim src/function/aggregate/distributive/sum.cpp +17]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── Combine	[vim src/function/aggregate/algebraic/avg.cpp +60]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_sxy.cpp +32]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +25]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_intercept.cpp +36]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_r2.cpp +36]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── PropagateNumericStats	[vim src/function/scalar/operators/arithmetic.cpp +115]
  │   └── main	[vim examples/standalone-window/main.cpp +14]
  ├── ReconstructGroupVectorTemplated	[vim src/execution/perfect_aggregate_hashtable.cpp +181]
  │   └── ReconstructGroupVector	[vim src/execution/perfect_aggregate_hashtable.cpp +199]
  ├── PerfectAggregateHashTable::Scan	[vim src/execution/perfect_aggregate_hashtable.cpp +221]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +115]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +159]
  │   ├── DataTable::Scan	[vim src/storage/data_table.cpp +356]
  │   ├── DataTable::ScanBaseTable	[vim src/storage/data_table.cpp +367]
  │   ├── DataTable::VerifyAppendConstraints	[vim src/storage/data_table.cpp +440]
  │   ├── DataTable::RevertAppend	[vim src/storage/data_table.cpp +657]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +728]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::VerifyUpdateConstraints	[vim src/storage/data_table.cpp +858]
  │   ├── CheckpointManager::CreateCheckpoint	[vim src/storage/checkpoint_manager.cpp +33]
  │   ├── CheckpointManager::WriteSchema	[vim src/storage/checkpoint_manager.cpp +123]
  │   ├── LocalTableStorage::Clear	[vim src/storage/local_storage.cpp +61]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── LocalStorage::ScanTableStorage	[vim src/storage/local_storage.cpp +345]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── StandardColumnData::Scan	[vim src/storage/table/standard_column_data.cpp +55]
  │   ├── StandardColumnData::Scan	[vim src/storage/table/standard_column_data.cpp +55]
  │   ├── ColumnData::ScanVector	[vim src/storage/table/column_data.cpp +58]
  │   ├── ColumnData::Select	[vim src/storage/table/column_data.cpp +155]
  │   ├── ColumnData::FilterScan	[vim src/storage/table/column_data.cpp +162]
  │   ├── ColumnData::CheckpointScan	[vim src/storage/table/column_data.cpp +349]
  │   ├── ColumnSegment::Scan	[vim src/storage/table/column_segment.cpp +77]
  │   ├── StructColumnData::Scan	[vim src/storage/table/struct_column_data.cpp +68]
  │   ├── GetEntries	[vim src/include/duckdb/catalog/catalog_set.hpp +76]
  │   ├── PhysicalOrder::GetData	[vim src/execution/operator/order/physical_order.cpp +201]
  │   ├── TopNSortState::Scan	[vim src/execution/operator/order/physical_top_n.cpp +161]
  │   ├── TopNHeap::Combine	[vim src/execution/operator/order/physical_top_n.cpp +242]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── TopNHeap::Scan	[vim src/execution/operator/order/physical_top_n.cpp +385]
  │   ├── PhysicalTopN::GetData	[vim src/execution/operator/order/physical_top_n.cpp +466]
  │   ├── ScanSortedPartition	[vim src/execution/operator/aggregate/physical_window.cpp +532]
  │   ├── PhysicalWindow::GetData	[vim src/execution/operator/aggregate/physical_window.cpp +1411]
  │   ├── PhysicalPerfectHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +187]
  │   ├── PhysicalExport::GetData	[vim src/execution/operator/persistent/physical_export.cpp +92]
  │   ├── CanUseIndexJoin	[vim src/execution/physical_plan/plan_comparison_join.cpp +109]
  │   ├── RadixPartitionedHashTable::GetData	[vim src/execution/radix_partitioned_hashtable.cpp +329]
  │   ├── Catalog::ScanSchemas	[vim src/catalog/catalog.cpp +190]
  │   ├── Catalog::CreateMissingEntryException	[vim src/catalog/catalog.cpp +214]
  │   ├── SchemaCatalogEntry::Scan	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +192]
  │   ├── SchemaCatalogEntry::Scan	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +198]
  │   ├── Finalize	[vim src/function/aggregate/holistic/mode.cpp +144]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── TableScanFunc	[vim src/function/table/table_scan.cpp +65]
  │   ├── IndexScanFunction	[vim src/function/table/table_scan.cpp +172]
  │   ├── TableScanPushdownComplexFilter	[vim src/function/table/table_scan.cpp +207]
  │   ├── PragmaCollateInit	[vim src/function/table/system/pragma_collations.cpp +29]
  │   ├── DuckDBDependenciesInit	[vim src/function/table/system/duckdb_dependencies.cpp +53]
  │   ├── DuckDBViewsInit	[vim src/function/table/system/duckdb_views.cpp +51]
  │   ├── DuckDBSequencesInit	[vim src/function/table/system/duckdb_sequences.cpp +63]
  │   ├── DuckDBConstraintsInit	[vim src/function/table/system/duckdb_constraints.cpp +67]
  │   ├── DuckDBTablesInit	[vim src/function/table/system/duckdb_tables.cpp +66]
  │   ├── DuckDBIndexesInit	[vim src/function/table/system/duckdb_indexes.cpp +59]
  │   ├── DuckDBColumnsInit	[vim src/function/table/system/duckdb_columns.cpp +76]
  │   ├── PragmaFunctionsInit	[vim src/function/table/system/pragma_functions.cpp +47]
  │   ├── Binder::Bind	[vim src/planner/binder/statement/bind_export.cpp +42]
  │   ├── BindUpdateConstraints	[vim src/planner/binder/statement/bind_update.cpp +75]
  │   ├── main	[vim extension/parquet/parquetcli.cpp +28]
  │   └── ParquetScanImplementation	[vim extension/parquet/parquet-extension.cpp +276]
  ├── PerfectAggregateHashTable::Destroy	[vim src/execution/perfect_aggregate_hashtable.cpp +254]
  │   ├── UpdateSegment::ClearUpdates	[vim src/storage/table/update_segment.cpp +39]
  │   ├── Destroy	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +347]
  │   ├── StateDestroy	[vim src/include/duckdb/function/aggregate_function.hpp +224]
  │   ├── PhysicalUnnest::Execute	[vim src/execution/operator/projection/physical_unnest.cpp +152]
  │   ├── PerfectAggregateHashTable::~PerfectAggregateHashTable	[vim src/execution/perfect_aggregate_hashtable.cpp +35]
  │   ├── BufferedCSVReader::InitParseChunk	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +290]
  │   ├── BufferedCSVReader::DetectCandidateTypes	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +596]
  │   ├── GroupedAggregateHashTable::~GroupedAggregateHashTable	[vim src/execution/aggregate_hashtable.cpp +95]
  │   ├── DataChunk::Move	[vim src/common/types/data_chunk.cpp +87]
  │   ├── ClientContext::~ClientContext	[vim src/main/client_context.cpp +65]
  │   ├── Destroy	[vim src/function/aggregate/holistic/mode.cpp +234]
  │   └── Assign	[vim src/function/aggregate/distributive/minmax.cpp +159]
  ├── BufferedCSVReader::AddValue	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1466]
  │   ├── AddNumber	[vim src/include/duckdb/function/aggregate/sum_helpers.hpp +100]
  │   ├── AddConstant	[vim src/include/duckdb/function/aggregate/sum_helpers.hpp +105]
  │   ├── BufferedCSVReader::TryParseComplexCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +977]
  │   └── BufferedCSVReader::TryParseSimpleCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1205]
  ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── MetaBlockWriter::~MetaBlockWriter	[vim src/storage/meta_block_writer.cpp +17]
  │   ├── MetaBlockWriter::WriteData	[vim src/storage/meta_block_writer.cpp +42]
  │   ├── CheckpointManager::CreateCheckpoint	[vim src/storage/checkpoint_manager.cpp +33]
  │   ├── Update	[vim src/storage/compression/rle.cpp +42]
  │   ├── Finalize	[vim src/storage/compression/rle.cpp +207]
  │   ├── LocalStorage::Append	[vim src/storage/local_storage.cpp +165]
  │   ├── LocalStorage::Commit	[vim src/storage/local_storage.cpp +411]
  │   ├── RowGroup::Delete	[vim src/storage/table/row_group.cpp +796]
  │   ├── VersionDeleteState::Delete	[vim src/storage/table/row_group.cpp +818]
  │   ├── SingleFileBlockManager::WriteHeader	[vim src/storage/single_file_block_manager.cpp +319]
  │   ├── PhysicalSimpleAggregate::Combine	[vim src/execution/operator/aggregate/physical_simple_aggregate.cpp +153]
  │   ├── Finalize	[vim src/execution/operator/join/physical_index_join.cpp +44]
  │   ├── PhysicalNestedLoopJoin::Combine	[vim src/execution/operator/join/physical_nested_loop_join.cpp +168]
  │   ├── Finalize	[vim src/execution/operator/join/physical_nested_loop_join.cpp +228]
  │   ├── PhysicalPiecewiseMergeJoin::Combine	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +97]
  │   ├── Finalize	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +185]
  │   ├── Finalize	[vim src/execution/operator/projection/physical_projection.cpp +15]
  │   ├── PhysicalHashJoin::Combine	[vim src/execution/operator/join/physical_hash_join.cpp +156]
  │   ├── Finalize	[vim src/execution/operator/join/physical_hash_join.cpp +198]
  │   ├── PhysicalUpdate::Combine	[vim src/execution/operator/persistent/physical_update.cpp +116]
  │   ├── PhysicalInsert::Combine	[vim src/execution/operator/persistent/physical_insert.cpp +86]
  │   ├── Finalize	[vim src/execution/operator/filter/physical_filter.cpp +32]
  │   ├── BufferedCSVReader::TryParseComplexCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +977]
  │   ├── BufferedCSVReader::TryParseSimpleCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1205]
  │   ├── BufferedCSVReader::ParseCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1424]
  │   ├── BufferedCSVReader::AddRow	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1525]
  │   ├── HandleDigit	[vim src/common/operator/cast_operators.cpp +1435]
  │   ├── HandleExponent	[vim src/common/operator/cast_operators.cpp +1457]
  │   ├── Finalize	[vim src/common/operator/cast_operators.cpp +1487]
  │   ├── BufferedFileWriter::WriteData	[vim src/common/serializer/buffered_file_writer.cpp +24]
  │   ├── BufferedFileWriter::Sync	[vim src/common/serializer/buffered_file_writer.cpp +48]
  │   ├── Appender::FlushChunk	[vim src/main/appender.cpp +243]
  │   ├── Appender::Close	[vim src/main/appender.cpp +270]
  │   ├── ClientContext::LogQueryInternal	[vim src/main/client_context.cpp +520]
  │   ├── duckdb_appender_flush	[vim src/main/capi/appender-c.cpp +190]
  │   ├── Executor::Flush	[vim src/parallel/executor.cpp +635]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── PipelineExecutor::PullFinalize	[vim src/parallel/pipeline_executor.cpp +206]
  │   ├── CleanupState::~CleanupState	[vim src/transaction/cleanup_state.cpp +17]
  │   ├── CleanupState::CleanupDelete	[vim src/transaction/cleanup_state.cpp +51]
  │   ├── if	[vim src/transaction/transaction.cpp +114]
  │   ├── if	[vim extension/icu/icu-collate.cpp +44201]
  │   ├── EndRow	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +39]
  │   ├── Close	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +59]
  │   ├── OperatorProfiler::AddTiming	[vim src/main/query_profiler.cpp +200]
  │   ├── EndRow	[vim extension/tpch/dbgen/dbgen.cpp +114]
  │   ├── DBGenWrapper::LoadTPCHData	[vim extension/tpch/dbgen/dbgen.cpp +571]
  │   ├── ParquetWriteSink	[vim extension/parquet/parquet-extension.cpp +440]
  │   ├── ParquetWriteCombine	[vim extension/parquet/parquet-extension.cpp +455]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1flush	[vim tools/jdbc/src/jni/duckdb_java.cpp +438]
  ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── PhysicalNestedLoopJoin::Execute	[vim src/execution/operator/join/physical_nested_loop_join.cpp +237]
  │   ├── PhysicalPiecewiseMergeJoin::Execute	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +287]
  │   ├── PhysicalBlockwiseNLJoin::Execute	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +94]
  │   └── PhysicalHashJoin::Execute	[vim src/execution/operator/join/physical_hash_join.cpp +217]
  ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   └── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_case.cpp +27]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   └── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_operator.cpp +17]
  ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   └── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── PhysicalHashJoin::Sink	[vim src/execution/operator/join/physical_hash_join.cpp +128]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   └── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   └── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  ├── JoinHashTable::Finalize	[vim src/execution/join_hashtable.cpp +262]
  │   ├── UncompressedFunctions::FinalizeCompress	[vim src/storage/compression/fixed_size_uncompressed.cpp +103]
  │   ├── RLEFinalizeCompress	[vim src/storage/compression/rle.cpp +239]
  │   ├── FormatSigned	[vim src/include/duckdb/common/types/cast_helpers.hpp +61]
  │   ├── Format	[vim src/include/duckdb/common/types/cast_helpers.hpp +131]
  │   ├── FormatSigned	[vim src/include/duckdb/common/types/cast_helpers.hpp +234]
  │   ├── FormatDecimal	[vim src/include/duckdb/common/types/cast_helpers.hpp +311]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── StateFinalize	[vim src/include/duckdb/function/aggregate_function.hpp +219]
  │   ├── TopNHeap::Combine	[vim src/execution/operator/order/physical_top_n.cpp +242]
  │   ├── TopNHeap::Finalize	[vim src/execution/operator/order/physical_top_n.cpp +258]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── PhysicalTopN::Finalize	[vim src/execution/operator/order/physical_top_n.cpp +445]
  │   ├── PhysicalHashAggregate::Finalize	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +218]
  │   ├── PhysicalHashJoin::Finalize	[vim src/execution/operator/join/physical_hash_join.cpp +165]
  │   ├── PhysicalDelimJoin::Finalize	[vim src/execution/operator/join/physical_delim_join.cpp +87]
  │   ├── RadixPartitionedHashTable::Combine	[vim src/execution/radix_partitioned_hashtable.cpp +154]
  │   ├── RadixPartitionedHashTable::Finalize	[vim src/execution/radix_partitioned_hashtable.cpp +191]
  │   ├── RadixAggregateFinalizeTask	[vim src/execution/radix_partitioned_hashtable.cpp +258]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_function.cpp +6]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_case.cpp +17]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_cast.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_parameter.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_reference.cpp +6]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_conjunction.cpp +18]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_constant.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_comparison.cpp +11]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_operator.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_between.cpp +82]
  │   ├── ReservoirSamplePercentage::GetChunk	[vim src/execution/reservoir_sample.cpp +131]
  │   ├── PartitionableHashTable::ListAddChunk	[vim src/execution/partitionable_hashtable.cpp +66]
  │   ├── PartitionableHashTable::Finalize	[vim src/execution/partitionable_hashtable.cpp +160]
  │   ├── StringHeap::AddBlob	[vim src/common/types/string_heap.cpp +34]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +86]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +104]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +121]
  │   ├── IntegerCastLoop	[vim src/common/operator/cast_operators.cpp +825]
  │   ├── CastFromBlob::Operation	[vim src/common/operator/cast_operators.cpp +1275]
  │   ├── TryCastToBlob::Operation	[vim src/common/operator/cast_operators.cpp +1288]
  │   ├── CastFromUUID::Operation	[vim src/common/operator/cast_operators.cpp +1305]
  │   ├── HandleExponent	[vim src/common/operator/cast_operators.cpp +1536]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── PipelineFinishEvent::FinishEvent	[vim src/parallel/pipeline_finish_event.cpp +13]
  │   ├── Pipeline::Finalize	[vim src/parallel/pipeline.cpp +145]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_sxy.cpp +38]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +31]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_intercept.cpp +44]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_r2.cpp +43]
  │   ├── ASCIICaseConvert	[vim src/function/scalar/string/caseconvert.cpp +42]
  │   ├── UnicodeCaseConvert	[vim src/function/scalar/string/caseconvert.cpp +108]
  │   ├── Operation	[vim src/function/scalar/string/trim.cpp +15]
  │   ├── BinaryTrimFunction	[vim src/function/scalar/string/trim.cpp +78]
  │   ├── SubstringEmptyString	[vim src/function/scalar/string/substring.cpp +13]
  │   ├── SubstringSlice	[vim src/function/scalar/string/substring.cpp +19]
  │   ├── Operation	[vim src/function/scalar/string/md5.cpp +11]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── ConcatOperator	[vim src/function/scalar/string/concat.cpp +99]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── Operation	[vim src/function/scalar/string/reverse.cpp +34]
  │   ├── StrfTimeFunctionDate	[vim src/function/scalar/date/strftime.cpp +600]
  │   ├── StrfTimeFunctionTimestamp	[vim src/function/scalar/date/strftime.cpp +619]
  │   ├── Operation	[vim src/function/scalar/blob/base64.cpp +8]
  │   ├── Operation	[vim src/function/scalar/blob/base64.cpp +18]
  │   ├── WriteCSVBind	[vim src/function/table/copy_csv.cpp +163]
  │   ├── ReadCSVBind	[vim src/function/table/copy_csv.cpp +191]
  │   ├── QueryProfiler::Finalize	[vim src/main/query_profiler.cpp +66]
  │   ├── QueryProfiler::EndQuery	[vim src/main/query_profiler.cpp +75]
  │   ├── ParquetWriteFinalize	[vim extension/parquet/parquet-extension.cpp +463]
  │   └── DecodePythonUnicode	[vim tools/pythonpkg/src/vector_conversion.cpp +92]
  ├── JoinHashTable::Probe	[vim src/execution/join_hashtable.cpp +304]
  │   └── PhysicalHashJoin::Execute	[vim src/execution/operator/join/physical_hash_join.cpp +217]
  ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +413]
  │   ├── ScanStructure::ScanInnerJoin	[vim src/execution/join_hashtable.cpp +390]
  │   ├── ScanStructure::AdvancePointers	[vim src/execution/join_hashtable.cpp +427]
  │   ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::ScanKeyMatches	[vim src/execution/join_hashtable.cpp +478]
  │   └── ScanStructure::NextSingleJoin	[vim src/execution/join_hashtable.cpp +686]
  ├── ScanStructure::NextInnerJoin	[vim src/execution/join_hashtable.cpp +442]
  │   ├── ScanStructure::Next	[vim src/execution/join_hashtable.cpp +348]
  │   └── ScanStructure::NextLeftJoin	[vim src/execution/join_hashtable.cpp +654]
  ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── PhysicalNestedLoopJoin::ResolveSimpleJoin	[vim src/execution/operator/join/physical_nested_loop_join.cpp +268]
  │   ├── PhysicalPiecewiseMergeJoin::ResolveSimpleJoin	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +194]
  │   └── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   └── ScanStructure::Next	[vim src/execution/join_hashtable.cpp +348]
  ├── JoinHashTable::ScanFullOuter	[vim src/execution/join_hashtable.cpp +732]
  │   └── PhysicalHashJoin::GetData	[vim src/execution/operator/join/physical_hash_join.cpp +278]
  ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   └── GroupedAggregateHashTable::FindOrCreateGroups	[vim src/execution/aggregate_hashtable.cpp +506]
  ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── StructColumnData::Append	[vim src/storage/table/struct_column_data.cpp +107]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── Combine	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +304]
  │   ├── StateCombine	[vim src/include/duckdb/function/aggregate_function.hpp +214]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/regression/regr_slope.hpp +36]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/sum_helpers.hpp +142]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/algebraic/corr.hpp +44]
  │   ├── PhysicalTopN::Combine	[vim src/execution/operator/order/physical_top_n.cpp +433]
  │   ├── PhysicalHashAggregate::Combine	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +187]
  │   ├── PhysicalPerfectHashAggregate::Combine	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +162]
  │   ├── PhysicalDelimJoin::Combine	[vim src/execution/operator/join/physical_delim_join.cpp +80]
  │   ├── RadixPartitionedHashTable::Finalize	[vim src/execution/radix_partitioned_hashtable.cpp +191]
  │   ├── RadixAggregateFinalizeTask	[vim src/execution/radix_partitioned_hashtable.cpp +258]
  │   ├── Combine	[vim src/function/aggregate/distributive/sum.cpp +17]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── Combine	[vim src/function/aggregate/algebraic/avg.cpp +60]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_sxy.cpp +32]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +25]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_intercept.cpp +36]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_r2.cpp +36]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── PropagateNumericStats	[vim src/function/scalar/operators/arithmetic.cpp +115]
  │   └── main	[vim examples/standalone-window/main.cpp +14]
  ├── PartitionInfo	[vim src/execution/aggregate_hashtable.cpp +592]
  ├── GroupedAggregateHashTable::Scan	[vim src/execution/aggregate_hashtable.cpp +639]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +115]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +159]
  │   ├── DataTable::Scan	[vim src/storage/data_table.cpp +356]
  │   ├── DataTable::ScanBaseTable	[vim src/storage/data_table.cpp +367]
  │   ├── DataTable::VerifyAppendConstraints	[vim src/storage/data_table.cpp +440]
  │   ├── DataTable::RevertAppend	[vim src/storage/data_table.cpp +657]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +728]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::VerifyUpdateConstraints	[vim src/storage/data_table.cpp +858]
  │   ├── CheckpointManager::CreateCheckpoint	[vim src/storage/checkpoint_manager.cpp +33]
  │   ├── CheckpointManager::WriteSchema	[vim src/storage/checkpoint_manager.cpp +123]
  │   ├── LocalTableStorage::Clear	[vim src/storage/local_storage.cpp +61]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── LocalStorage::ScanTableStorage	[vim src/storage/local_storage.cpp +345]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── StandardColumnData::Scan	[vim src/storage/table/standard_column_data.cpp +55]
  │   ├── StandardColumnData::Scan	[vim src/storage/table/standard_column_data.cpp +55]
  │   ├── ColumnData::ScanVector	[vim src/storage/table/column_data.cpp +58]
  │   ├── ColumnData::Select	[vim src/storage/table/column_data.cpp +155]
  │   ├── ColumnData::FilterScan	[vim src/storage/table/column_data.cpp +162]
  │   ├── ColumnData::CheckpointScan	[vim src/storage/table/column_data.cpp +349]
  │   ├── ColumnSegment::Scan	[vim src/storage/table/column_segment.cpp +77]
  │   ├── StructColumnData::Scan	[vim src/storage/table/struct_column_data.cpp +68]
  │   ├── GetEntries	[vim src/include/duckdb/catalog/catalog_set.hpp +76]
  │   ├── PhysicalOrder::GetData	[vim src/execution/operator/order/physical_order.cpp +201]
  │   ├── TopNSortState::Scan	[vim src/execution/operator/order/physical_top_n.cpp +161]
  │   ├── TopNHeap::Combine	[vim src/execution/operator/order/physical_top_n.cpp +242]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── TopNHeap::Scan	[vim src/execution/operator/order/physical_top_n.cpp +385]
  │   ├── PhysicalTopN::GetData	[vim src/execution/operator/order/physical_top_n.cpp +466]
  │   ├── ScanSortedPartition	[vim src/execution/operator/aggregate/physical_window.cpp +532]
  │   ├── PhysicalWindow::GetData	[vim src/execution/operator/aggregate/physical_window.cpp +1411]
  │   ├── PhysicalPerfectHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +187]
  │   ├── PhysicalExport::GetData	[vim src/execution/operator/persistent/physical_export.cpp +92]
  │   ├── CanUseIndexJoin	[vim src/execution/physical_plan/plan_comparison_join.cpp +109]
  │   ├── RadixPartitionedHashTable::GetData	[vim src/execution/radix_partitioned_hashtable.cpp +329]
  │   ├── Catalog::ScanSchemas	[vim src/catalog/catalog.cpp +190]
  │   ├── Catalog::CreateMissingEntryException	[vim src/catalog/catalog.cpp +214]
  │   ├── SchemaCatalogEntry::Scan	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +192]
  │   ├── SchemaCatalogEntry::Scan	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +198]
  │   ├── Finalize	[vim src/function/aggregate/holistic/mode.cpp +144]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── TableScanFunc	[vim src/function/table/table_scan.cpp +65]
  │   ├── IndexScanFunction	[vim src/function/table/table_scan.cpp +172]
  │   ├── TableScanPushdownComplexFilter	[vim src/function/table/table_scan.cpp +207]
  │   ├── PragmaCollateInit	[vim src/function/table/system/pragma_collations.cpp +29]
  │   ├── DuckDBDependenciesInit	[vim src/function/table/system/duckdb_dependencies.cpp +53]
  │   ├── DuckDBViewsInit	[vim src/function/table/system/duckdb_views.cpp +51]
  │   ├── DuckDBSequencesInit	[vim src/function/table/system/duckdb_sequences.cpp +63]
  │   ├── DuckDBConstraintsInit	[vim src/function/table/system/duckdb_constraints.cpp +67]
  │   ├── DuckDBTablesInit	[vim src/function/table/system/duckdb_tables.cpp +66]
  │   ├── DuckDBIndexesInit	[vim src/function/table/system/duckdb_indexes.cpp +59]
  │   ├── DuckDBColumnsInit	[vim src/function/table/system/duckdb_columns.cpp +76]
  │   ├── PragmaFunctionsInit	[vim src/function/table/system/pragma_functions.cpp +47]
  │   ├── Binder::Bind	[vim src/planner/binder/statement/bind_export.cpp +42]
  │   ├── BindUpdateConstraints	[vim src/planner/binder/statement/bind_update.cpp +75]
  │   ├── main	[vim extension/parquet/parquetcli.cpp +28]
  │   └── ParquetScanImplementation	[vim extension/parquet/parquet-extension.cpp +276]
  ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── PhysicalPerfectHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +117]
  │   ├── RadixPartitionedHashTable::Sink	[vim src/execution/radix_partitioned_hashtable.cpp +103]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +254]
  │   └── PartitionableHashTable::ListAddChunk	[vim src/execution/partitionable_hashtable.cpp +66]
  ├── TemplatedCompareValue	[vim src/common/types/chunk_collection.cpp +166]
  │   └── CompareValue	[vim src/common/types/chunk_collection.cpp +180]
  ├── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  │   └── ValidityData::ValidityData	[vim src/common/types/validity_mask.cpp +5]
  ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── StructColumnData::Append	[vim src/storage/table/struct_column_data.cpp +107]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── SelectFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +366]
  │   ├── Combine	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +304]
  │   ├── StateCombine	[vim src/include/duckdb/function/aggregate_function.hpp +214]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/regression/regr_slope.hpp +36]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/sum_helpers.hpp +142]
  │   ├── Combine	[vim src/include/duckdb/function/aggregate/algebraic/corr.hpp +44]
  │   ├── PhysicalTopN::Combine	[vim src/execution/operator/order/physical_top_n.cpp +433]
  │   ├── PhysicalHashAggregate::Combine	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +187]
  │   ├── PhysicalPerfectHashAggregate::Combine	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +162]
  │   ├── PhysicalDelimJoin::Combine	[vim src/execution/operator/join/physical_delim_join.cpp +80]
  │   ├── RadixPartitionedHashTable::Finalize	[vim src/execution/radix_partitioned_hashtable.cpp +191]
  │   ├── RadixAggregateFinalizeTask	[vim src/execution/radix_partitioned_hashtable.cpp +258]
  │   ├── Combine	[vim src/function/aggregate/distributive/sum.cpp +17]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── Combine	[vim src/function/aggregate/algebraic/avg.cpp +60]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_sxy.cpp +32]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +25]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_intercept.cpp +36]
  │   ├── Combine	[vim src/function/aggregate/regression/regr_r2.cpp +36]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── PropagateNumericStats	[vim src/function/scalar/operators/arithmetic.cpp +115]
  │   └── main	[vim examples/standalone-window/main.cpp +14]
  ├── Vector::Reference	[vim src/common/types/vector.cpp +64]
  │   ├── CreateMockChunk	[vim src/storage/data_table.cpp +824]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── ColumnDataCheckpointer::ScanSegments	[vim src/storage/table/column_data_checkpointer.cpp +38]
  │   ├── NopFunction	[vim src/include/duckdb/function/scalar_function.hpp +129]
  │   ├── PhysicalChunkScan::GetData	[vim src/execution/operator/scan/physical_chunk_scan.cpp +18]
  │   ├── UnnestVector	[vim src/execution/operator/projection/physical_unnest.cpp +83]
  │   ├── PhysicalUnnest::Execute	[vim src/execution/operator/projection/physical_unnest.cpp +152]
  │   ├── PhysicalRecursiveCTE::GetData	[vim src/execution/operator/set/physical_recursive_cte.cpp +77]
  │   ├── TopNHeap::ExtractBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +295]
  │   ├── TopNHeap::CheckBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +315]
  │   ├── PhysicalHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +152]
  │   ├── Scan	[vim src/execution/operator/aggregate/physical_window.cpp +1285]
  │   ├── PhysicalPerfectHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +117]
  │   ├── PhysicalCrossProduct::Execute	[vim src/execution/operator/join/physical_cross_product.cpp +53]
  │   ├── PhysicalIndexJoin::Output	[vim src/execution/operator/join/physical_index_join.cpp +90]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::ProbePerfectHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +149]
  │   ├── PhysicalBlockwiseNLJoin::Execute	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +94]
  │   ├── PhysicalBlockwiseNLJoin::Execute	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +94]
  │   ├── PhysicalHashJoin::Sink	[vim src/execution/operator/join/physical_hash_join.cpp +128]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PhysicalInsert::Sink	[vim src/execution/operator/persistent/physical_insert.cpp +41]
  │   ├── PhysicalLimit::Sink	[vim src/execution/operator/helper/physical_limit.cpp +49]
  │   ├── PhysicalLimit::GetData	[vim src/execution/operator/helper/physical_limit.cpp +127]
  │   ├── PhysicalStreamingSample::SystemSample	[vim src/execution/operator/helper/physical_streaming_sample.cpp +24]
  │   ├── PhysicalFilter::Execute	[vim src/execution/operator/filter/physical_filter.cpp +41]
  │   ├── RadixHTLocalState	[vim src/execution/radix_partitioned_hashtable.cpp +74]
  │   ├── RadixPartitionedHashTable::Sink	[vim src/execution/radix_partitioned_hashtable.cpp +103]
  │   ├── RadixPartitionedHashTable::GetData	[vim src/execution/radix_partitioned_hashtable.cpp +329]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_parameter.cpp +14]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_reference.cpp +13]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_conjunction.cpp +28]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_constant.cpp +14]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_operator.cpp +17]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── ScanStructure::NextSingleJoin	[vim src/execution/join_hashtable.cpp +686]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +261]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── Vector::Vector	[vim src/common/types/vector.cpp +43]
  │   ├── Vector::Vector	[vim src/common/types/vector.cpp +55]
  │   ├── Vector::ReferenceAndSetType	[vim src/common/types/vector.cpp +98]
  │   ├── Vector::Slice	[vim src/common/types/vector.cpp +115]
  │   ├── Vector::Slice	[vim src/common/types/vector.cpp +146]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── DataChunk::Reference	[vim src/common/types/data_chunk.cpp +78]
  │   ├── DataChunk::Slice	[vim src/common/types/data_chunk.cpp +225]
  │   ├── StructCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +639]
  │   ├── PipelineExecutor::Execute	[vim src/parallel/pipeline_executor.cpp +227]
  │   ├── ProjectInputs	[vim src/function/aggregate/sorted_aggregate_function.cpp +96]
  │   ├── StructExtractFunction	[vim src/function/scalar/struct/struct_extract.cpp +27]
  │   ├── StructPackFunction	[vim src/function/scalar/struct/struct_pack.cpp +11]
  │   ├── CurrentTimeFunction	[vim src/function/scalar/date/current.cpp +29]
  │   ├── CurrentDateFunction	[vim src/function/scalar/date/current.cpp +36]
  │   ├── CurrentTimestampFunction	[vim src/function/scalar/date/current.cpp +43]
  │   ├── CurrentQueryFunction	[vim src/function/scalar/system/system_functions.cpp +32]
  │   ├── CurrentSchemaFunction	[vim src/function/scalar/system/system_functions.cpp +40]
  │   ├── CurrentSchemasFunction	[vim src/function/scalar/system/system_functions.cpp +46]
  │   ├── TransactionIdCurrent	[vim src/function/scalar/system/system_functions.cpp +56]
  │   ├── VersionFunction	[vim src/function/scalar/system/system_functions.cpp +66]
  │   ├── AliasFunction	[vim src/function/scalar/generic/alias.cpp +6]
  │   ├── TypeOfFunction	[vim src/function/scalar/generic/typeof.cpp +5]
  │   ├── StatsFunction	[vim src/function/scalar/generic/stats.cpp +18]
  │   ├── CurrentSettingFunction	[vim src/function/scalar/generic/current_setting.cpp +22]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── PiFunction	[vim src/function/scalar/math/numeric.cpp +692]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── SummaryFunction	[vim src/function/table/summary.cpp +27]
  │   ├── RepeatFunction	[vim src/function/table/repeat.cpp +35]
  │   ├── PragmaDetailedProfilingOutputFunction	[vim src/function/table/pragma_detailed_profiling_output.cpp +110]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── PragmaLastProfilingOutputFunction	[vim src/function/table/pragma_last_profiling_output.cpp +64]
  │   ├── ParquetReader::ScanInternal	[vim extension/parquet/parquet_reader.cpp +571]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   └── CastSQLite::InputVectorsToVarchar	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +27]
  ├── Vector::Initialize	[vim src/common/types/vector.cpp +191]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +159]
  │   ├── DataTable::ScanTableSegment	[vim src/storage/data_table.cpp +556]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::AddIndex	[vim src/storage/data_table.cpp +1021]
  │   ├── StorageManager::Initialize	[vim src/storage/storage_manager.cpp +47]
  │   ├── StorageManager::LoadDatabase	[vim src/storage/storage_manager.cpp +85]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── LocalStorage::ScanTableStorage	[vim src/storage/local_storage.cpp +345]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── FilterSelectionSwitch	[vim src/storage/table/column_segment.cpp +198]
  │   ├── TemplatedNullSelection	[vim src/storage/table/column_segment.cpp +260]
  │   ├── UpdateValidityStatistics	[vim src/storage/table/update_segment.cpp +889]
  │   ├── TemplatedUpdateNumericStatistics	[vim src/storage/table/update_segment.cpp +907]
  │   ├── UpdateStringStatistics	[vim src/storage/table/update_segment.cpp +933]
  │   ├── SortSelectionVector	[vim src/storage/table/update_segment.cpp +1003]
  │   ├── SingleFileBlockManager::SingleFileBlockManager	[vim src/storage/single_file_block_manager.cpp +70]
  │   ├── ValidityScanPartial	[vim src/storage/compression/validity_uncompressed.cpp +218]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── GetSelVector	[vim src/include/duckdb/common/types/vector_buffer.hpp +89]
  │   ├── SelectionVector	[vim src/include/duckdb/common/types/selection_vector.hpp +26]
  │   ├── Initialize	[vim src/include/duckdb/common/types/selection_vector.hpp +48]
  │   ├── OptionalSelection	[vim src/include/duckdb/common/types/selection_vector.hpp +101]
  │   ├── Advance	[vim src/include/duckdb/common/types/selection_vector.hpp +120]
  │   ├── TemplatedValidityMask	[vim src/include/duckdb/common/types/validity_mask.hpp +68]
  │   ├── SetInvalid	[vim src/include/duckdb/common/types/validity_mask.hpp +190]
  │   ├── EnsureWritable	[vim src/include/duckdb/common/types/validity_mask.hpp +208]
  │   ├── Initialize	[vim src/include/duckdb/common/types/validity_mask.hpp +238]
  │   ├── GetValue	[vim src/include/duckdb/common/types/vector.hpp +269]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +82]
  │   ├── StateInitialize	[vim src/include/duckdb/function/aggregate_function.hpp +159]
  │   ├── Initialize	[vim src/include/duckdb/function/aggregate/regression/regr_slope.hpp +22]
  │   ├── Initialize	[vim src/include/duckdb/function/aggregate/sum_helpers.hpp +136]
  │   ├── Initialize	[vim src/include/duckdb/function/aggregate/algebraic/corr.hpp +28]
  │   ├── InClauseRewriter::VisitReplace	[vim src/optimizer/in_clause_rewriter.cpp +26]
  │   ├── ExpressionExecutor::AddExpression	[vim src/execution/expression_executor.cpp +28]
  │   ├── WindowSegmentTree::WindowSegmentTree	[vim src/execution/window_segment_tree.cpp +11]
  │   ├── ART::ART	[vim src/execution/index/art/art.cpp +13]
  │   ├── ART::Append	[vim src/execution/index/art/art.cpp +257]
  │   ├── ART::VerifyAppend	[vim src/execution/index/art/art.cpp +268]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── ExpressionScanState	[vim src/execution/operator/scan/physical_expression_scan.cpp +9]
  │   ├── PhysicalUnnest::Execute	[vim src/execution/operator/projection/physical_unnest.cpp +152]
  │   ├── PhysicalOrder::GetGlobalSinkState	[vim src/execution/operator/order/physical_order.cpp +45]
  │   ├── PhysicalOrder::GetLocalSinkState	[vim src/execution/operator/order/physical_order.cpp +60]
  │   ├── PhysicalOrder::Sink	[vim src/execution/operator/order/physical_order.cpp +72]
  │   ├── TopNSortState::Initialize	[vim src/execution/operator/order/physical_top_n.cpp +99]
  │   ├── TopNHeap::TopNHeap	[vim src/execution/operator/order/physical_top_n.cpp +219]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── TopNHeap::CheckBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +315]
  │   ├── MaterializeExpressions	[vim src/execution/operator/aggregate/physical_window.cpp +395]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── ScanSortedPartition	[vim src/execution/operator/aggregate/physical_window.cpp +532]
  │   ├── HashChunk	[vim src/execution/operator/aggregate/physical_window.cpp +561]
  │   ├── MaterializeOverForWindow	[vim src/execution/operator/aggregate/physical_window.cpp +586]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── SimpleAggregateLocalState	[vim src/execution/operator/aggregate/physical_simple_aggregate.cpp +71]
  │   ├── PhysicalSimpleAggregate::Sink	[vim src/execution/operator/aggregate/physical_simple_aggregate.cpp +108]
  │   ├── IndexJoinOperatorState	[vim src/execution/operator/join/physical_index_join.cpp +17]
  │   ├── NestedLoopJoinLocalState	[vim src/execution/operator/join/physical_nested_loop_join.cpp +113]
  │   ├── PhysicalNestedLoopJoinState	[vim src/execution/operator/join/physical_nested_loop_join.cpp +201]
  │   ├── PerfectHashJoinExecutor::GetOperatorState	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +137]
  │   ├── MergeJoinLocalState	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +33]
  │   ├── PiecewiseMergeJoinState	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +145]
  │   ├── OrderVector	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +415]
  │   ├── PhysicalHashJoin::GetGlobalSinkState	[vim src/execution/operator/join/physical_hash_join.cpp +66]
  │   ├── PhysicalHashJoin::GetLocalSinkState	[vim src/execution/operator/join/physical_hash_join.cpp +116]
  │   ├── PhysicalHashJoin::GetOperatorState	[vim src/execution/operator/join/physical_hash_join.cpp +203]
  │   ├── UpdateLocalState	[vim src/execution/operator/persistent/physical_update.cpp +27]
  │   ├── InsertLocalState	[vim src/execution/operator/persistent/physical_insert.cpp +26]
  │   ├── GetDelimiter	[vim src/execution/operator/helper/physical_limit.cpp +26]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_show_select.cpp +8]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_expression_get.cpp +8]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_explain.cpp +10]
  │   ├── RadixHTGlobalSourceState	[vim src/execution/radix_partitioned_hashtable.cpp +308]
  │   ├── ExpressionState::Finalize	[vim src/execution/expression_executor_state.cpp +12]
  │   ├── PerfectAggregateHashTable::PerfectAggregateHashTable	[vim src/execution/perfect_aggregate_hashtable.cpp +8]
  │   ├── BufferedCSVReader::BufferedCSVReader	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +126]
  │   ├── BufferedCSVReader::InitParseChunk	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +290]
  │   ├── BufferedCSVReader::DetectCandidateTypes	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +596]
  │   ├── JoinHashTable::JoinHashTable	[vim src/execution/join_hashtable.cpp +17]
  │   ├── GroupedAggregateHashTable::GroupedAggregateHashTable	[vim src/execution/aggregate_hashtable.cpp +35]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +261]
  │   ├── GroupedAggregateHashTable::FlushMove	[vim src/execution/aggregate_hashtable.cpp +531]
  │   ├── PartitionableHashTable::PartitionableHashTable	[vim src/execution/partitionable_hashtable.cpp +47]
  │   ├── RowLayout::Initialize	[vim src/common/types/row_layout.cpp +95]
  │   ├── RowLayout::Initialize	[vim src/common/types/row_layout.cpp +99]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +56]
  │   ├── ValidityMask::Combine	[vim src/common/types/validity_mask.cpp +11]
  │   ├── ValidityMask::Resize	[vim src/common/types/validity_mask.cpp +51]
  │   ├── ValidityMask::Slice	[vim src/common/types/validity_mask.cpp +69]
  │   ├── Vector::Vector	[vim src/common/types/vector.cpp +22]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── ConstantVector::ZeroSelectionVector	[vim src/common/types/vector.cpp +1169]
  │   ├── DataChunk::Deserialize	[vim src/common/types/data_chunk.cpp +200]
  │   ├── SortLayout::SortLayout	[vim src/common/sort/sort_state.cpp +39]
  │   ├── GZipFile	[vim src/common/gzip_file_system.cpp +108]
  │   ├── GZipFile::Initialize	[vim src/common/gzip_file_system.cpp +141]
  │   ├── GZipFileSystem::Reset	[vim src/common/gzip_file_system.cpp +265]
  │   ├── DistinctSelectNested	[vim src/common/vector_operations/is_distinct_from.cpp +596]
  │   ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   ├── RowOperations::UpdateFilteredStates	[vim src/common/row_operations/row_aggregate.cpp +55]
  │   ├── ViewCatalogEntry::ViewCatalogEntry	[vim src/catalog/catalog_entry/view_catalog_entry.cpp +23]
  │   ├── Appender::InitializeChunk	[vim src/main/appender.cpp +43]
  │   ├── ClientContext::ExecutePreparedStatement	[vim src/main/client_context.cpp +226]
  │   ├── DatabaseInstance::Initialize	[vim src/main/database.cpp +98]
  │   ├── DuckDB::DuckDB	[vim src/main/database.cpp +136]
  │   ├── Executor::Initialize	[vim src/parallel/executor.cpp +261]
  │   ├── Initialize	[vim src/function/aggregate/distributive/sum.cpp +13]
  │   ├── PipelineExecutor::PipelineExecutor	[vim src/parallel/pipeline_executor.cpp +6]
  │   ├── PipelineExecutor::CacheChunk	[vim src/parallel/pipeline_executor.cpp +152]
  │   ├── PipelineExecutor::InitializeChunk	[vim src/parallel/pipeline_executor.cpp +310]
  │   ├── Initialize	[vim src/function/aggregate/holistic/mode.cpp +115]
  │   ├── Initialize	[vim src/function/aggregate/algebraic/avg.cpp +56]
  │   ├── Initialize	[vim src/function/aggregate/regression/regr_sxy.cpp +17]
  │   ├── Initialize	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +19]
  │   ├── Initialize	[vim src/function/aggregate/regression/regr_intercept.cpp +18]
  │   ├── Initialize	[vim src/function/aggregate/regression/regr_r2.cpp +20]
  │   ├── ScatterUpdate	[vim src/function/aggregate/sorted_aggregate_function.cpp +125]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── PragmaDetailedProfilingOutputFunction	[vim src/function/table/pragma_detailed_profiling_output.cpp +110]
  │   ├── SetSelectionVector	[vim src/function/table/arrow.cpp +869]
  │   ├── WriteCSVInitializeLocal	[vim src/function/table/copy_csv.cpp +423]
  │   ├── PragmaLastProfilingOutputFunction	[vim src/function/table/pragma_last_profiling_output.cpp +64]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── main	[vim examples/standalone-window/main.cpp +14]
  │   ├── main	[vim examples/csvcli/csvcli.cpp +22]
  │   ├── DSDGenAppender	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +27]
  │   ├── UnsafeAppender	[vim extension/tpch/dbgen/dbgen.cpp +102]
  │   ├── main	[vim extension/parquet/parquetcli.cpp +28]
  │   ├── ParquetReader::InitializeScan	[vim extension/parquet/parquet_reader.cpp +384]
  │   ├── ParquetMetaDataOperatorData::LoadFileMetaData	[vim extension/parquet/parquet_metadata.cpp +160]
  │   ├── ParquetMetaDataOperatorData::LoadSchemaData	[vim extension/parquet/parquet_metadata.cpp +348]
  │   ├── ArrayWrapper::Initialize	[vim tools/pythonpkg/src/array_wrapper.cpp +505]
  │   ├── NumpyResultConversion::Resize	[vim tools/pythonpkg/src/array_wrapper.cpp +650]
  │   ├── FetchArrowChunk	[vim tools/pythonpkg/src/pyresult.cpp +281]
  │   ├── PYBIND11_MODULE	[vim tools/pythonpkg/duckdb_python.cpp +68]
  │   ├── R_init_duckdb	[vim tools/rpkg/src/rapi.cpp +24]
  │   └── CastSQLite::InputVectorsToVarchar	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +27]
  ├── FindChildren	[vim src/common/types/vector.cpp +223]
  │   └── FindChildren	[vim src/common/types/vector.cpp +223]
  ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── DataTable::UpdateColumn	[vim src/storage/data_table.cpp +963]
  │   ├── LocalStorage::AddColumn	[vim src/storage/local_storage.cpp +423]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ColumnData::ScanVector	[vim src/storage/table/column_data.cpp +96]
  │   ├── ColumnData::ScanCommittedRange	[vim src/storage/table/column_data.cpp +136]
  │   ├── ColumnData::Select	[vim src/storage/table/column_data.cpp +155]
  │   ├── ColumnData::Update	[vim src/storage/table/column_data.cpp +300]
  │   ├── ColumnData::CheckpointScan	[vim src/storage/table/column_data.cpp +349]
  │   ├── StructColumnData::Append	[vim src/storage/table/struct_column_data.cpp +107]
  │   ├── UpdateSegment::Update	[vim src/storage/table/update_segment.cpp +1048]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── WindowSegmentTree::WindowSegmentTree	[vim src/execution/window_segment_tree.cpp +11]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PhysicalInsert::Sink	[vim src/execution/operator/persistent/physical_insert.cpp +41]
  │   ├── ReservoirSample::FillReservoir	[vim src/execution/reservoir_sample.cpp +51]
  │   ├── ReservoirSamplePercentage::AddToReservoir	[vim src/execution/reservoir_sample.cpp +94]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +261]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +56]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── DataChunk::Normalify	[vim src/common/types/data_chunk.cpp +164]
  │   ├── DataChunk::ToArrowArray	[vim src/common/types/data_chunk.cpp +617]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── StructCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +639]
  │   ├── RowOperations::UpdateFilteredStates	[vim src/common/row_operations/row_aggregate.cpp +55]
  │   ├── QueryResult::Fetch	[vim src/main/query_result.cpp +22]
  │   ├── ListUpdateFunction	[vim src/function/aggregate/nested/list.cpp +29]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   └── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  ├── Vector::Normalify	[vim src/common/types/vector.cpp +754]
  │   ├── DataTable::Delete	[vim src/storage/data_table.cpp +778]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── DataTable::UpdateColumn	[vim src/storage/data_table.cpp +963]
  │   ├── LocalStorage::AddColumn	[vim src/storage/local_storage.cpp +423]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ColumnData::ScanVector	[vim src/storage/table/column_data.cpp +96]
  │   ├── ColumnData::ScanCommittedRange	[vim src/storage/table/column_data.cpp +136]
  │   ├── ColumnData::Select	[vim src/storage/table/column_data.cpp +155]
  │   ├── ColumnData::Update	[vim src/storage/table/column_data.cpp +300]
  │   ├── ColumnData::CheckpointScan	[vim src/storage/table/column_data.cpp +349]
  │   ├── StructColumnData::Append	[vim src/storage/table/struct_column_data.cpp +107]
  │   ├── UpdateSegment::Update	[vim src/storage/table/update_segment.cpp +1048]
  │   ├── ValidityScan	[vim src/storage/compression/validity_uncompressed.cpp +335]
  │   ├── WindowSegmentTree::WindowSegmentTree	[vim src/execution/window_segment_tree.cpp +11]
  │   ├── ART::Insert	[vim src/execution/index/art/art.cpp +213]
  │   ├── ART::Delete	[vim src/execution/index/art/art.cpp +383]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PhysicalInsert::Sink	[vim src/execution/operator/persistent/physical_insert.cpp +41]
  │   ├── ReservoirSample::FillReservoir	[vim src/execution/reservoir_sample.cpp +51]
  │   ├── ReservoirSamplePercentage::AddToReservoir	[vim src/execution/reservoir_sample.cpp +94]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +69]
  │   ├── JoinHashTable::InsertHashes	[vim src/execution/join_hashtable.cpp +240]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +261]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── PartitionableHashTable::AddChunk	[vim src/execution/partitionable_hashtable.cpp +79]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +56]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── DataChunk::Normalify	[vim src/common/types/data_chunk.cpp +164]
  │   ├── DataChunk::ToArrowArray	[vim src/common/types/data_chunk.cpp +617]
  │   ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   ├── StructCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +639]
  │   ├── RowOperations::UpdateFilteredStates	[vim src/common/row_operations/row_aggregate.cpp +55]
  │   ├── QueryResult::Fetch	[vim src/main/query_result.cpp +22]
  │   ├── ListUpdateFunction	[vim src/function/aggregate/nested/list.cpp +29]
  │   ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   └── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  ├── Vector::Orrify	[vim src/common/types/vector.cpp +773]
  │   ├── ListStatistics::Verify	[vim src/storage/statistics/list_statistics.cpp +60]
  │   ├── NumericStatistics::TemplatedVerify	[vim src/storage/statistics/numeric_statistics.cpp +201]
  │   ├── ValidityStatistics::Verify	[vim src/storage/statistics/validity_statistics.cpp +59]
  │   ├── StringStatistics::Verify	[vim src/storage/statistics/string_statistics.cpp +170]
  │   ├── VerifyCheckConstraint	[vim src/storage/data_table.cpp +418]
  │   ├── UncompressedFunctions::Compress	[vim src/storage/compression/fixed_size_uncompressed.cpp +79]
  │   ├── RLEAnalyze	[vim src/storage/compression/rle.cpp +95]
  │   ├── RLECompress	[vim src/storage/compression/rle.cpp +230]
  │   ├── LocalStorage::Delete	[vim src/storage/local_storage.cpp +219]
  │   ├── TemplatedUpdateLoop	[vim src/storage/local_storage.cpp +278]
  │   ├── ColumnData::Append	[vim src/storage/table/column_data.cpp +206]
  │   ├── UncompressedStringStorage::StringAnalyze	[vim src/storage/compression/string_uncompressed.cpp +106]
  │   ├── Execute	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +51]
  │   ├── Select	[vim src/include/duckdb/common/vector_operations/ternary_executor.hpp +146]
  │   ├── ExecuteGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +204]
  │   ├── SelectGeneric	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +455]
  │   ├── ExecuteStandard	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +131]
  │   ├── NullaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +204]
  │   ├── UnaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +224]
  │   ├── UnaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +251]
  │   ├── BinaryScatter	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +279]
  │   ├── BinaryUpdate	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +292]
  │   ├── ExpressionExecutor::DefaultSelect	[vim src/execution/expression_executor.cpp +246]
  │   ├── TemplatedGenerateKeys	[vim src/execution/index/art/art.cpp +79]
  │   ├── ConcatenateKeys	[vim src/execution/index/art/art.cpp +95]
  │   ├── UnnestVector	[vim src/execution/operator/projection/physical_unnest.cpp +83]
  │   ├── PhysicalUnnest::Execute	[vim src/execution/operator/projection/physical_unnest.cpp +152]
  │   ├── HasNullValues	[vim src/execution/operator/join/physical_nested_loop_join.cpp +19]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::TemplatedFillSelectionVectorBuild	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +95]
  │   ├── PerfectHashJoinExecutor::TemplatedFillSelectionVectorProbe	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +215]
  │   ├── OrderVector	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +415]
  │   ├── TemplatedMarkJoin	[vim src/execution/nested_loop_join/nested_loop_join_mark.cpp +8]
  │   ├── Operation	[vim src/execution/nested_loop_join/nested_loop_join_inner.cpp +19]
  │   ├── Operation	[vim src/execution/nested_loop_join/nested_loop_join_inner.cpp +55]
  │   ├── ComputeGroupLocation	[vim src/execution/perfect_aggregate_hashtable.cpp +67]
  │   ├── TemplatedFillLoop	[vim src/execution/expression_executor/execute_case.cpp +64]
  │   ├── ValidityFillLoop	[vim src/execution/expression_executor/execute_case.cpp +93]
  │   ├── NestedSelectOperation	[vim src/execution/expression_executor/execute_comparison.cpp +191]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_operator.cpp +17]
  │   ├── JoinHashTable::ApplyBitmask	[vim src/execution/join_hashtable.cpp +83]
  │   ├── JoinHashTable::PrepareKeys	[vim src/execution/join_hashtable.cpp +126]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── TemplatedSearchInMap	[vim src/common/types/vector.cpp +1380]
  │   ├── SearchString	[vim src/common/types/vector.cpp +1405]
  │   ├── DataChunk::Orrify	[vim src/common/types/data_chunk.cpp +240]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── VectorOperations::HasNotNull	[vim src/common/vector_operations/null_operations.cpp +41]
  │   ├── VectorOperations::HasNull	[vim src/common/vector_operations/null_operations.cpp +64]
  │   ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   ├── VectorOperations::WriteToStorage	[vim src/common/vector_operations/vector_storage.cpp +21]
  │   ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   ├── DistinctSelectGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +142]
  │   ├── DistinctSelectNested	[vim src/common/vector_operations/is_distinct_from.cpp +596]
  │   ├── RowOperations::ComputeEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +125]
  │   ├── HeapScatterStringVector	[vim src/common/row_operations/row_heap_scatter.cpp +166]
  │   ├── HeapScatterStructVector	[vim src/common/row_operations/row_heap_scatter.cpp +210]
  │   ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   ├── RowOperations::HeapScatter	[vim src/common/row_operations/row_heap_scatter.cpp +367]
  │   ├── RowOperations::RadixScatter	[vim src/common/row_operations/row_radix_scatter.cpp +211]
  │   ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   ├── Update	[vim src/function/aggregate/distributive/first.cpp +155]
  │   ├── TemplatedOptimumType	[vim src/function/aggregate/distributive/minmax.cpp +217]
  │   ├── TemplatedOptimumStruct	[vim src/function/aggregate/distributive/minmax.cpp +285]
  │   ├── TemplatedOptimumList	[vim src/function/aggregate/distributive/minmax.cpp +329]
  │   ├── Update	[vim src/function/aggregate/distributive/minmax.cpp +418]
  │   ├── HistogramUpdateFunction	[vim src/function/aggregate/nested/histogram.cpp +34]
  │   ├── HistogramUpdateFunctionString	[vim src/function/aggregate/nested/histogram.cpp +57]
  │   ├── HistogramCombineFunction	[vim src/function/aggregate/nested/histogram.cpp +81]
  │   ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  │   ├── ListUpdateFunction	[vim src/function/aggregate/nested/list.cpp +29]
  │   ├── ListCombineFunction	[vim src/function/aggregate/nested/list.cpp +51]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── ScatterUpdate	[vim src/function/aggregate/sorted_aggregate_function.cpp +125]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── ConcatWSFunction	[vim src/function/scalar/string/concat.cpp +188]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── MapExtractFunction	[vim src/function/scalar/map/map_extract.cpp +22]
  │   ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── RangeInfoStruct	[vim src/function/scalar/list/range.cpp +10]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── ExecuteListExtract	[vim src/function/scalar/list/list_extract.cpp +150]
  │   ├── ArrayWrapper::Append	[vim tools/pythonpkg/src/array_wrapper.cpp +515]
  │   └── duckdb::SQLiteUDFWrapper::CreateSQLiteScalarFunction	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/sqlite3_udf_wrapper.cpp +7]
  ├── Vector::Sequence	[vim src/common/types/vector.cpp +809]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── RangeFunction	[vim src/function/table/range.cpp +75]
  │   └── PandasScanFunction::PandasScanFunc	[vim tools/pythonpkg/src/pandas_scan.cpp +149]
  ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── ListStatistics::Serialize	[vim src/storage/statistics/list_statistics.cpp +38]
  │   ├── ListStatistics::Serialize	[vim src/storage/statistics/list_statistics.cpp +38]
  │   ├── NumericStatistics::Serialize	[vim src/storage/statistics/numeric_statistics.cpp +183]
  │   ├── NumericStatistics::Serialize	[vim src/storage/statistics/numeric_statistics.cpp +183]
  │   ├── ValidityStatistics::Serialize	[vim src/storage/statistics/validity_statistics.cpp +47]
  │   ├── StringStatistics::Serialize	[vim src/storage/statistics/string_statistics.cpp +33]
  │   ├── StructStatistics::Serialize	[vim src/storage/statistics/struct_statistics.cpp +49]
  │   ├── StructStatistics::Serialize	[vim src/storage/statistics/struct_statistics.cpp +49]
  │   ├── DataTable::Checkpoint	[vim src/storage/data_table.cpp +1081]
  │   ├── CheckpointManager::WriteSchema	[vim src/storage/checkpoint_manager.cpp +123]
  │   ├── CheckpointManager::WriteView	[vim src/storage/checkpoint_manager.cpp +233]
  │   ├── CheckpointManager::WriteSequence	[vim src/storage/checkpoint_manager.cpp +247]
  │   ├── CheckpointManager::WriteType	[vim src/storage/checkpoint_manager.cpp +261]
  │   ├── CheckpointManager::WriteMacro	[vim src/storage/checkpoint_manager.cpp +275]
  │   ├── CheckpointManager::WriteTable	[vim src/storage/checkpoint_manager.cpp +289]
  │   ├── WriteAheadLog::WriteCreateTable	[vim src/storage/write_ahead_log.cpp +62]
  │   ├── WriteAheadLog::WriteCreateSequence	[vim src/storage/write_ahead_log.cpp +96]
  │   ├── WriteAheadLog::WriteCreateMacro	[vim src/storage/write_ahead_log.cpp +127]
  │   ├── WriteAheadLog::WriteCreateType	[vim src/storage/write_ahead_log.cpp +147]
  │   ├── WriteAheadLog::WriteCreateView	[vim src/storage/write_ahead_log.cpp +167]
  │   ├── WriteAheadLog::WriteInsert	[vim src/storage/write_ahead_log.cpp +207]
  │   ├── WriteAheadLog::WriteDelete	[vim src/storage/write_ahead_log.cpp +218]
  │   ├── WriteAheadLog::WriteUpdate	[vim src/storage/write_ahead_log.cpp +230]
  │   ├── WriteAheadLog::WriteAlter	[vim src/storage/write_ahead_log.cpp +250]
  │   ├── ColumnCheckpointState::FlushToDisk	[vim src/storage/table/column_checkpoint_state.cpp +115]
  │   ├── RowGroup::CheckpointDeletes	[vim src/storage/table/row_group.cpp +682]
  │   ├── RowGroup::Serialize	[vim src/storage/table/row_group.cpp +726]
  │   ├── SerializeHeaderStructure	[vim src/storage/single_file_block_manager.cpp +59]
  │   ├── WriteList	[vim src/include/duckdb/common/serializer.hpp +49]
  │   ├── WriteOptional	[vim src/include/duckdb/common/serializer.hpp +64]
  │   ├── EmptyTableRef::Serialize	[vim src/parser/tableref/emptytableref.cpp +15]
  │   ├── SubqueryRef::Serialize	[vim src/parser/tableref/subqueryref.cpp +28]
  │   ├── SubqueryRef::Serialize	[vim src/parser/tableref/subqueryref.cpp +28]
  │   ├── ExpressionListRef::Serialize	[vim src/parser/tableref/expressionlistref.cpp +45]
  │   ├── ExpressionListRef::Serialize	[vim src/parser/tableref/expressionlistref.cpp +45]
  │   ├── CrossProductRef::Serialize	[vim src/parser/tableref/crossproductref.cpp +23]
  │   ├── CrossProductRef::Serialize	[vim src/parser/tableref/crossproductref.cpp +23]
  │   ├── TableFunctionRef::Serialize	[vim src/parser/tableref/table_function.cpp +19]
  │   ├── TableFunctionRef::Serialize	[vim src/parser/tableref/table_function.cpp +19]
  │   ├── SampleOptions::Serialize	[vim src/parser/parsed_data/sample_options.cpp +19]
  │   ├── AlterTableInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +22]
  │   ├── RenameColumnInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +59]
  │   ├── RenameTableInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +78]
  │   ├── AddColumnInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +95]
  │   ├── AddColumnInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +95]
  │   ├── RemoveColumnInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +112]
  │   ├── ChangeColumnTypeInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +132]
  │   ├── ChangeColumnTypeInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +132]
  │   ├── SetDefaultInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +154]
  │   ├── AlterViewInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +169]
  │   ├── RenameViewInfo::Serialize	[vim src/parser/parsed_data/alter_table_info.cpp +196]
  │   ├── LimitModifier::Serialize	[vim src/parser/result_modifier.cpp +57]
  │   ├── DistinctModifier::Serialize	[vim src/parser/result_modifier.cpp +89]
  │   ├── OrderByNode::Serialize	[vim src/parser/result_modifier.cpp +143]
  │   ├── OrderModifier::Serialize	[vim src/parser/result_modifier.cpp +156]
  │   ├── OrderModifier::Serialize	[vim src/parser/result_modifier.cpp +156]
  │   ├── BaseTableRef::Serialize	[vim src/parser/tableref/basetableref.cpp +20]
  │   ├── JoinRef::Serialize	[vim src/parser/tableref/joinref.cpp +39]
  │   ├── JoinRef::Serialize	[vim src/parser/tableref/joinref.cpp +39]
  │   ├── ColumnDefinition::Serialize	[vim src/parser/column_definition.cpp +14]
  │   ├── PositionalReferenceExpression::Serialize	[vim src/parser/expression/positional_reference_expression.cpp +34]
  │   ├── FunctionExpression::Serialize	[vim src/parser/expression/function_expression.cpp +110]
  │   ├── FunctionExpression::Serialize	[vim src/parser/expression/function_expression.cpp +110]
  │   ├── ColumnRefExpression::Serialize	[vim src/parser/expression/columnref_expression.cpp +46]
  │   ├── StarExpression::Serialize	[vim src/parser/expression/star_expression.cpp +62]
  │   ├── StarExpression::Serialize	[vim src/parser/expression/star_expression.cpp +62]
  │   ├── WindowExpression::Serialize	[vim src/parser/expression/window_expression.cpp +219]
  │   ├── WindowExpression::Serialize	[vim src/parser/expression/window_expression.cpp +219]
  │   ├── CastExpression::Serialize	[vim src/parser/expression/cast_expression.cpp +38]
  │   ├── CastExpression::Serialize	[vim src/parser/expression/cast_expression.cpp +38]
  │   ├── ConjunctionExpression::Serialize	[vim src/parser/expression/conjunction_expression.cpp +60]
  │   ├── ParameterExpression::Serialize	[vim src/parser/expression/parameter_expression.cpp +30]
  │   ├── ConstantExpression::Serialize	[vim src/parser/expression/constant_expression.cpp +31]
  │   ├── ConstantExpression::Serialize	[vim src/parser/expression/constant_expression.cpp +31]
  │   ├── OperatorExpression::Serialize	[vim src/parser/expression/operator_expression.cpp +63]
  │   ├── LambdaExpression::Serialize	[vim src/parser/expression/lambda_expression.cpp +52]
  │   ├── LambdaExpression::Serialize	[vim src/parser/expression/lambda_expression.cpp +52]
  │   ├── BetweenExpression::Serialize	[vim src/parser/expression/between_expression.cpp +34]
  │   ├── BetweenExpression::Serialize	[vim src/parser/expression/between_expression.cpp +34]
  │   ├── CollateExpression::Serialize	[vim src/parser/expression/collate_expression.cpp +34]
  │   ├── CollateExpression::Serialize	[vim src/parser/expression/collate_expression.cpp +34]
  │   ├── CaseExpression::Serialize	[vim src/parser/expression/case_expression.cpp +52]
  │   ├── CaseExpression::Serialize	[vim src/parser/expression/case_expression.cpp +52]
  │   ├── SubqueryExpression::Serialize	[vim src/parser/expression/subquery_expression.cpp +38]
  │   ├── SubqueryExpression::Serialize	[vim src/parser/expression/subquery_expression.cpp +38]
  │   ├── ComparisonExpression::Serialize	[vim src/parser/expression/comparison_expression.cpp +36]
  │   ├── ComparisonExpression::Serialize	[vim src/parser/expression/comparison_expression.cpp +36]
  │   ├── SelectStatement::Serialize	[vim src/parser/statement/select_statement.cpp +13]
  │   ├── SelectNode::Serialize	[vim src/parser/query_node/select_node.cpp +69]
  │   ├── RecursiveCTENode::Serialize	[vim src/parser/query_node/recursive_cte_node.cpp +37]
  │   ├── RecursiveCTENode::Serialize	[vim src/parser/query_node/recursive_cte_node.cpp +37]
  │   ├── SetOperationNode::Serialize	[vim src/parser/query_node/set_operation_node.cpp +34]
  │   ├── SetOperationNode::Serialize	[vim src/parser/query_node/set_operation_node.cpp +34]
  │   ├── QueryNode::Serialize	[vim src/parser/query_node.cpp +61]
  │   ├── NotNullConstraint::Serialize	[vim src/parser/constraints/not_null_constraint.cpp +15]
  │   ├── CheckConstraint::Serialize	[vim src/parser/constraints/check_constraint.cpp +15]
  │   ├── CheckConstraint::Serialize	[vim src/parser/constraints/check_constraint.cpp +15]
  │   ├── UniqueConstraint::Serialize	[vim src/parser/constraints/unique_constraint.cpp +30]
  │   ├── Value::Serialize	[vim src/common/types/value.cpp +1226]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── DataChunk::Serialize	[vim src/common/types/data_chunk.cpp +186]
  │   ├── Serialize	[vim src/common/types.cpp +846]
  │   ├── Serialize	[vim src/common/types.cpp +890]
  │   ├── ExtraTypeInfo::Serialize	[vim src/common/types.cpp +1144]
  │   ├── LogicalType::Serialize	[vim src/common/types.cpp +1193]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── ViewCatalogEntry::Serialize	[vim src/catalog/catalog_entry/view_catalog_entry.cpp +46]
  │   ├── TypeCatalogEntry::Serialize	[vim src/catalog/catalog_entry/type_catalog_entry.cpp +19]
  │   ├── MacroCatalogEntry::Serialize	[vim src/catalog/catalog_entry/macro_catalog_entry.cpp +13]
  │   ├── TableCatalogEntry::Serialize	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +386]
  │   ├── ClientContext::VerifyQuery	[vim src/main/client_context.cpp +586]
  │   └── Database::Parallelize	[vim tools/nodejs/src/database.cpp +134]
  ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── ListStatistics::Deserialize	[vim src/storage/statistics/list_statistics.cpp +43]
  │   ├── NumericStatistics::Deserialize	[vim src/storage/statistics/numeric_statistics.cpp +189]
  │   ├── StructStatistics::Deserialize	[vim src/storage/statistics/struct_statistics.cpp +59]
  │   ├── BaseStatistics::Deserialize	[vim src/storage/statistics/base_statistics.cpp +92]
  │   ├── TableDataReader::ReadTableData	[vim src/storage/checkpoint/table_data_reader.cpp +22]
  │   ├── CheckpointManager::ReadSchema	[vim src/storage/checkpoint_manager.cpp +192]
  │   ├── CheckpointManager::ReadView	[vim src/storage/checkpoint_manager.cpp +237]
  │   ├── CheckpointManager::ReadSequence	[vim src/storage/checkpoint_manager.cpp +251]
  │   ├── CheckpointManager::ReadType	[vim src/storage/checkpoint_manager.cpp +265]
  │   ├── CheckpointManager::ReadMacro	[vim src/storage/checkpoint_manager.cpp +279]
  │   ├── CheckpointManager::ReadTable	[vim src/storage/checkpoint_manager.cpp +301]
  │   ├── ReplayState::ReplayCreateTable	[vim src/storage/wal_replay.cpp +223]
  │   ├── ReplayState::ReplayAlter	[vim src/storage/wal_replay.cpp +251]
  │   ├── ReplayState::ReplayCreateView	[vim src/storage/wal_replay.cpp +263]
  │   ├── ReplayState::ReplayCreateType	[vim src/storage/wal_replay.cpp +315]
  │   ├── ReplayState::ReplayCreateSequence	[vim src/storage/wal_replay.cpp +347]
  │   ├── ReplayState::ReplayCreateMacro	[vim src/storage/wal_replay.cpp +391]
  │   ├── ReplayState::ReplayInsert	[vim src/storage/wal_replay.cpp +427]
  │   ├── ReplayState::ReplayDelete	[vim src/storage/wal_replay.cpp +441]
  │   ├── ReplayState::ReplayUpdate	[vim src/storage/wal_replay.cpp +463]
  │   ├── RowGroup::RowGroup	[vim src/storage/table/row_group.cpp +26]
  │   ├── RowGroup::DeserializeDeletes	[vim src/storage/table/row_group.cpp +709]
  │   ├── RowGroup::Deserialize	[vim src/storage/table/row_group.cpp +739]
  │   ├── ColumnData::DeserializeColumn	[vim src/storage/table/column_data.cpp +380]
  │   ├── ChunkInfo::Deserialize	[vim src/storage/table/chunk_info.cpp +31]
  │   ├── DeserializeHeaderStructure	[vim src/storage/single_file_block_manager.cpp +65]
  │   ├── ReadList	[vim src/include/duckdb/common/serializer.hpp +89]
  │   ├── ReadOptional	[vim src/include/duckdb/common/serializer.hpp +98]
  │   ├── SubqueryRef::Deserialize	[vim src/parser/tableref/subqueryref.cpp +34]
  │   ├── ExpressionListRef::Deserialize	[vim src/parser/tableref/expressionlistref.cpp +61]
  │   ├── CrossProductRef::Deserialize	[vim src/parser/tableref/crossproductref.cpp +30]
  │   ├── TableFunctionRef::Deserialize	[vim src/parser/tableref/table_function.cpp +26]
  │   ├── Constraint::Deserialize	[vim src/parser/constraint.cpp +13]
  │   ├── SampleOptions::Deserialize	[vim src/parser/parsed_data/sample_options.cpp +26]
  │   ├── AlterInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +10]
  │   ├── AlterTableInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +29]
  │   ├── AddColumnInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +100]
  │   ├── ChangeColumnTypeInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +139]
  │   ├── AlterViewInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +176]
  │   ├── ResultModifier::Deserialize	[vim src/parser/result_modifier.cpp +18]
  │   ├── OrderByNode::Deserialize	[vim src/parser/result_modifier.cpp +149]
  │   ├── OrderModifier::Deserialize	[vim src/parser/result_modifier.cpp +164]
  │   ├── JoinRef::Deserialize	[vim src/parser/tableref/joinref.cpp +54]
  │   ├── ColumnDefinition::Deserialize	[vim src/parser/column_definition.cpp +20]
  │   ├── FunctionExpression::Deserialize	[vim src/parser/expression/function_expression.cpp +121]
  │   ├── StarExpression::Deserialize	[vim src/parser/expression/star_expression.cpp +76]
  │   ├── WindowExpression::Deserialize	[vim src/parser/expression/window_expression.cpp +239]
  │   ├── CastExpression::Deserialize	[vim src/parser/expression/cast_expression.cpp +45]
  │   ├── ConstantExpression::Deserialize	[vim src/parser/expression/constant_expression.cpp +36]
  │   ├── LambdaExpression::Deserialize	[vim src/parser/expression/lambda_expression.cpp +61]
  │   ├── BetweenExpression::Deserialize	[vim src/parser/expression/between_expression.cpp +41]
  │   ├── CollateExpression::Deserialize	[vim src/parser/expression/collate_expression.cpp +40]
  │   ├── CaseExpression::Deserialize	[vim src/parser/expression/case_expression.cpp +62]
  │   ├── SubqueryExpression::Deserialize	[vim src/parser/expression/subquery_expression.cpp +46]
  │   ├── ComparisonExpression::Deserialize	[vim src/parser/expression/comparison_expression.cpp +42]
  │   ├── SelectStatement::Deserialize	[vim src/parser/statement/select_statement.cpp +17]
  │   ├── ParsedExpression::Deserialize	[vim src/parser/parsed_expression.cpp +106]
  │   ├── RecursiveCTENode::Deserialize	[vim src/parser/query_node/recursive_cte_node.cpp +46]
  │   ├── SetOperationNode::Deserialize	[vim src/parser/query_node/set_operation_node.cpp +41]
  │   ├── QueryNode::Deserialize	[vim src/parser/query_node.cpp +77]
  │   ├── TableRef::Deserialize	[vim src/parser/tableref.cpp +25]
  │   ├── CheckConstraint::Deserialize	[vim src/parser/constraints/check_constraint.cpp +20]
  │   ├── Value::Deserialize	[vim src/common/types/value.cpp +1282]
  │   ├── Value::Deserialize	[vim src/common/types/value.cpp +1282]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── DataChunk::Deserialize	[vim src/common/types/data_chunk.cpp +200]
  │   ├── DataChunk::Deserialize	[vim src/common/types/data_chunk.cpp +200]
  │   ├── Deserialize	[vim src/common/types.cpp +850]
  │   ├── Deserialize	[vim src/common/types.cpp +898]
  │   ├── EnumTypeInfoTemplated	[vim src/common/types.cpp +1020]
  │   ├── ExtraTypeInfo::Serialize	[vim src/common/types.cpp +1144]
  │   ├── LogicalType::Deserialize	[vim src/common/types.cpp +1198]
  │   ├── ViewCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/view_catalog_entry.cpp +63]
  │   ├── TypeCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/type_catalog_entry.cpp +25]
  │   ├── MacroCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/macro_catalog_entry.cpp +29]
  │   ├── TableCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +484]
  │   ├── ClientContext::VerifyQuery	[vim src/main/client_context.cpp +586]
  │   └── CommitState::WriteCatalogEntry	[vim src/transaction/commit_state.cpp +31]
  ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_function.cpp +19]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +992]
  │   └── ClientContext::ExecutePreparedStatement	[vim src/main/client_context.cpp +226]
  ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── ListStatistics::Verify	[vim src/storage/statistics/list_statistics.cpp +60]
  │   ├── ListStatistics::Verify	[vim src/storage/statistics/list_statistics.cpp +60]
  │   ├── NumericStatistics::Verify	[vim src/storage/statistics/numeric_statistics.cpp +223]
  │   ├── StringStatistics::Verify	[vim src/storage/statistics/string_statistics.cpp +170]
  │   ├── StructStatistics::Verify	[vim src/storage/statistics/struct_statistics.cpp +89]
  │   ├── StructStatistics::Verify	[vim src/storage/statistics/struct_statistics.cpp +89]
  │   ├── BaseStatistics::Verify	[vim src/storage/statistics/base_statistics.cpp +136]
  │   ├── BaseStatistics::Verify	[vim src/storage/statistics/base_statistics.cpp +143]
  │   ├── DataTable::Append	[vim src/storage/data_table.cpp +469]
  │   ├── DataTable::Append	[vim src/storage/data_table.cpp +508]
  │   ├── DataTable::ScanTableSegment	[vim src/storage/data_table.cpp +556]
  │   ├── DataTable::Update	[vim src/storage/data_table.cpp +901]
  │   ├── DataTable::UpdateColumn	[vim src/storage/data_table.cpp +963]
  │   ├── WriteAheadLog::WriteInsert	[vim src/storage/write_ahead_log.cpp +207]
  │   ├── WriteAheadLog::WriteDelete	[vim src/storage/write_ahead_log.cpp +218]
  │   ├── WriteAheadLog::WriteUpdate	[vim src/storage/write_ahead_log.cpp +230]
  │   ├── RowGroup::RowGroup	[vim src/storage/table/row_group.cpp +20]
  │   ├── RowGroup::RowGroup	[vim src/storage/table/row_group.cpp +26]
  │   ├── RowGroup::AlterType	[vim src/storage/table/row_group.cpp +110]
  │   ├── RowGroup::AddColumn	[vim src/storage/table/row_group.cpp +156]
  │   ├── RowGroup::RemoveColumn	[vim src/storage/table/row_group.cpp +193]
  │   ├── RowGroup::RevertAppend	[vim src/storage/table/row_group.cpp +562]
  │   ├── RowGroup::Checkpoint	[vim src/storage/table/row_group.cpp +642]
  │   ├── RowGroup::Verify	[vim src/storage/table/row_group.cpp +810]
  │   ├── StandardColumnData::Verify	[vim src/storage/table/standard_column_data.cpp +206]
  │   ├── StandardColumnData::Verify	[vim src/storage/table/standard_column_data.cpp +206]
  │   ├── StructColumnData::Verify	[vim src/storage/table/struct_column_data.cpp +280]
  │   ├── StructColumnData::Verify	[vim src/storage/table/struct_column_data.cpp +280]
  │   ├── UpdateSegment::Update	[vim src/storage/table/update_segment.cpp +1048]
  │   ├── UncompressedStringStorage::StringAppend	[vim src/storage/compression/string_uncompressed.cpp +214]
  │   ├── DecimalDecimalCastSwitch	[vim src/include/duckdb/common/vector_operations/decimal_cast.hpp +213]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor.cpp +40]
  │   ├── ExpressionExecutor::Verify	[vim src/execution/expression_executor.cpp +102]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor.cpp +138]
  │   ├── WindowSegmentTree::ExtractFrame	[vim src/execution/window_segment_tree.cpp +71]
  │   ├── WindowSegmentTree::WindowSegmentValue	[vim src/execution/window_segment_tree.cpp +105]
  │   ├── PhysicalExpressionScan::EvaluateExpression	[vim src/execution/operator/scan/physical_expression_scan.cpp +31]
  │   ├── PhysicalExpressionScan::Sink	[vim src/execution/operator/scan/physical_expression_scan.cpp +66]
  │   ├── PhysicalUnnest::Execute	[vim src/execution/operator/projection/physical_unnest.cpp +152]
  │   ├── PhysicalHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +152]
  │   ├── MaterializeExpressions	[vim src/execution/operator/aggregate/physical_window.cpp +395]
  │   ├── MaterializeOverForWindow	[vim src/execution/operator/aggregate/physical_window.cpp +586]
  │   ├── Scan	[vim src/execution/operator/aggregate/physical_window.cpp +1285]
  │   ├── PhysicalPerfectHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +117]
  │   ├── PhysicalNestedLoopJoin::ResolveComplexJoin	[vim src/execution/operator/join/physical_nested_loop_join.cpp +313]
  │   ├── RadixPartitionedHashTable::Sink	[vim src/execution/radix_partitioned_hashtable.cpp +103]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_function.cpp +19]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── GroupedAggregateHashTable::Resize	[vim src/execution/aggregate_hashtable.cpp +207]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +261]
  │   ├── GroupedAggregateHashTable::FetchAggregates	[vim src/execution/aggregate_hashtable.cpp +348]
  │   ├── GroupedAggregateHashTable::Combine	[vim src/execution/aggregate_hashtable.cpp +554]
  │   ├── GroupedAggregateHashTable::Partition	[vim src/execution/aggregate_hashtable.cpp +603]
  │   ├── Value::DECIMAL	[vim src/common/types/value.cpp +353]
  │   ├── ChunkCollection::Verify	[vim src/common/types/chunk_collection.cpp +16]
  │   ├── ChunkCollection::Merge	[vim src/common/types/chunk_collection.cpp +30]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +56]
  │   ├── Vector::UTFVerify	[vim src/common/types/vector.cpp +959]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +996]
  │   ├── Vector::Verify	[vim src/common/types/vector.cpp +1132]
  │   ├── DataChunk::Deserialize	[vim src/common/types/data_chunk.cpp +200]
  │   ├── DataChunk::Verify	[vim src/common/types/data_chunk.cpp +256]
  │   ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── ClientContext::CreatePreparedStatement	[vim src/main/client_context.cpp +172]
  │   ├── GetFirstFunction	[vim src/function/aggregate/distributive/first.cpp +225]
  │   ├── BaseScalarFunction::CastToFunctionArguments	[vim src/function/function.cpp +335]
  │   ├── PipelineExecutor::Execute	[vim src/parallel/pipeline_executor.cpp +227]
  │   ├── PipelineExecutor::EndOperator	[vim src/parallel/pipeline_executor.cpp +322]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── StructExtractFunction	[vim src/function/scalar/struct/struct_extract.cpp +27]
  │   ├── StructPackFunction	[vim src/function/scalar/struct/struct_pack.cpp +11]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── MapExtractFunction	[vim src/function/scalar/map/map_extract.cpp +22]
  │   ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  │   ├── ExecuteListExtract	[vim src/function/scalar/list/list_extract.cpp +150]
  │   ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  │   ├── DecimalNegateBind	[vim src/function/scalar/operators/arithmetic.cpp +362]
  │   ├── BindDecimalMultiply	[vim src/function/scalar/operators/arithmetic.cpp +564]
  │   ├── ArrowTableFunction::ArrowScanFunction	[vim src/function/table/arrow.cpp +1009]
  │   ├── ArrowTableFunction::ArrowScanFunctionParallel	[vim src/function/table/arrow.cpp +1034]
  │   ├── LogicalOperator::Verify	[vim src/planner/logical_operator.cpp +79]
  │   ├── HTTPFsExtension::Load	[vim extension/httpfs/httpfs-extension.cpp +7]
  │   ├── ParquetReader::ScanInternal	[vim extension/parquet/parquet_reader.cpp +571]
  │   └── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── CreateMockChunk	[vim src/storage/data_table.cpp +824]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── ColumnDataCheckpointer::ScanSegments	[vim src/storage/table/column_data_checkpointer.cpp +38]
  │   ├── NopFunction	[vim src/include/duckdb/function/scalar_function.hpp +129]
  │   ├── PhysicalChunkScan::GetData	[vim src/execution/operator/scan/physical_chunk_scan.cpp +18]
  │   ├── UnnestVector	[vim src/execution/operator/projection/physical_unnest.cpp +83]
  │   ├── PhysicalUnnest::Execute	[vim src/execution/operator/projection/physical_unnest.cpp +152]
  │   ├── PhysicalRecursiveCTE::GetData	[vim src/execution/operator/set/physical_recursive_cte.cpp +77]
  │   ├── TopNHeap::ExtractBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +295]
  │   ├── TopNHeap::CheckBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +315]
  │   ├── PhysicalHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +152]
  │   ├── Scan	[vim src/execution/operator/aggregate/physical_window.cpp +1285]
  │   ├── PhysicalPerfectHashAggregate::Sink	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +117]
  │   ├── PhysicalCrossProduct::Execute	[vim src/execution/operator/join/physical_cross_product.cpp +53]
  │   ├── PhysicalIndexJoin::Output	[vim src/execution/operator/join/physical_index_join.cpp +90]
  │   ├── PhysicalJoin::ConstructMarkJoinResult	[vim src/execution/operator/join/physical_nested_loop_join.cpp +67]
  │   ├── PerfectHashJoinExecutor::ProbePerfectHashTable	[vim src/execution/operator/join/perfect_hash_join_executor.cpp +149]
  │   ├── PhysicalBlockwiseNLJoin::Execute	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +94]
  │   ├── PhysicalBlockwiseNLJoin::Execute	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +94]
  │   ├── PhysicalHashJoin::Sink	[vim src/execution/operator/join/physical_hash_join.cpp +128]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PhysicalInsert::Sink	[vim src/execution/operator/persistent/physical_insert.cpp +41]
  │   ├── PhysicalLimit::Sink	[vim src/execution/operator/helper/physical_limit.cpp +49]
  │   ├── PhysicalLimit::GetData	[vim src/execution/operator/helper/physical_limit.cpp +127]
  │   ├── PhysicalStreamingSample::SystemSample	[vim src/execution/operator/helper/physical_streaming_sample.cpp +24]
  │   ├── PhysicalFilter::Execute	[vim src/execution/operator/filter/physical_filter.cpp +41]
  │   ├── RadixHTLocalState	[vim src/execution/radix_partitioned_hashtable.cpp +74]
  │   ├── RadixPartitionedHashTable::Sink	[vim src/execution/radix_partitioned_hashtable.cpp +103]
  │   ├── RadixPartitionedHashTable::GetData	[vim src/execution/radix_partitioned_hashtable.cpp +329]
  │   ├── BufferedCSVReader::Flush	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1569]
  │   ├── PhysicalComparisonJoin::ConstructEmptyJoinResult	[vim src/execution/operator/join/physical_comparison_join.cpp +35]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_parameter.cpp +14]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_reference.cpp +13]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_conjunction.cpp +28]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_constant.cpp +14]
  │   ├── ExpressionExecutor::Execute	[vim src/execution/expression_executor/execute_operator.cpp +17]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── ScanStructure::ConstructMarkJoinResult	[vim src/execution/join_hashtable.cpp +540]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── ScanStructure::NextSingleJoin	[vim src/execution/join_hashtable.cpp +686]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +261]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   ├── Vector::Vector	[vim src/common/types/vector.cpp +43]
  │   ├── Vector::Vector	[vim src/common/types/vector.cpp +55]
  │   ├── Vector::ReferenceAndSetType	[vim src/common/types/vector.cpp +98]
  │   ├── Vector::Slice	[vim src/common/types/vector.cpp +115]
  │   ├── Vector::Slice	[vim src/common/types/vector.cpp +146]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── ConstantVector::Reference	[vim src/common/types/vector.cpp +1180]
  │   ├── DataChunk::Reference	[vim src/common/types/data_chunk.cpp +78]
  │   ├── DataChunk::Slice	[vim src/common/types/data_chunk.cpp +225]
  │   ├── StructCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +639]
  │   ├── PipelineExecutor::Execute	[vim src/parallel/pipeline_executor.cpp +227]
  │   ├── ProjectInputs	[vim src/function/aggregate/sorted_aggregate_function.cpp +96]
  │   ├── StructExtractFunction	[vim src/function/scalar/struct/struct_extract.cpp +27]
  │   ├── StructPackFunction	[vim src/function/scalar/struct/struct_pack.cpp +11]
  │   ├── CurrentTimeFunction	[vim src/function/scalar/date/current.cpp +29]
  │   ├── CurrentDateFunction	[vim src/function/scalar/date/current.cpp +36]
  │   ├── CurrentTimestampFunction	[vim src/function/scalar/date/current.cpp +43]
  │   ├── CurrentQueryFunction	[vim src/function/scalar/system/system_functions.cpp +32]
  │   ├── CurrentSchemaFunction	[vim src/function/scalar/system/system_functions.cpp +40]
  │   ├── CurrentSchemasFunction	[vim src/function/scalar/system/system_functions.cpp +46]
  │   ├── TransactionIdCurrent	[vim src/function/scalar/system/system_functions.cpp +56]
  │   ├── VersionFunction	[vim src/function/scalar/system/system_functions.cpp +66]
  │   ├── AliasFunction	[vim src/function/scalar/generic/alias.cpp +6]
  │   ├── TypeOfFunction	[vim src/function/scalar/generic/typeof.cpp +5]
  │   ├── StatsFunction	[vim src/function/scalar/generic/stats.cpp +18]
  │   ├── CurrentSettingFunction	[vim src/function/scalar/generic/current_setting.cpp +22]
  │   ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  │   ├── ConstantOrNullFunction	[vim src/function/scalar/generic/constant_or_null.cpp +20]
  │   ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  │   ├── PiFunction	[vim src/function/scalar/math/numeric.cpp +692]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   ├── SummaryFunction	[vim src/function/table/summary.cpp +27]
  │   ├── RepeatFunction	[vim src/function/table/repeat.cpp +35]
  │   ├── PragmaDetailedProfilingOutputFunction	[vim src/function/table/pragma_detailed_profiling_output.cpp +110]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── PragmaLastProfilingOutputFunction	[vim src/function/table/pragma_last_profiling_output.cpp +64]
  │   ├── ParquetReader::ScanInternal	[vim extension/parquet/parquet_reader.cpp +571]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   └── CastSQLite::InputVectorsToVarchar	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +27]
  ├── ListVector::Search	[vim src/common/types/vector.cpp +1430]
  │   └── MapExtractFunction	[vim src/function/scalar/map/map_extract.cpp +22]
  ├── SetChildValidityMask	[vim src/common/types/data_chunk.cpp +310]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStruct	[vim src/common/types/data_chunk.cpp +360]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   └── DataChunk::ToArrowArray	[vim src/common/types/data_chunk.cpp +617]
  ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   └── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   └── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  ├── SetArrowChild	[vim src/common/types/data_chunk.cpp +422]
  │   ├── SetList	[vim src/common/types/data_chunk.cpp +325]
  │   ├── SetStruct	[vim src/common/types/data_chunk.cpp +360]
  │   ├── SetStructMap	[vim src/common/types/data_chunk.cpp +381]
  │   └── DataChunk::ToArrowArray	[vim src/common/types/data_chunk.cpp +617]
  ├── SortedDataScanner::Scan	[vim src/common/sort/sorted_block.cpp +296]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +115]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +159]
  │   ├── DataTable::Scan	[vim src/storage/data_table.cpp +356]
  │   ├── DataTable::ScanBaseTable	[vim src/storage/data_table.cpp +367]
  │   ├── DataTable::VerifyAppendConstraints	[vim src/storage/data_table.cpp +440]
  │   ├── DataTable::RevertAppend	[vim src/storage/data_table.cpp +657]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +728]
  │   ├── DataTable::RemoveFromIndexes	[vim src/storage/data_table.cpp +736]
  │   ├── DataTable::VerifyUpdateConstraints	[vim src/storage/data_table.cpp +858]
  │   ├── CheckpointManager::CreateCheckpoint	[vim src/storage/checkpoint_manager.cpp +33]
  │   ├── CheckpointManager::WriteSchema	[vim src/storage/checkpoint_manager.cpp +123]
  │   ├── LocalTableStorage::Clear	[vim src/storage/local_storage.cpp +61]
  │   ├── LocalStorage::Scan	[vim src/storage/local_storage.cpp +92]
  │   ├── LocalStorage::ScanTableStorage	[vim src/storage/local_storage.cpp +345]
  │   ├── RowGroup::TemplatedScan	[vim src/storage/table/row_group.cpp +284]
  │   ├── StandardColumnData::Scan	[vim src/storage/table/standard_column_data.cpp +55]
  │   ├── StandardColumnData::Scan	[vim src/storage/table/standard_column_data.cpp +55]
  │   ├── ColumnData::ScanVector	[vim src/storage/table/column_data.cpp +58]
  │   ├── ColumnData::Select	[vim src/storage/table/column_data.cpp +155]
  │   ├── ColumnData::FilterScan	[vim src/storage/table/column_data.cpp +162]
  │   ├── ColumnData::CheckpointScan	[vim src/storage/table/column_data.cpp +349]
  │   ├── ColumnSegment::Scan	[vim src/storage/table/column_segment.cpp +77]
  │   ├── StructColumnData::Scan	[vim src/storage/table/struct_column_data.cpp +68]
  │   ├── GetEntries	[vim src/include/duckdb/catalog/catalog_set.hpp +76]
  │   ├── PhysicalOrder::GetData	[vim src/execution/operator/order/physical_order.cpp +201]
  │   ├── TopNSortState::Scan	[vim src/execution/operator/order/physical_top_n.cpp +161]
  │   ├── TopNHeap::Combine	[vim src/execution/operator/order/physical_top_n.cpp +242]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── TopNHeap::Scan	[vim src/execution/operator/order/physical_top_n.cpp +385]
  │   ├── PhysicalTopN::GetData	[vim src/execution/operator/order/physical_top_n.cpp +466]
  │   ├── ScanSortedPartition	[vim src/execution/operator/aggregate/physical_window.cpp +532]
  │   ├── PhysicalWindow::GetData	[vim src/execution/operator/aggregate/physical_window.cpp +1411]
  │   ├── PhysicalPerfectHashAggregate::GetData	[vim src/execution/operator/aggregate/physical_perfecthash_aggregate.cpp +187]
  │   ├── PhysicalExport::GetData	[vim src/execution/operator/persistent/physical_export.cpp +92]
  │   ├── CanUseIndexJoin	[vim src/execution/physical_plan/plan_comparison_join.cpp +109]
  │   ├── RadixPartitionedHashTable::GetData	[vim src/execution/radix_partitioned_hashtable.cpp +329]
  │   ├── Catalog::ScanSchemas	[vim src/catalog/catalog.cpp +190]
  │   ├── Catalog::CreateMissingEntryException	[vim src/catalog/catalog.cpp +214]
  │   ├── SchemaCatalogEntry::Scan	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +192]
  │   ├── SchemaCatalogEntry::Scan	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +198]
  │   ├── Finalize	[vim src/function/aggregate/holistic/mode.cpp +144]
  │   ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   ├── TableScanFunc	[vim src/function/table/table_scan.cpp +65]
  │   ├── IndexScanFunction	[vim src/function/table/table_scan.cpp +172]
  │   ├── TableScanPushdownComplexFilter	[vim src/function/table/table_scan.cpp +207]
  │   ├── PragmaCollateInit	[vim src/function/table/system/pragma_collations.cpp +29]
  │   ├── DuckDBDependenciesInit	[vim src/function/table/system/duckdb_dependencies.cpp +53]
  │   ├── DuckDBViewsInit	[vim src/function/table/system/duckdb_views.cpp +51]
  │   ├── DuckDBSequencesInit	[vim src/function/table/system/duckdb_sequences.cpp +63]
  │   ├── DuckDBConstraintsInit	[vim src/function/table/system/duckdb_constraints.cpp +67]
  │   ├── DuckDBTablesInit	[vim src/function/table/system/duckdb_tables.cpp +66]
  │   ├── DuckDBIndexesInit	[vim src/function/table/system/duckdb_indexes.cpp +59]
  │   ├── DuckDBColumnsInit	[vim src/function/table/system/duckdb_columns.cpp +76]
  │   ├── PragmaFunctionsInit	[vim src/function/table/system/pragma_functions.cpp +47]
  │   ├── Binder::Bind	[vim src/planner/binder/statement/bind_export.cpp +42]
  │   ├── BindUpdateConstraints	[vim src/planner/binder/statement/bind_update.cpp +75]
  │   ├── main	[vim extension/parquet/parquetcli.cpp +28]
  │   └── ParquetScanImplementation	[vim extension/parquet/parquet-extension.cpp +276]
  ├── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  │   ├── PhysicalOrder::Sink	[vim src/execution/operator/order/physical_order.cpp +72]
  │   ├── TopNSortState::Append	[vim src/execution/operator/order/physical_top_n.cpp +108]
  │   └── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  ├── TemplatedBooleanNullmask	[vim src/common/vector_operations/boolean_operators.cpp +17]
  │   ├── VectorOperations::And	[vim src/common/vector_operations/boolean_operators.cpp +108]
  │   └── VectorOperations::Or	[vim src/common/vector_operations/boolean_operators.cpp +161]
  ├── TemplatedCopy	[vim src/common/vector_operations/vector_copy.cpp +16]
  │   └── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── ListStatistics::Copy	[vim src/storage/statistics/list_statistics.cpp +31]
  │   ├── NumericStatistics::Copy	[vim src/storage/statistics/numeric_statistics.cpp +171]
  │   ├── ValidityStatistics::Combine	[vim src/storage/statistics/validity_statistics.cpp +12]
  │   ├── StringStatistics::Copy	[vim src/storage/statistics/string_statistics.cpp +20]
  │   ├── StructStatistics::Copy	[vim src/storage/statistics/struct_statistics.cpp +38]
  │   ├── BaseStatistics::Copy	[vim src/storage/statistics/base_statistics.cpp +37]
  │   ├── BaseStatistics::Merge	[vim src/storage/statistics/base_statistics.cpp +45]
  │   ├── Index::Index	[vim src/storage/index.cpp +10]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +64]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +115]
  │   ├── DataTable::DataTable	[vim src/storage/data_table.cpp +159]
  │   ├── DataTable::GetStatistics	[vim src/storage/data_table.cpp +1070]
  │   ├── LocalTableStorage::Clear	[vim src/storage/local_storage.cpp +61]
  │   ├── GetStatistics	[vim src/storage/table/list_column_data.cpp +294]
  │   ├── ColumnCheckpointState::FlushSegment	[vim src/storage/table/column_checkpoint_state.cpp +24]
  │   ├── RowGroup::GetStatistics	[vim src/storage/table/row_group.cpp +628]
  │   ├── ColumnDataCheckpointer::WritePersistentSegments	[vim src/storage/table/column_data_checkpointer.cpp +192]
  │   ├── GetStatistics	[vim src/storage/table/standard_column_data.cpp +161]
  │   ├── UpdateSegment::GetStatistics	[vim src/storage/table/update_segment.cpp +884]
  │   ├── GetStatistics	[vim src/include/duckdb/storage/table/column_checkpoint_state.hpp +35]
  │   ├── Copy	[vim src/include/duckdb/parser/parsed_data/create_index_info.hpp +35]
  │   ├── Copy	[vim src/include/duckdb/parser/parsed_data/show_select_info.hpp +26]
  │   ├── Copy	[vim src/include/duckdb/parser/parsed_data/create_table_info.hpp +35]
  │   ├── Copy	[vim src/include/duckdb/parser/parsed_data/create_macro_info.hpp +23]
  │   ├── Copy	[vim src/include/duckdb/parser/parsed_data/create_view_info.hpp +33]
  │   ├── TemplatedValidityMask	[vim src/include/duckdb/common/types/validity_mask.hpp +68]
  │   ├── Initialize	[vim src/include/duckdb/common/types/validity_mask.hpp +238]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/binary_executor.hpp +132]
  │   ├── ExecuteFlat	[vim src/include/duckdb/common/vector_operations/unary_executor.hpp +82]
  │   ├── LogicalCreateIndex	[vim src/include/duckdb/planner/operator/logical_create_index.hpp +18]
  │   ├── Copy	[vim src/include/duckdb/planner/bound_result_modifier.hpp +40]
  │   ├── StatisticsPropagator::PropagateStatistics	[vim src/optimizer/statistics/operator/propagate_aggregate.cpp +7]
  │   ├── StatisticsPropagator::PropagateStatistics	[vim src/optimizer/statistics/operator/propagate_set_operation.cpp +26]
  │   ├── StatisticsPropagator::PropagateExpression	[vim src/optimizer/statistics/expression/propagate_columnref.cpp +6]
  │   ├── StatisticsOperationsNumericNumericCast	[vim src/optimizer/statistics/expression/propagate_cast.cpp +7]
  │   ├── RegexRangeFilter::Rewrite	[vim src/optimizer/regex_range_filter.cpp +18]
  │   ├── ReplaceProjectionBindings	[vim src/optimizer/pushdown/pushdown_projection.cpp +9]
  │   ├── FilterRemovesNull	[vim src/optimizer/pushdown/pushdown_left_join.cpp +31]
  │   ├── FilterPushdown::PushdownLeftJoin	[vim src/optimizer/pushdown/pushdown_left_join.cpp +59]
  │   ├── ReplaceGroupBindings	[vim src/optimizer/pushdown/pushdown_aggregate.cpp +12]
  │   ├── FilterPushdown::PushdownSetOperation	[vim src/optimizer/pushdown/pushdown_set_operation.cpp +30]
  │   ├── InClauseRewriter::VisitReplace	[vim src/optimizer/in_clause_rewriter.cpp +26]
  │   ├── StatisticsPropagator::PropagateExpression	[vim src/optimizer/statistics_propagator.cpp +87]
  │   ├── ReplaceExpressionBinding	[vim src/optimizer/pullup/pullup_projection.cpp +20]
  │   ├── FilterPullup::ProjectSetOperation	[vim src/optimizer/pullup/pullup_projection.cpp +49]
  │   ├── FilterCombiner::GetNode	[vim src/optimizer/filter_combiner.cpp +25]
  │   ├── FilterCombiner::GenerateFilters	[vim src/optimizer/filter_combiner.cpp +91]
  │   ├── FilterCombiner::GenerateTableScanFilters	[vim src/optimizer/filter_combiner.cpp +382]
  │   ├── FilterCombiner::AddTransitiveFilters	[vim src/optimizer/filter_combiner.cpp +727]
  │   ├── WindowSegmentTree::ExtractFrame	[vim src/execution/window_segment_tree.cpp +71]
  │   ├── DeliminatorPlanUpdater::VisitExpression	[vim src/optimizer/deliminator.cpp +60]
  │   ├── Deliminator::RemoveCandidate	[vim src/optimizer/deliminator.cpp +141]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── BufferedCSVReader::DetectCandidateTypes	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +596]
  │   ├── ScanStructure::NextMarkJoin	[vim src/execution/join_hashtable.cpp +583]
  │   ├── SubqueryRef::Copy	[vim src/parser/tableref/subqueryref.cpp +21]
  │   ├── ExpressionListRef::Copy	[vim src/parser/tableref/expressionlistref.cpp +28]
  │   ├── CrossProductRef::Copy	[vim src/parser/tableref/crossproductref.cpp +15]
  │   ├── TableFunctionRef::Copy	[vim src/parser/tableref/table_function.cpp +36]
  │   ├── AddColumnInfo::Copy	[vim src/parser/parsed_data/alter_table_info.cpp +91]
  │   ├── ChangeColumnTypeInfo::Copy	[vim src/parser/parsed_data/alter_table_info.cpp +127]
  │   ├── SetDefaultInfo::Copy	[vim src/parser/parsed_data/alter_table_info.cpp +150]
  │   ├── LimitModifier::Copy	[vim src/parser/result_modifier.cpp +46]
  │   ├── DistinctModifier::Copy	[vim src/parser/result_modifier.cpp +81]
  │   ├── OrderModifier::Copy	[vim src/parser/result_modifier.cpp +119]
  │   ├── JoinRef::Copy	[vim src/parser/tableref/joinref.cpp +25]
  │   ├── ColumnDefinition::Copy	[vim src/parser/column_definition.cpp +6]
  │   ├── FunctionExpression::Copy	[vim src/parser/expression/function_expression.cpp +89]
  │   ├── StarExpression::Copy	[vim src/parser/expression/star_expression.cpp +92]
  │   ├── WindowExpression::Copy	[vim src/parser/expression/window_expression.cpp +193]
  │   ├── CastExpression::Copy	[vim src/parser/expression/cast_expression.cpp +32]
  │   ├── ConjunctionExpression::Copy	[vim src/parser/expression/conjunction_expression.cpp +50]
  │   ├── OperatorExpression::Copy	[vim src/parser/expression/operator_expression.cpp +54]
  │   ├── LambdaExpression::Copy	[vim src/parser/expression/lambda_expression.cpp +48]
  │   ├── BetweenExpression::Copy	[vim src/parser/expression/between_expression.cpp +28]
  │   ├── CollateExpression::Copy	[vim src/parser/expression/collate_expression.cpp +28]
  │   ├── CaseExpression::Copy	[vim src/parser/expression/case_expression.cpp +39]
  │   ├── SubqueryExpression::Copy	[vim src/parser/expression/subquery_expression.cpp +28]
  │   ├── UpdateStatement::Copy	[vim src/parser/statement/update_statement.cpp +8]
  │   ├── InsertStatement::Copy	[vim src/parser/statement/insert_statement.cpp +8]
  │   ├── DeleteStatement::Copy	[vim src/parser/statement/delete_statement.cpp +8]
  │   ├── ExecuteStatement::Copy	[vim src/parser/statement/execute_statement.cpp +8]
  │   ├── ShowStatement::Copy	[vim src/parser/statement/show_statement.cpp +8]
  │   ├── CallStatement::Copy	[vim src/parser/statement/call_statement.cpp +8]
  │   ├── CreateStatement::Copy	[vim src/parser/statement/create_statement.cpp +8]
  │   ├── AlterStatement::Copy	[vim src/parser/statement/alter_statement.cpp +11]
  │   ├── ExportStatement::Copy	[vim src/parser/statement/export_statement.cpp +9]
  │   ├── PrepareStatement::Copy	[vim src/parser/statement/prepare_statement.cpp +8]
  │   ├── LoadStatement::Copy	[vim src/parser/statement/load_statement.cpp +8]
  │   ├── ComparisonExpression::Copy	[vim src/parser/expression/comparison_expression.cpp +30]
  │   ├── CopyStatement::Copy	[vim src/parser/statement/copy_statement.cpp +8]
  │   ├── SelectStatement::Copy	[vim src/parser/statement/select_statement.cpp +7]
  │   ├── PragmaStatement::Copy	[vim src/parser/statement/pragma_statement.cpp +8]
  │   ├── SelectNode::Copy	[vim src/parser/query_node/select_node.cpp +51]
  │   ├── RecursiveCTENode::Copy	[vim src/parser/query_node/recursive_cte_node.cpp +26]
  │   ├── SetOperationNode::Copy	[vim src/parser/query_node/set_operation_node.cpp +25]
  │   ├── QueryNode::CopyProperties	[vim src/parser/query_node.cpp +47]
  │   ├── TableRef::CopyProperties	[vim src/parser/tableref.cpp +61]
  │   ├── CheckConstraint::Copy	[vim src/parser/constraints/check_constraint.cpp +11]
  │   ├── DropStatement::Copy	[vim src/parser/statement/drop_statement.cpp +8]
  │   ├── ExplainStatement::Copy	[vim src/parser/statement/explain_statement.cpp +9]
  │   ├── Value::TryCastAs	[vim src/common/types/value.cpp +1188]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +56]
  │   ├── ChunkCollection::CopyCell	[vim src/common/types/chunk_collection.cpp +416]
  │   ├── VectorListBuffer::Append	[vim src/common/types/vector_buffer.cpp +67]
  │   ├── VectorListBuffer::Append	[vim src/common/types/vector_buffer.cpp +73]
  │   ├── Vector::Normalify	[vim src/common/types/vector.cpp +645]
  │   ├── DataChunk::Copy	[vim src/common/types/data_chunk.cpp +96]
  │   ├── DataChunk::Copy	[vim src/common/types/data_chunk.cpp +107]
  │   ├── DataChunk::Append	[vim src/common/types/data_chunk.cpp +135]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +224]
  │   ├── ViewCatalogEntry::AlterEntry	[vim src/catalog/catalog_entry/view_catalog_entry.cpp +28]
  │   ├── ViewCatalogEntry::Copy	[vim src/catalog/catalog_entry/view_catalog_entry.cpp +88]
  │   ├── TableCatalogEntry::TableCatalogEntry	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +47]
  │   ├── TableCatalogEntry::AlterEntry	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +102]
  │   ├── TableCatalogEntry::RenameColumn	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +151]
  │   ├── TableCatalogEntry::AddColumn	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +195]
  │   ├── TableCatalogEntry::RemoveColumn	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +213]
  │   ├── TableCatalogEntry::SetDefault	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +293]
  │   ├── TableCatalogEntry::ChangeColumnType	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +315]
  │   ├── TableCatalogEntry::Copy	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +504]
  │   ├── ClientContext::PrepareInternal	[vim src/main/client_context.cpp +342]
  │   ├── ClientContext::RunStatementOrPreparedStatement	[vim src/main/client_context.cpp +408]
  │   ├── ClientContext::VerifyQuery	[vim src/main/client_context.cpp +586]
  │   ├── ProjectionRelation::GetQueryNode	[vim src/main/relation/projection_relation.cpp +24]
  │   ├── FilterRelation::GetQueryNode	[vim src/main/relation/filter_relation.cpp +16]
  │   ├── AggregateRelation::GetQueryNode	[vim src/main/relation/aggregate_relation.cpp +25]
  │   ├── ValueRelation::GetTableRef	[vim src/main/relation/value_relation.cpp +39]
  │   ├── DeleteRelation::Bind	[vim src/main/relation/delete_relation.cpp +16]
  │   ├── UpdateRelation::Bind	[vim src/main/relation/update_relation.cpp +18]
  │   ├── OrderRelation::GetQueryNode	[vim src/main/relation/order_relation.cpp +14]
  │   ├── JoinRelation::GetTableRef	[vim src/main/relation/join_relation.cpp +36]
  │   ├── SetValue	[vim src/function/aggregate/distributive/first.cpp +145]
  │   ├── Finalize	[vim src/function/aggregate/distributive/first.cpp +177]
  │   ├── Assign	[vim src/function/aggregate/distributive/minmax.cpp +402]
  │   ├── Finalize	[vim src/function/aggregate/distributive/minmax.cpp +454]
  │   ├── SortedAggregateBindData	[vim src/function/aggregate/sorted_aggregate_function.cpp +39]
  │   ├── MacroFunction::ValidateArguments	[vim src/function/macro_function.cpp +15]
  │   ├── MacroFunction::Copy	[vim src/function/macro_function.cpp +65]
  │   ├── PropagateStructExtractStats	[vim src/function/scalar/struct/struct_extract.cpp +101]
  │   ├── StructPackStats	[vim src/function/scalar/struct/struct_pack.cpp +62]
  │   ├── PropagateDatePartStatistics	[vim src/function/scalar/date/date_part.cpp +80]
  │   ├── PropagateSimpleDatePartStatistics	[vim src/function/scalar/date/date_part.cpp +105]
  │   ├── ListConcatStats	[vim src/function/scalar/list/list_concat.cpp +108]
  │   ├── ListExtractStats	[vim src/function/scalar/list/list_extract.cpp +213]
  │   ├── NegateBindStatistics	[vim src/function/scalar/operators/arithmetic.cpp +392]
  │   ├── TableScanPushdownComplexFilter	[vim src/function/table/table_scan.cpp +207]
  │   ├── LogicalOperator::Verify	[vim src/planner/logical_operator.cpp +79]
  │   ├── LogicalComparisonJoin::ParamsToString	[vim src/planner/operator/logical_comparison_join.cpp +11]
  │   ├── MacroBinding::ParamToArg	[vim src/planner/table_binding.cpp +124]
  │   ├── BoundFunctionExpression::Copy	[vim src/planner/expression/bound_function_expression.cpp +56]
  │   ├── BoundBetweenExpression::Copy	[vim src/planner/expression/bound_between_expression.cpp +33]
  │   ├── BoundComparisonExpression::Copy	[vim src/planner/expression/bound_comparison_expression.cpp +28]
  │   ├── BoundCastExpression::Copy	[vim src/planner/expression/bound_cast_expression.cpp +91]
  │   ├── BoundOperatorExpression::Copy	[vim src/planner/expression/bound_operator_expression.cpp +40]
  │   ├── BoundWindowExpression::Copy	[vim src/planner/expression/bound_window_expression.cpp +196]
  │   ├── BoundAggregateExpression::Copy	[vim src/planner/expression/bound_aggregate_expression.cpp +67]
  │   ├── BoundConjunctionExpression::Copy	[vim src/planner/expression/bound_conjunction_expression.cpp +33]
  │   ├── BoundCaseExpression::Copy	[vim src/planner/expression/bound_case_expression.cpp +37]
  │   ├── Planner::PrepareSQLStatement	[vim src/planner/planner.cpp +59]
  │   ├── Planner::PlanExecute	[vim src/planner/planner.cpp +76]
  │   ├── BoundUnnestExpression::Copy	[vim src/planner/expression/bound_unnest_expression.cpp +36]
  │   ├── BindContext::CheckExclusionList	[vim src/planner/bind_context.cpp +226]
  │   ├── RewriteCountAggregates::VisitReplace	[vim src/planner/subquery/rewrite_correlated_expressions.cpp +100]
  │   ├── ColumnAliasBinder::BindAlias	[vim src/planner/expression_binder/column_alias_binder.cpp +13]
  │   ├── GroupBinder::BindSelectRef	[vim src/planner/expression_binder/group_binder.cpp +43]
  │   ├── Binder::Bind	[vim src/planner/binder/tableref/bind_basetableref.cpp +18]
  │   ├── ExpressionBinder::BindExpression	[vim src/planner/binder/expression/bind_between_expression.cpp +10]
  │   ├── BindRangeExpression	[vim src/planner/binder/expression/bind_window_expression.cpp +96]
  │   ├── ExpressionBinder::BindMacro	[vim src/planner/binder/expression/bind_macro_expression.cpp +122]
  │   ├── BindConstraints	[vim src/planner/binder/statement/bind_create_table.cpp +38]
  │   ├── Binder::BindDefaultValues	[vim src/planner/binder/statement/bind_create_table.cpp +120]
  │   ├── Binder::Bind	[vim src/planner/binder/statement/bind_insert.cpp +24]
  │   ├── Binder::BindCreateViewInfo	[vim src/planner/binder/statement/bind_create.cpp +53]
  │   ├── Binder::BindCreateFunctionInfo	[vim src/planner/binder/statement/bind_create.cpp +72]
  │   ├── Binder::BindSummarize	[vim src/planner/binder/statement/bind_summarize.cpp +70]
  │   ├── Binder::BindNode	[vim src/planner/binder/query_node/bind_select_node.cpp +168]
  │   ├── FetchArrowChunk	[vim tools/pythonpkg/src/pyresult.cpp +281]
  │   └── convert_chunk	[vim tools/nodejs/src/statement.cpp +124]
  ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   └── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  ├── ListCastSwitch	[vim src/common/vector_operations/vector_cast.cpp +492]
  │   └── VectorOperations::TryCast	[vim src/common/vector_operations/vector_cast.cpp +687]
  ├── FillEnum	[vim src/common/vector_operations/vector_cast.cpp +531]
  │   ├── TransformEnum	[vim src/common/vector_operations/vector_cast.cpp +199]
  │   └── FillEnumResultTemplate	[vim src/common/vector_operations/vector_cast.cpp +566]
  ├── IsNullLoop	[vim src/common/vector_operations/null_operations.cpp +13]
  │   ├── VectorOperations::IsNotNull	[vim src/common/vector_operations/null_operations.cpp +33]
  │   └── VectorOperations::IsNull	[vim src/common/vector_operations/null_operations.cpp +37]
  ├── NestedComparisonExecutor	[vim src/common/vector_operations/comparison_operators.cpp +79]
  │   └── Execute	[vim src/common/vector_operations/comparison_operators.cpp +141]
  ├── ReadFromStorageLoop	[vim src/common/vector_operations/vector_storage.cpp +72]
  │   └── VectorOperations::ReadFromStorage	[vim src/common/vector_operations/vector_storage.cpp +80]
  ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +13]
  │   ├── VectorOperations::GenerateSequence	[vim src/common/vector_operations/generators.cpp +27]
  │   └── VectorOperations::GenerateSequence	[vim src/common/vector_operations/generators.cpp +71]
  ├── TemplatedGenerateSequence	[vim src/common/vector_operations/generators.cpp +56]
  │   ├── VectorOperations::GenerateSequence	[vim src/common/vector_operations/generators.cpp +27]
  │   └── VectorOperations::GenerateSequence	[vim src/common/vector_operations/generators.cpp +71]
  ├── DistinctExecuteConstant	[vim src/common/vector_operations/is_distinct_from.cpp +29]
  │   └── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  ├── DistinctExecuteGeneric	[vim src/common/vector_operations/is_distinct_from.cpp +40]
  │   └── DistinctExecuteSwitch	[vim src/common/vector_operations/is_distinct_from.cpp +58]
  ├── DistinctSelectFlat	[vim src/common/vector_operations/is_distinct_from.cpp +211]
  │   └── DistinctSelect	[vim src/common/vector_operations/is_distinct_from.cpp +260]
  ├── DistinctSelectConstant	[vim src/common/vector_operations/is_distinct_from.cpp +235]
  │   └── DistinctSelect	[vim src/common/vector_operations/is_distinct_from.cpp +260]
  ├── NestedDistinctExecute	[vim src/common/vector_operations/is_distinct_from.cpp +751]
  │   └── ExecuteDistinct	[vim src/common/vector_operations/is_distinct_from.cpp +655]
  ├── TemplatedGatherLoop	[vim src/common/row_operations/row_gather.cpp +17]
  │   └── RowOperations::Gather	[vim src/common/row_operations/row_gather.cpp +62]
  ├── GatherNestedVector	[vim src/common/row_operations/row_gather.cpp +45]
  │   └── RowOperations::Gather	[vim src/common/row_operations/row_gather.cpp +62]
  ├── TemplatedFullScanLoop	[vim src/common/row_operations/row_gather.cpp +120]
  │   └── RowOperations::FullScanColumn	[vim src/common/row_operations/row_gather.cpp +141]
  ├── TemplatedHeapGather	[vim src/common/row_operations/row_heap_gather.cpp +10]
  │   └── RowOperations::HeapGather	[vim src/common/row_operations/row_heap_gather.cpp +136]
  ├── HeapGatherStringVector	[vim src/common/row_operations/row_heap_gather.cpp +20]
  │   └── RowOperations::HeapGather	[vim src/common/row_operations/row_heap_gather.cpp +136]
  ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   └── RowOperations::HeapGather	[vim src/common/row_operations/row_heap_gather.cpp +136]
  ├── TemplatedScatter	[vim src/common/row_operations/row_scatter.cpp +21]
  │   └── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   └── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  ├── ScatterNestedVector	[vim src/common/row_operations/row_scatter.cpp +90]
  │   └── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  ├── RowOperations::Scatter	[vim src/common/row_operations/row_scatter.cpp +107]
  │   ├── JoinHashTable::Build	[vim src/execution/join_hashtable.cpp +150]
  │   ├── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  │   └── LocalSortState::SinkChunk	[vim src/common/sort/sort_state.cpp +155]
  ├── RowOperations::InitializeStates	[vim src/common/row_operations/row_aggregate.cpp +16]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── PerfectAggregateHashTable::Combine	[vim src/execution/perfect_aggregate_hashtable.cpp +136]
  │   └── GroupedAggregateHashTable::FindOrCreateGroupsInternal	[vim src/execution/aggregate_hashtable.cpp +367]
  ├── TemplatedMatchType	[vim src/common/row_operations/row_match.cpp +60]
  │   └── TemplatedMatchOp	[vim src/common/row_operations/row_match.cpp +140]
  ├── ComputeListEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +54]
  │   └── RowOperations::ComputeEntrySizes	[vim src/common/row_operations/row_heap_scatter.cpp +97]
  ├── HeapScatterListVector	[vim src/common/row_operations/row_heap_scatter.cpp +266]
  │   └── RowOperations::HeapScatter	[vim src/common/row_operations/row_heap_scatter.cpp +367]
  ├── RadixScatterListVector	[vim src/common/row_operations/row_radix_scatter.cpp +99]
  │   └── RowOperations::RadixScatter	[vim src/common/row_operations/row_radix_scatter.cpp +211]
  ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   ├── CatalogSet::AlterEntry	[vim src/catalog/catalog_set.cpp +104]
  │   └── SchemaCatalogEntry::Alter	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +183]
  ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── Appender::Append	[vim src/main/appender.cpp +122]
  │   ├── Appender::Append	[vim src/main/appender.cpp +127]
  │   ├── Appender::Append	[vim src/main/appender.cpp +132]
  │   ├── Appender::Append	[vim src/main/appender.cpp +137]
  │   ├── Appender::Append	[vim src/main/appender.cpp +142]
  │   ├── Appender::Append	[vim src/main/appender.cpp +147]
  │   ├── Appender::Append	[vim src/main/appender.cpp +152]
  │   ├── Appender::Append	[vim src/main/appender.cpp +157]
  │   ├── Appender::Append	[vim src/main/appender.cpp +162]
  │   ├── Appender::Append	[vim src/main/appender.cpp +167]
  │   ├── Appender::Append	[vim src/main/appender.cpp +172]
  │   ├── Appender::Append	[vim src/main/appender.cpp +176]
  │   ├── Appender::Append	[vim src/main/appender.cpp +181]
  │   ├── Appender::Append	[vim src/main/appender.cpp +186]
  │   ├── Appender::Append	[vim src/main/appender.cpp +194]
  │   ├── Appender::Append	[vim src/main/appender.cpp +202]
  │   ├── Appender::Append	[vim src/main/appender.cpp +207]
  │   ├── Appender::Append	[vim src/main/appender.cpp +212]
  │   ├── Appender::Append	[vim src/main/appender.cpp +217]
  │   └── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── Appender::Append	[vim src/main/appender.cpp +122]
  │   ├── Appender::Append	[vim src/main/appender.cpp +127]
  │   ├── Appender::Append	[vim src/main/appender.cpp +132]
  │   ├── Appender::Append	[vim src/main/appender.cpp +137]
  │   ├── Appender::Append	[vim src/main/appender.cpp +142]
  │   ├── Appender::Append	[vim src/main/appender.cpp +147]
  │   ├── Appender::Append	[vim src/main/appender.cpp +152]
  │   ├── Appender::Append	[vim src/main/appender.cpp +157]
  │   ├── Appender::Append	[vim src/main/appender.cpp +162]
  │   ├── Appender::Append	[vim src/main/appender.cpp +167]
  │   ├── Appender::Append	[vim src/main/appender.cpp +172]
  │   ├── Appender::Append	[vim src/main/appender.cpp +176]
  │   ├── Appender::Append	[vim src/main/appender.cpp +181]
  │   ├── Appender::Append	[vim src/main/appender.cpp +186]
  │   ├── Appender::Append	[vim src/main/appender.cpp +194]
  │   ├── Appender::Append	[vim src/main/appender.cpp +202]
  │   ├── Appender::Append	[vim src/main/appender.cpp +207]
  │   ├── Appender::Append	[vim src/main/appender.cpp +212]
  │   ├── Appender::Append	[vim src/main/appender.cpp +217]
  │   └── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  ├── TemplatedLoopHash	[vim src/common/vector_operations/vector_hash.cpp +40]
  │   └── HashTypeSwitch	[vim src/common/vector_operations/vector_hash.cpp +105]
  ├── ListLoopHash	[vim src/common/vector_operations/vector_hash.cpp +86]
  │   ├── HashTypeSwitch	[vim src/common/vector_operations/vector_hash.cpp +105]
  │   └── CombineHashTypeSwitch	[vim src/common/vector_operations/vector_hash.cpp +241]
  ├── TemplatedLoopCombineHash	[vim src/common/vector_operations/vector_hash.cpp +214]
  │   └── CombineHashTypeSwitch	[vim src/common/vector_operations/vector_hash.cpp +241]
  ├── VectorOperations::AddInPlace	[vim src/common/vector_operations/numeric_inplace_operators.cpp +17]
  │   ├── PerfectAggregateHashTable::AddChunk	[vim src/execution/perfect_aggregate_hashtable.cpp +89]
  │   ├── GroupedAggregateHashTable::AddChunk	[vim src/execution/aggregate_hashtable.cpp +261]
  │   ├── Hugeint::DivMod	[vim src/common/types/hugeint.cpp +257]
  │   ├── Hugeint::Add	[vim src/common/types/hugeint.cpp +366]
  │   ├── Flush	[vim src/common/operator/cast_operators.cpp +1412]
  │   ├── RowOperations::DestroyStates	[vim src/common/row_operations/row_aggregate.cpp +34]
  │   ├── RowOperations::CombineStates	[vim src/common/row_operations/row_aggregate.cpp +71]
  │   └── RowOperations::FinalizeStates	[vim src/common/row_operations/row_aggregate.cpp +89]
  ├── WriteData	[vim src/main/capi/result-c.cpp +7]
  │   ├── StringStatistics::Serialize	[vim src/storage/statistics/string_statistics.cpp +33]
  │   ├── ChunkVectorInfo::Serialize	[vim src/storage/table/chunk_info.cpp +220]
  │   ├── MainHeader::Serialize	[vim src/storage/single_file_block_manager.cpp +18]
  │   ├── Write	[vim src/include/duckdb/common/serializer.hpp +26]
  │   ├── WriteBufferData	[vim src/include/duckdb/common/serializer.hpp +31]
  │   ├── WriteString	[vim src/include/duckdb/common/serializer.hpp +35]
  │   ├── Vector::Serialize	[vim src/common/types/vector.cpp +819]
  │   ├── ClientContext::LogQueryInternal	[vim src/main/client_context.cpp +520]
  │   ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── WriteQuotedString	[vim src/function/table/copy_csv.cpp +342]
  │   ├── WriteCSVInitializeGlobal	[vim src/function/table/copy_csv.cpp +435]
  │   ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  │   ├── WriteCSVCombine	[vim src/function/table/copy_csv.cpp +515]
  │   ├── write_virt	[vim extension/parquet/parquet_writer.cpp +57]
  │   ├── ParquetWriter::ParquetWriter	[vim extension/parquet/parquet_writer.cpp +135]
  │   ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   └── ParquetWriter::Finalize	[vim extension/parquet/parquet_writer.cpp +392]
  ├── duckdb_translate_result	[vim src/main/capi/result-c.cpp +23]
  │   ├── duckdb_execute_prepared	[vim src/main/capi/prepared-c.cpp +163]
  │   └── duckdb_query	[vim src/main/capi/duckdb-c.cpp +65]
  ├── PipelineExecutor::FetchFromSource	[vim src/parallel/pipeline_executor.cpp +304]
  │   ├── PipelineExecutor::Execute	[vim src/parallel/pipeline_executor.cpp +47]
  │   └── PipelineExecutor::ExecutePull	[vim src/parallel/pipeline_executor.cpp +173]
  ├── Window	[vim src/function/aggregate/holistic/mode.cpp +168]
  │   └── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +464]
  │   └── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  ├── Finalize	[vim src/function/aggregate/holistic/quantile.cpp +579]
  │   ├── UncompressedFunctions::FinalizeCompress	[vim src/storage/compression/fixed_size_uncompressed.cpp +103]
  │   ├── RLEFinalizeCompress	[vim src/storage/compression/rle.cpp +239]
  │   ├── FormatSigned	[vim src/include/duckdb/common/types/cast_helpers.hpp +61]
  │   ├── Format	[vim src/include/duckdb/common/types/cast_helpers.hpp +131]
  │   ├── FormatSigned	[vim src/include/duckdb/common/types/cast_helpers.hpp +234]
  │   ├── FormatDecimal	[vim src/include/duckdb/common/types/cast_helpers.hpp +311]
  │   ├── Finalize	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +315]
  │   ├── StateFinalize	[vim src/include/duckdb/function/aggregate_function.hpp +219]
  │   ├── TopNHeap::Combine	[vim src/execution/operator/order/physical_top_n.cpp +242]
  │   ├── TopNHeap::Finalize	[vim src/execution/operator/order/physical_top_n.cpp +258]
  │   ├── TopNHeap::Reduce	[vim src/execution/operator/order/physical_top_n.cpp +262]
  │   ├── PhysicalTopN::Finalize	[vim src/execution/operator/order/physical_top_n.cpp +445]
  │   ├── PhysicalHashAggregate::Finalize	[vim src/execution/operator/aggregate/physical_hash_aggregate.cpp +218]
  │   ├── PhysicalHashJoin::Finalize	[vim src/execution/operator/join/physical_hash_join.cpp +165]
  │   ├── PhysicalDelimJoin::Finalize	[vim src/execution/operator/join/physical_delim_join.cpp +87]
  │   ├── RadixPartitionedHashTable::Combine	[vim src/execution/radix_partitioned_hashtable.cpp +154]
  │   ├── RadixPartitionedHashTable::Finalize	[vim src/execution/radix_partitioned_hashtable.cpp +191]
  │   ├── RadixAggregateFinalizeTask	[vim src/execution/radix_partitioned_hashtable.cpp +258]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_function.cpp +6]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_case.cpp +17]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_cast.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_parameter.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_reference.cpp +6]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_conjunction.cpp +18]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_constant.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_comparison.cpp +11]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_operator.cpp +7]
  │   ├── ExpressionExecutor::InitializeState	[vim src/execution/expression_executor/execute_between.cpp +82]
  │   ├── ReservoirSamplePercentage::GetChunk	[vim src/execution/reservoir_sample.cpp +131]
  │   ├── PartitionableHashTable::ListAddChunk	[vim src/execution/partitionable_hashtable.cpp +66]
  │   ├── PartitionableHashTable::Finalize	[vim src/execution/partitionable_hashtable.cpp +160]
  │   ├── StringHeap::AddBlob	[vim src/common/types/string_heap.cpp +34]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +86]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +104]
  │   ├── StringCast::Operation	[vim src/common/operator/string_cast.cpp +121]
  │   ├── IntegerCastLoop	[vim src/common/operator/cast_operators.cpp +825]
  │   ├── CastFromBlob::Operation	[vim src/common/operator/cast_operators.cpp +1275]
  │   ├── TryCastToBlob::Operation	[vim src/common/operator/cast_operators.cpp +1288]
  │   ├── CastFromUUID::Operation	[vim src/common/operator/cast_operators.cpp +1305]
  │   ├── HandleExponent	[vim src/common/operator/cast_operators.cpp +1536]
  │   ├── ScatterStringVector	[vim src/common/row_operations/row_scatter.cpp +64]
  │   ├── PipelineFinishEvent::FinishEvent	[vim src/parallel/pipeline_finish_event.cpp +13]
  │   ├── Pipeline::Finalize	[vim src/parallel/pipeline.cpp +145]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── ExecuteListFinalize	[vim src/function/aggregate/holistic/quantile.cpp +405]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_sxy.cpp +38]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +31]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_intercept.cpp +44]
  │   ├── Finalize	[vim src/function/aggregate/regression/regr_r2.cpp +43]
  │   ├── ASCIICaseConvert	[vim src/function/scalar/string/caseconvert.cpp +42]
  │   ├── UnicodeCaseConvert	[vim src/function/scalar/string/caseconvert.cpp +108]
  │   ├── Operation	[vim src/function/scalar/string/trim.cpp +15]
  │   ├── BinaryTrimFunction	[vim src/function/scalar/string/trim.cpp +78]
  │   ├── SubstringEmptyString	[vim src/function/scalar/string/substring.cpp +13]
  │   ├── SubstringSlice	[vim src/function/scalar/string/substring.cpp +19]
  │   ├── Operation	[vim src/function/scalar/string/md5.cpp +11]
  │   ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  │   ├── ConcatOperator	[vim src/function/scalar/string/concat.cpp +99]
  │   ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   ├── Operation	[vim src/function/scalar/string/reverse.cpp +34]
  │   ├── StrfTimeFunctionDate	[vim src/function/scalar/date/strftime.cpp +600]
  │   ├── StrfTimeFunctionTimestamp	[vim src/function/scalar/date/strftime.cpp +619]
  │   ├── Operation	[vim src/function/scalar/blob/base64.cpp +8]
  │   ├── Operation	[vim src/function/scalar/blob/base64.cpp +18]
  │   ├── WriteCSVBind	[vim src/function/table/copy_csv.cpp +163]
  │   ├── ReadCSVBind	[vim src/function/table/copy_csv.cpp +191]
  │   ├── QueryProfiler::Finalize	[vim src/main/query_profiler.cpp +66]
  │   ├── QueryProfiler::EndQuery	[vim src/main/query_profiler.cpp +75]
  │   ├── ParquetWriteFinalize	[vim extension/parquet/parquet-extension.cpp +463]
  │   └── DecodePythonUnicode	[vim tools/pythonpkg/src/vector_conversion.cpp +92]
  ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +613]
  │   └── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  ├── Window	[vim src/function/aggregate/holistic/quantile.cpp +966]
  │   └── UnaryWindow	[vim src/include/duckdb/common/vector_operations/aggregate_executor.hpp +337]
  ├── HistogramFinalize	[vim src/function/aggregate/nested/histogram.cpp +105]
  ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  ├── PrintfFunction	[vim src/function/scalar/string/printf.cpp +54]
  ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── StringSplitFunction	[vim src/function/scalar/string/string_split.cpp +243]
  │   └── StringSplitRegexFunction	[vim src/function/scalar/string/string_split.cpp +247]
  ├── ConcatFunction	[vim src/function/scalar/string/concat.cpp +13]
  ├── TemplatedConcatWS	[vim src/function/scalar/string/concat.cpp +118]
  │   └── ConcatWSFunction	[vim src/function/scalar/string/concat.cpp +188]
  ├── NextValFunction	[vim src/function/scalar/sequence/nextval.cpp +84]
  ├── GenerateUUIDFunction	[vim src/function/scalar/uuid/gen_random.cpp +27]
  ├── DateSubFunction	[vim src/function/scalar/date/date_sub.cpp +398]
  ├── DateDiffFunction	[vim src/function/scalar/date/date_diff.cpp +362]
  ├── LeastGreatestFunction	[vim src/function/scalar/generic/least.cpp +15]
  ├── MapFunction	[vim src/function/scalar/map/map.cpp +10]
  ├── FillResult	[vim src/function/scalar/map/map_extract.cpp +8]
  │   └── MapExtractFunction	[vim src/function/scalar/map/map_extract.cpp +22]
  ├── CardinalityFunction	[vim src/function/scalar/map/cardinality.cpp +9]
  ├── RandomFunction	[vim src/function/scalar/math/random.cpp +22]
  ├── SetSeedFunction	[vim src/function/scalar/math/setseed.cpp +23]
  ├── ExecuteSlice	[vim src/function/scalar/list/array_slice.cpp +83]
  │   └── ArraySliceFunction	[vim src/function/scalar/list/array_slice.cpp +139]
  ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  ├── ListRangeFunction	[vim src/function/scalar/list/range.cpp +105]
  ├── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  │   └── ListExtractTemplate	[vim src/function/scalar/list/list_extract.cpp +16]
  ├── ListValueFunction	[vim src/function/scalar/list/list_value.cpp +12]
  ├── DateTruncFunction	[vim src/function/scalar/date/date_trunc.cpp +306]
  ├── RangeDateTimeFunction	[vim src/function/table/range.cpp +182]
  ├── SetValidityMask	[vim src/function/table/arrow.cpp +259]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── ColumnArrowToDuckDBDictionary	[vim src/function/table/arrow.cpp +958]
  │   └── ArrowTableFunction::ArrowToDuckDB	[vim src/function/table/arrow.cpp +985]
  ├── GetValidityMask	[vim src/function/table/arrow.cpp +291]
  │   └── ColumnArrowToDuckDBDictionary	[vim src/function/table/arrow.cpp +958]
  ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   └── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  ├── ArrowToDuckDBBlob	[vim src/function/table/arrow.cpp +392]
  │   └── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   └── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  ├── SetVectorString	[vim src/function/table/arrow.cpp +490]
  │   └── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  ├── TimeConversion	[vim src/function/table/arrow.cpp +512]
  │   └── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  ├── IntervalConversionUs	[vim src/function/table/arrow.cpp +530]
  │   └── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  ├── IntervalConversionMonths	[vim src/function/table/arrow.cpp +546]
  │   └── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── ArrowToDuckDBList	[vim src/function/table/arrow.cpp +315]
  │   ├── ArrowToDuckDBMapList	[vim src/function/table/arrow.cpp +448]
  │   ├── ColumnArrowToDuckDB	[vim src/function/table/arrow.cpp +560]
  │   ├── ColumnArrowToDuckDBDictionary	[vim src/function/table/arrow.cpp +958]
  │   └── ArrowTableFunction::ArrowToDuckDB	[vim src/function/table/arrow.cpp +985]
  ├── WriteCSVSink	[vim src/function/table/copy_csv.cpp +457]
  ├── AddFunction	[vim src/function/table/system/pragma_functions.cpp +61]
  │   ├── CreateAggregateFunctionInfo	[vim src/include/duckdb/parser/parsed_data/create_aggregate_function_info.hpp +17]
  │   ├── FirstFun::RegisterFunction	[vim src/function/aggregate/distributive/first.cpp +295]
  │   ├── SumFun::RegisterFunction	[vim src/function/aggregate/distributive/sum.cpp +165]
  │   ├── BuiltinFunctions::AddFunction	[vim src/function/function.cpp +90]
  │   ├── BoolOrFun::RegisterFunction	[vim src/function/aggregate/distributive/bool.cpp +108]
  │   ├── BoolAndFun::RegisterFunction	[vim src/function/aggregate/distributive/bool.cpp +115]
  │   ├── EntropyFun::RegisterFunction	[vim src/function/aggregate/distributive/entropy.cpp +149]
  │   ├── StringAggFun::RegisterFunction	[vim src/function/aggregate/distributive/string_agg.cpp +115]
  │   ├── BitAndFun::RegisterFunction	[vim src/function/aggregate/distributive/bitagg.cpp +93]
  │   ├── BitOrFun::RegisterFunction	[vim src/function/aggregate/distributive/bitagg.cpp +153]
  │   ├── BitXorFun::RegisterFunction	[vim src/function/aggregate/distributive/bitagg.cpp +213]
  │   ├── GetArgMinMaxFunction	[vim src/function/aggregate/distributive/arg_min_max.cpp +136]
  │   ├── ArgMaxFun::RegisterFunction	[vim src/function/aggregate/distributive/arg_min_max.cpp +225]
  │   ├── ApproxCountDistinctFun::RegisterFunction	[vim src/function/aggregate/distributive/approx_count.cpp +138]
  │   ├── CountFun::RegisterFunction	[vim src/function/aggregate/distributive/count.cpp +80]
  │   ├── CountStarFun::RegisterFunction	[vim src/function/aggregate/distributive/count.cpp +92]
  │   ├── KurtosisFun::RegisterFunction	[vim src/function/aggregate/distributive/kurtosis.cpp +87]
  │   ├── SkewFun::RegisterFunction	[vim src/function/aggregate/distributive/skew.cpp +78]
  │   ├── ApproximateQuantileFun::RegisterFunction	[vim src/function/aggregate/holistic/approximate_quantile.cpp +157]
  │   ├── ReservoirQuantileFun::RegisterFunction	[vim src/function/aggregate/holistic/reservoir_quantile.cpp +225]
  │   ├── ModeFun::RegisterFunction	[vim src/function/aggregate/holistic/mode.cpp +292]
  │   ├── QuantileFun::RegisterFunction	[vim src/function/aggregate/holistic/quantile.cpp +1219]
  │   ├── StdDevSampFun::RegisterFunction	[vim src/function/aggregate/algebraic/stddev.cpp +9]
  │   ├── StdDevPopFun::RegisterFunction	[vim src/function/aggregate/algebraic/stddev.cpp +20]
  │   ├── VarPopFun::RegisterFunction	[vim src/function/aggregate/algebraic/stddev.cpp +27]
  │   ├── VarSampFun::RegisterFunction	[vim src/function/aggregate/algebraic/stddev.cpp +34]
  │   ├── AvgFun::RegisterFunction	[vim src/function/aggregate/algebraic/avg.cpp +182]
  │   ├── CovarPopFun::RegisterFunction	[vim src/function/aggregate/algebraic/covar.cpp +11]
  │   ├── CovarSampFun::RegisterFunction	[vim src/function/aggregate/algebraic/covar.cpp +18]
  │   ├── Corr::RegisterFunction	[vim src/function/aggregate/algebraic/corr.cpp +8]
  │   ├── ProductFun::RegisterFunction	[vim src/function/aggregate/distributive/product.cpp +63]
  │   ├── AddMinMaxOperator	[vim src/function/aggregate/distributive/minmax.cpp +524]
  │   ├── MinFun::RegisterFunction	[vim src/function/aggregate/distributive/minmax.cpp +543]
  │   ├── MaxFun::RegisterFunction	[vim src/function/aggregate/distributive/minmax.cpp +549]
  │   ├── HistogramFun::RegisterFunction	[vim src/function/aggregate/nested/histogram.cpp +229]
  │   ├── ListFun::RegisterFunction	[vim src/function/aggregate/nested/list.cpp +113]
  │   ├── RegrSXYFun::RegisterFunction	[vim src/function/aggregate/regression/regr_sxy.cpp +50]
  │   ├── RegrSXXFun::RegisterFunction	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +69]
  │   ├── RegrSYYFun::RegisterFunction	[vim src/function/aggregate/regression/regr_sxx_syy.cpp +76]
  │   ├── RegrSlopeFun::RegisterFunction	[vim src/function/aggregate/regression/regr_slope.cpp +15]
  │   ├── RegrInterceptFun::RegisterFunction	[vim src/function/aggregate/regression/regr_intercept.cpp +60]
  │   ├── RegrCountFun::RegisterFunction	[vim src/function/aggregate/regression/regr_count.cpp +10]
  │   ├── RegrR2Fun::RegisterFunction	[vim src/function/aggregate/regression/regr_r2.cpp +69]
  │   ├── RegrAvgxFun::RegisterFunction	[vim src/function/aggregate/regression/regr_avg.cpp +56]
  │   ├── RegrAvgyFun::RegisterFunction	[vim src/function/aggregate/regression/regr_avg.cpp +63]
  │   ├── ReplaceFun::RegisterFunction	[vim src/function/scalar/string/replace.cpp +79]
  │   ├── NFCNormalizeFun::RegisterFunction	[vim src/function/scalar/string/nfc_normalize.cpp +34]
  │   ├── LowerFun::RegisterFunction	[vim src/function/scalar/string/caseconvert.cpp +171]
  │   ├── UpperFun::RegisterFunction	[vim src/function/scalar/string/caseconvert.cpp +175]
  │   ├── SuffixFun::RegisterFunction	[vim src/function/scalar/string/suffix.cpp +43]
  │   ├── PrintfFun::RegisterFunction	[vim src/function/scalar/string/printf.cpp +151]
  │   ├── MismatchesFun::RegisterFunction	[vim src/function/scalar/string/mismatches.cpp +41]
  │   ├── CHR::RegisterFunction	[vim src/function/scalar/string/chr.cpp +19]
  │   ├── PrefixFun::RegisterFunction	[vim src/function/scalar/string/prefix.cpp +68]
  │   ├── TrimFun::RegisterFunction	[vim src/function/scalar/string/trim.cpp +128]
  │   ├── InstrFun::RegisterFunction	[vim src/function/scalar/string/instr.cpp +56]
  │   ├── LpadFun::RegisterFunction	[vim src/function/scalar/string/pad.cpp +133]
  │   ├── RpadFun::RegisterFunction	[vim src/function/scalar/string/pad.cpp +141]
  │   ├── ContainsFun::RegisterFunction	[vim src/function/scalar/string/contains.cpp +161]
  │   ├── RepeatFun::RegisterFunction	[vim src/function/scalar/string/repeat.cpp +36]
  │   ├── LevenshteinFun::RegisterFunction	[vim src/function/scalar/string/levenshtein.cpp +81]
  │   ├── JaccardFun::RegisterFunction	[vim src/function/scalar/string/jaccard.cpp +61]
  │   ├── RegularLikeFunction	[vim src/function/scalar/string/like.cpp +450]
  │   ├── LikeEscapeFun::RegisterFunction	[vim src/function/scalar/string/like.cpp +484]
  │   ├── SubstringFun::RegisterFunction	[vim src/function/scalar/string/substring.cpp +187]
  │   ├── StripAccentsFun::RegisterFunction	[vim src/function/scalar/string/strip_accents.cpp +43]
  │   ├── StringSplitFun::RegisterFunction	[vim src/function/scalar/string/string_split.cpp +251]
  │   ├── MD5Fun::RegisterFunction	[vim src/function/scalar/string/md5.cpp +27]
  │   ├── LengthFun::RegisterFunction	[vim src/function/scalar/string/length.cpp +73]
  │   ├── UnicodeFun::RegisterFunction	[vim src/function/scalar/string/length.cpp +114]
  │   ├── ConcatFun::RegisterFunction	[vim src/function/scalar/string/concat.cpp +230]
  │   ├── LeftFun::RegisterFunction	[vim src/function/scalar/string/left_right.cpp +28]
  │   ├── RightFun::RegisterFunction	[vim src/function/scalar/string/left_right.cpp +54]
  │   ├── ASCII::RegisterFunction	[vim src/function/scalar/string/ascii.cpp +19]
  │   ├── StructExtractFun::RegisterFunction	[vim src/function/scalar/struct/struct_extract.cpp +120]
  │   ├── StructPackFun::RegisterFunction	[vim src/function/scalar/struct/struct_pack.cpp +72]
  │   ├── NextvalFun::RegisterFunction	[vim src/function/scalar/sequence/nextval.cpp +136]
  │   ├── CurrvalFun::RegisterFunction	[vim src/function/scalar/sequence/nextval.cpp +141]
  │   ├── UUIDFun::RegisterFunction	[vim src/function/scalar/uuid/gen_random.cpp +67]
  │   ├── ReverseFun::RegisterFunction	[vim src/function/scalar/string/reverse.cpp +52]
  │   ├── CurrentTimeFun::RegisterFunction	[vim src/function/scalar/date/current.cpp +55]
  │   ├── CurrentDateFun::RegisterFunction	[vim src/function/scalar/date/current.cpp +59]
  │   ├── CurrentTimestampFun::RegisterFunction	[vim src/function/scalar/date/current.cpp +63]
  │   ├── DateSubFun::RegisterFunction	[vim src/function/scalar/date/date_sub.cpp +419]
  │   ├── ToIntervalFun::RegisterFunction	[vim src/function/scalar/date/to_interval.cpp +110]
  │   ├── AgeFun::RegisterFunction	[vim src/function/scalar/date/age.cpp +28]
  │   ├── StrfTimeFun::RegisterFunction	[vim src/function/scalar/date/strftime.cpp +641]
  │   ├── StrpTimeFun::RegisterFunction	[vim src/function/scalar/date/strftime.cpp +1182]
  │   ├── EpochFun::RegisterFunction	[vim src/function/scalar/date/epoch.cpp +36]
  │   ├── DateDiffFun::RegisterFunction	[vim src/function/scalar/date/date_diff.cpp +383]
  │   ├── AddGenericDatePartOperator	[vim src/function/scalar/date/date_part.cpp +702]
  │   ├── AddGenericTimePartOperator	[vim src/function/scalar/date/date_part.cpp +722]
  │   ├── DatePartFun::RegisterFunction	[vim src/function/scalar/date/date_part.cpp +777]
  │   ├── SystemFun::RegisterFunction	[vim src/function/scalar/system/system_functions.cpp +71]
  │   ├── AliasFun::RegisterFunction	[vim src/function/scalar/generic/alias.cpp +12]
  │   ├── TypeOfFun::RegisterFunction	[vim src/function/scalar/generic/typeof.cpp +10]
  │   ├── StatsFun::RegisterFunction	[vim src/function/scalar/generic/stats.cpp +43]
  │   ├── CurrentSettingFun::RegisterFunction	[vim src/function/scalar/generic/current_setting.cpp +63]
  │   ├── RegisterLeastGreatest	[vim src/function/scalar/generic/least.cpp +98]
  │   ├── MapFun::RegisterFunction	[vim src/function/scalar/map/map.cpp +81]
  │   ├── MapExtractFun::RegisterFunction	[vim src/function/scalar/map/map_extract.cpp +85]
  │   ├── CardinalityFun::RegisterFunction	[vim src/function/scalar/map/cardinality.cpp +50]
  │   ├── RandomFun::RegisterFunction	[vim src/function/scalar/math/random.cpp +40]
  │   ├── NextAfterFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +114]
  │   ├── AbsFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +151]
  │   ├── BitCountFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +180]
  │   ├── SignFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +209]
  │   ├── CeilFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +285]
  │   ├── FloorFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +341]
  │   ├── RoundFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +543]
  │   ├── ExpFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +586]
  │   ├── PowFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +601]
  │   ├── SqrtFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +623]
  │   ├── CbrtFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +638]
  │   ├── LnFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +654]
  │   ├── Log10Fun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +669]
  │   ├── Log2Fun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +684]
  │   ├── PiFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +698]
  │   ├── DegreesFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +712]
  │   ├── RadiansFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +727]
  │   ├── SinFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +742]
  │   ├── CosFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +757]
  │   ├── TanFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +772]
  │   ├── AsinFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +790]
  │   ├── AtanFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +805]
  │   ├── Atan2Fun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +820]
  │   ├── AcosFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +835]
  │   ├── CotFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +850]
  │   ├── GammaFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +865]
  │   ├── LogGammaFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +880]
  │   ├── FactorialFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +900]
  │   ├── EvenFun::RegisterFunction	[vim src/function/scalar/math/numeric.cpp +930]
  │   ├── SetseedFun::RegisterFunction	[vim src/function/scalar/math/setseed.cpp +49]
  │   ├── Base64Fun::RegisterFunction	[vim src/function/scalar/blob/base64.cpp +37]
  │   ├── EncodeFun::RegisterFunction	[vim src/function/scalar/blob/encode.cpp +31]
  │   ├── ArraySliceFun::RegisterFunction	[vim src/function/scalar/list/array_slice.cpp +190]
  │   ├── ListConcatFun::RegisterFunction	[vim src/function/scalar/list/list_concat.cpp +132]
  │   ├── ListRangeFun::RegisterFunction	[vim src/function/scalar/list/range.cpp +154]
  │   ├── ListExtractFun::RegisterFunction	[vim src/function/scalar/list/list_extract.cpp +229]
  │   ├── ListValueFun::RegisterFunction	[vim src/function/scalar/list/list_value.cpp +64]
  │   ├── DateTruncFun::RegisterFunction	[vim src/function/scalar/date/date_trunc.cpp +326]
  │   ├── AddFun::RegisterFunction	[vim src/function/scalar/operators/arithmetic.cpp +310]
  │   ├── SubtractFun::RegisterFunction	[vim src/function/scalar/operators/arithmetic.cpp +500]
  │   ├── MultiplyFun::RegisterFunction	[vim src/function/scalar/operators/arithmetic.cpp +632]
  │   ├── DivideFun::RegisterFunction	[vim src/function/scalar/operators/arithmetic.cpp +760]
  │   ├── ModFun::RegisterFunction	[vim src/function/scalar/operators/arithmetic.cpp +800]
  │   ├── BitwiseAndFun::RegisterFunction	[vim src/function/scalar/operators/bitwise.cpp +90]
  │   ├── BitwiseOrFun::RegisterFunction	[vim src/function/scalar/operators/bitwise.cpp +109]
  │   ├── BitwiseXorFun::RegisterFunction	[vim src/function/scalar/operators/bitwise.cpp +128]
  │   ├── LeftShiftFun::RegisterFunction	[vim src/function/scalar/operators/bitwise.cpp +152]
  │   ├── RightShiftFun::RegisterFunction	[vim src/function/scalar/operators/bitwise.cpp +171]
  │   ├── BitwiseNotFun::RegisterFunction	[vim src/function/scalar/operators/bitwise.cpp +190]
  │   ├── RegisterEnableProfiling	[vim src/function/pragma/pragma_functions.cpp +58]
  │   ├── PragmaFunctions::RegisterFunction	[vim src/function/pragma/pragma_functions.cpp +294]
  │   ├── PragmaQueries::RegisterFunction	[vim src/function/pragma/pragma_queries.cpp +72]
  │   ├── ReadCSVTableFunction::RegisterFunction	[vim src/function/table/read_csv.cpp +248]
  │   ├── UnnestTableFunction::RegisterFunction	[vim src/function/table/unnest.cpp +48]
  │   ├── SummaryTableFunction::RegisterFunction	[vim src/function/table/summary.cpp +49]
  │   ├── RangeTableFunction::RegisterFunction	[vim src/function/table/range.cpp +207]
  │   ├── PragmaVersion::RegisterFunction	[vim src/function/table/version/pragma_version.cpp +43]
  │   ├── PragmaCollations::RegisterFunction	[vim src/function/table/system/pragma_collations.cpp +59]
  │   ├── DuckDBDependenciesFun::RegisterFunction	[vim src/function/table/system/duckdb_dependencies.cpp +118]
  │   ├── DuckDBViewsFun::RegisterFunction	[vim src/function/table/system/duckdb_views.cpp +108]
  │   ├── DuckDBSequencesFun::RegisterFunction	[vim src/function/table/system/duckdb_sequences.cpp +126]
  │   ├── PragmaTableInfo::RegisterFunction	[vim src/function/table/system/pragma_table_info.cpp +177]
  │   ├── PragmaDatabaseList::RegisterFunction	[vim src/function/table/system/pragma_database_list.cpp +52]
  │   ├── PragmaStorageInfo::RegisterFunction	[vim src/function/table/system/pragma_storage_info.cpp +125]
  │   ├── DuckDBTypesFun::RegisterFunction	[vim src/function/table/system/duckdb_types.cpp +133]
  │   ├── DuckDBConstraintsFun::RegisterFunction	[vim src/function/table/system/duckdb_constraints.cpp +202]
  │   ├── DuckDBTablesFun::RegisterFunction	[vim src/function/table/system/duckdb_tables.cpp +152]
  │   ├── PragmaDatabaseSize::RegisterFunction	[vim src/function/table/system/pragma_database_size.cpp +96]
  │   ├── DuckDBSchemasFun::RegisterFunction	[vim src/function/table/system/duckdb_schemas.cpp +80]
  │   ├── DuckDBIndexesFun::RegisterFunction	[vim src/function/table/system/duckdb_indexes.cpp +120]
  │   ├── DuckDBColumnsFun::RegisterFunction	[vim src/function/table/system/duckdb_columns.cpp +327]
  │   ├── GlobTableFunction::RegisterFunction	[vim src/function/table/glob.cpp +52]
  │   ├── CheckpointFunction::RegisterFunction	[vim src/function/table/checkpoint.cpp +25]
  │   ├── RepeatTableFunction::RegisterFunction	[vim src/function/table/repeat.cpp +51]
  │   ├── PragmaDetailedProfilingOutput::RegisterFunction	[vim src/function/table/pragma_detailed_profiling_output.cpp +171]
  │   ├── ArrowTableFunction::RegisterFunction	[vim src/function/table/arrow.cpp +1115]
  │   ├── CSVCopyFunction::RegisterFunction	[vim src/function/table/copy_csv.cpp +527]
  │   ├── PragmaLastProfilingOutput::RegisterFunction	[vim src/function/table/pragma_last_profiling_output.cpp +99]
  │   ├── PragmaFunctionsFunction	[vim src/function/table/system/pragma_functions.cpp +80]
  │   ├── PragmaFunctionPragma::RegisterFunction	[vim src/function/table/system/pragma_functions.cpp +119]
  │   ├── CreateFunction	[vim examples/standalone-plan/main.cpp +161]
  │   ├── CreateAggregateFunction	[vim examples/standalone-plan/main.cpp +174]
  │   └── GetFunctionSet	[vim extension/parquet/parquet-extension.cpp +61]
  ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   ├── CommitState::WriteDelete	[vim src/transaction/commit_state.cpp +133]
  │   └── CommitState::CommitEntry	[vim src/transaction/commit_state.cpp +206]
  ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   ├── CommitState::WriteUpdate	[vim src/transaction/commit_state.cpp +151]
  │   └── CommitState::CommitEntry	[vim src/transaction/commit_state.cpp +206]
  ├── main	[vim examples/standalone-window/main.cpp +14]
  ├── AppendValueInternal	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +64]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── Appender::Append	[vim src/main/appender.cpp +122]
  │   ├── Appender::Append	[vim src/main/appender.cpp +127]
  │   ├── Appender::Append	[vim src/main/appender.cpp +132]
  │   ├── Appender::Append	[vim src/main/appender.cpp +137]
  │   ├── Appender::Append	[vim src/main/appender.cpp +142]
  │   ├── Appender::Append	[vim src/main/appender.cpp +147]
  │   ├── Appender::Append	[vim src/main/appender.cpp +152]
  │   ├── Appender::Append	[vim src/main/appender.cpp +157]
  │   ├── Appender::Append	[vim src/main/appender.cpp +162]
  │   ├── Appender::Append	[vim src/main/appender.cpp +167]
  │   ├── Appender::Append	[vim src/main/appender.cpp +172]
  │   ├── Appender::Append	[vim src/main/appender.cpp +176]
  │   ├── Appender::Append	[vim src/main/appender.cpp +181]
  │   ├── Appender::Append	[vim src/main/appender.cpp +186]
  │   ├── Appender::Append	[vim src/main/appender.cpp +194]
  │   ├── Appender::Append	[vim src/main/appender.cpp +202]
  │   ├── Appender::Append	[vim src/main/appender.cpp +207]
  │   ├── Appender::Append	[vim src/main/appender.cpp +212]
  │   ├── Appender::Append	[vim src/main/appender.cpp +217]
  │   └── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── Index::Append	[vim src/storage/index.cpp +32]
  │   ├── DataTable::Append	[vim src/storage/data_table.cpp +469]
  │   ├── DataTable::Append	[vim src/storage/data_table.cpp +508]
  │   ├── DataTable::AppendToIndexes	[vim src/storage/data_table.cpp +681]
  │   ├── ReplayState::ReplayInsert	[vim src/storage/wal_replay.cpp +427]
  │   ├── UncompressedFunctions::Compress	[vim src/storage/compression/fixed_size_uncompressed.cpp +79]
  │   ├── RLECompress	[vim src/storage/compression/rle.cpp +230]
  │   ├── LocalStorage::Append	[vim src/storage/local_storage.cpp +165]
  │   ├── LocalStorage::Flush	[vim src/storage/local_storage.cpp +369]
  │   ├── ListColumnData::Append	[vim src/storage/table/list_column_data.cpp +153]
  │   ├── ListColumnData::FetchRow	[vim src/storage/table/list_column_data.cpp +234]
  │   ├── RowGroup::AlterType	[vim src/storage/table/row_group.cpp +110]
  │   ├── RowGroup::AddColumn	[vim src/storage/table/row_group.cpp +156]
  │   ├── RowGroup::AppendVersionInfo	[vim src/storage/table/row_group.cpp +503]
  │   ├── RowGroup::Append	[vim src/storage/table/row_group.cpp +592]
  │   ├── ColumnData::AppendData	[vim src/storage/table/column_data.cpp +232]
  │   ├── StructColumnData::Append	[vim src/storage/table/struct_column_data.cpp +107]
  │   ├── AppendRowRecursive	[vim src/include/duckdb/main/appender.hpp +94]
  │   ├── InClauseRewriter::VisitReplace	[vim src/optimizer/in_clause_rewriter.cpp +26]
  │   ├── PhysicalExpressionScan::GetData	[vim src/execution/operator/scan/physical_expression_scan.cpp +41]
  │   ├── PhysicalCreateTableAs::Sink	[vim src/execution/operator/schema/physical_create_table_as.cpp +36]
  │   ├── PhysicalRecursiveCTE::Sink	[vim src/execution/operator/set/physical_recursive_cte.cpp +60]
  │   ├── TopNSortState::Sink	[vim src/execution/operator/order/physical_top_n.cpp +120]
  │   ├── TopNHeap::ExtractBoundaryValues	[vim src/execution/operator/order/physical_top_n.cpp +295]
  │   ├── MaterializeExpressions	[vim src/execution/operator/aggregate/physical_window.cpp +395]
  │   ├── SortCollectionForPartition	[vim src/execution/operator/aggregate/physical_window.cpp +428]
  │   ├── ScanSortedPartition	[vim src/execution/operator/aggregate/physical_window.cpp +532]
  │   ├── ComputeWindowExpression	[vim src/execution/operator/aggregate/physical_window.cpp +977]
  │   ├── PhysicalWindow::Sink	[vim src/execution/operator/aggregate/physical_window.cpp +1311]
  │   ├── PhysicalCrossProduct::Sink	[vim src/execution/operator/join/physical_cross_product.cpp +30]
  │   ├── PhysicalNestedLoopJoin::Sink	[vim src/execution/operator/join/physical_nested_loop_join.cpp +144]
  │   ├── PhysicalPiecewiseMergeJoin::Sink	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +76]
  │   ├── PhysicalBlockwiseNLJoin::Sink	[vim src/execution/operator/join/physical_blockwise_nl_join.cpp +46]
  │   ├── Merge	[vim src/execution/operator/join/physical_delim_join.cpp +41]
  │   ├── Append	[vim src/execution/operator/join/physical_delim_join.cpp +52]
  │   ├── PhysicalDelimJoin::Sink	[vim src/execution/operator/join/physical_delim_join.cpp +72]
  │   ├── PhysicalUpdate::Sink	[vim src/execution/operator/persistent/physical_update.cpp +46]
  │   ├── PhysicalInsert::Sink	[vim src/execution/operator/persistent/physical_insert.cpp +41]
  │   ├── PhysicalLimit::Sink	[vim src/execution/operator/helper/physical_limit.cpp +49]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_show_select.cpp +8]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_expression_get.cpp +8]
  │   ├── PhysicalPlanGenerator::CreatePlan	[vim src/execution/physical_plan/plan_explain.cpp +10]
  │   ├── ExpressionExecutor::FillSwitch	[vim src/execution/expression_executor/execute_case.cpp +114]
  │   ├── SelectNotNull	[vim src/execution/expression_executor/execute_comparison.cpp +153]
  │   ├── ReservoirSample::FillReservoir	[vim src/execution/reservoir_sample.cpp +51]
  │   ├── ResultArrowArrayStreamWrapper::MyStreamGetNext	[vim src/common/arrow_wrapper.cpp +91]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +24]
  │   ├── ChunkCollection::Merge	[vim src/common/types/chunk_collection.cpp +30]
  │   ├── ChunkCollection::Append	[vim src/common/types/chunk_collection.cpp +56]
  │   ├── ListVector::Append	[vim src/common/types/vector.cpp +1545]
  │   ├── ListVector::Append	[vim src/common/types/vector.cpp +1554]
  │   ├── VectorOperations::Copy	[vim src/common/vector_operations/vector_copy.cpp +26]
  │   ├── DistinctSelectNotNull	[vim src/common/vector_operations/is_distinct_from.cpp +285]
  │   ├── DistinctSelectList	[vim src/common/vector_operations/is_distinct_from.cpp +518]
  │   ├── HeapGatherListVector	[vim src/common/row_operations/row_heap_gather.cpp +56]
  │   ├── Appender::FlushChunk	[vim src/main/appender.cpp +243]
  │   ├── Appender::Flush	[vim src/main/appender.cpp +254]
  │   ├── ClientContext::ExecutePreparedStatement	[vim src/main/client_context.cpp +226]
  │   ├── ClientContext::Append	[vim src/main/client_context.cpp +837]
  │   ├── Connection::Append	[vim src/main/connection.cpp +109]
  │   ├── Connection::Append	[vim src/main/connection.cpp +115]
  │   ├── StreamQueryResult::Materialize	[vim src/main/stream_query_result.cpp +43]
  │   ├── duckdb_append_internal	[vim src/main/capi/appender-c.cpp +91]
  │   ├── PipelineExecutor::CacheChunk	[vim src/parallel/pipeline_executor.cpp +152]
  │   ├── ListUpdateFunction	[vim src/function/aggregate/nested/list.cpp +29]
  │   ├── ListCombineFunction	[vim src/function/aggregate/nested/list.cpp +51]
  │   ├── ListFinalize	[vim src/function/aggregate/nested/list.cpp +69]
  │   ├── SimpleUpdate	[vim src/function/aggregate/sorted_aggregate_function.cpp +113]
  │   ├── ScatterUpdate	[vim src/function/aggregate/sorted_aggregate_function.cpp +125]
  │   ├── Combine	[vim src/function/aggregate/sorted_aggregate_function.cpp +177]
  │   ├── StringSplitExecutor	[vim src/function/scalar/string/string_split.cpp +192]
  │   ├── ListConcatFunction	[vim src/function/scalar/list/list_concat.cpp +10]
  │   ├── ExtractFunctions	[vim src/function/table/pragma_detailed_profiling_output.cpp +87]
  │   ├── PragmaDetailedProfilingOutputFunction	[vim src/function/table/pragma_detailed_profiling_output.cpp +110]
  │   ├── PragmaLastProfilingOutputFunction	[vim src/function/table/pragma_last_profiling_output.cpp +64]
  │   ├── ByteSinkUtil::appendChange	[vim extension/icu/icu-collate.cpp +3581]
  │   ├── ByteSinkUtil::appendCodePoint	[vim extension/icu/icu-collate.cpp +3631]
  │   ├── ByteSinkUtil::appendTwoBytes	[vim extension/icu/icu-collate.cpp +3646]
  │   ├── ByteSinkUtil::appendNonEmptyUnchanged	[vim extension/icu/icu-collate.cpp +3653]
  │   ├── BytesTrie::append	[vim extension/icu/icu-collate.cpp +4896]
  │   ├── FilteredNormalizer2::normalizeUTF8	[vim extension/icu/icu-collate.cpp +23568]
  │   ├── Locale::getKeywordValue	[vim extension/icu/icu-collate.cpp +37837]
  │   ├── Locale::getUnicodeKeywordValue	[vim extension/icu/icu-collate.cpp +37898]
  │   ├── createTagStringWithAlternates	[vim extension/icu/icu-collate.cpp +38195]
  │   ├── _uloc_addLikelySubtags	[vim extension/icu/icu-collate.cpp +38851]
  │   ├── _uloc_minimizeSubtags	[vim extension/icu/icu-collate.cpp +38931]
  │   ├── if	[vim extension/icu/icu-collate.cpp +44201]
  │   ├── appendCodePointDelta	[vim extension/icu/icu-collate.cpp +45093]
  │   ├── Flush	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +51]
  │   ├── AppendValue	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +121]
  │   ├── append_varchar	[vim extension/tpcds/dsdgen/append_info-c.cpp +32]
  │   ├── append_key	[vim extension/tpcds/dsdgen/append_info-c.cpp +47]
  │   ├── append_integer	[vim extension/tpcds/dsdgen/append_info-c.cpp +52]
  │   ├── append_boolean	[vim extension/tpcds/dsdgen/append_info-c.cpp +57]
  │   ├── append_decimal	[vim extension/tpcds/dsdgen/append_info-c.cpp +71]
  │   ├── Flush	[vim extension/tpch/dbgen/dbgen.cpp +122]
  │   ├── ParquetWriteSink	[vim extension/parquet/parquet-extension.cpp +440]
  │   ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── ParquetMetaDataOperatorData::LoadFileMetaData	[vim extension/parquet/parquet_metadata.cpp +160]
  │   ├── ParquetMetaDataOperatorData::LoadSchemaData	[vim extension/parquet/parquet_metadata.cpp +348]
  │   ├── NumpyResultConversion::Append	[vim tools/pythonpkg/src/array_wrapper.cpp +663]
  │   ├── MapFunction::MapFunctionExec	[vim tools/pythonpkg/src/map.cpp +76]
  │   ├── DuckDBPyResult::FetchNumpyInternal	[vim tools/pythonpkg/src/pyresult.cpp +207]
  │   ├── FetchArrowChunk	[vim tools/rpkg/src/statement.cpp +527]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1boolean	[vim tools/jdbc/src/jni/duckdb_java.cpp +458]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1byte	[vim tools/jdbc/src/jni/duckdb_java.cpp +468]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1short	[vim tools/jdbc/src/jni/duckdb_java.cpp +478]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1int	[vim tools/jdbc/src/jni/duckdb_java.cpp +488]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1long	[vim tools/jdbc/src/jni/duckdb_java.cpp +498]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1float	[vim tools/jdbc/src/jni/duckdb_java.cpp +508]
  │   ├── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1double	[vim tools/jdbc/src/jni/duckdb_java.cpp +518]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1string	[vim tools/jdbc/src/jni/duckdb_java.cpp +528]
  ├── AppendValue	[vim extension/tpch/dbgen/dbgen.cpp +131]
  │   ├── Appender::AppendValueInternal	[vim src/main/appender.cpp +69]
  │   ├── Appender::Append	[vim src/main/appender.cpp +222]
  │   ├── Append	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +69]
  │   ├── append_value	[vim extension/tpcds/dsdgen/append_info-c.cpp +42]
  │   ├── AppendString	[vim extension/tpch/dbgen/dbgen.cpp +137]
  │   ├── append_value	[vim extension/tpch/dbgen/dbgen.cpp +152]
  │   ├── append_decimal	[vim extension/tpch/dbgen/dbgen.cpp +160]
  │   └── append_date	[vim extension/tpch/dbgen/dbgen.cpp +164]
  ├── Offsets	[vim extension/parquet/include/templated_column_reader.hpp +45]
  │   └── ColumnReader::Read	[vim extension/parquet/column_reader.cpp +277]
  ├── Plain	[vim extension/parquet/include/templated_column_reader.hpp +69]
  │   └── ColumnReader::Read	[vim extension/parquet/column_reader.cpp +277]
  ├── TemplatedFilterOperation	[vim extension/parquet/parquet_reader.cpp +424]
  │   └── FilterOperationSwitch	[vim extension/parquet/parquet_reader.cpp +444]
  ├── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  │   ├── ValidityStatistics::Deserialize	[vim src/storage/statistics/validity_statistics.cpp +53]
  │   ├── StringStatistics::Deserialize	[vim src/storage/statistics/string_statistics.cpp +42]
  │   ├── StructStatistics::Deserialize	[vim src/storage/statistics/struct_statistics.cpp +59]
  │   ├── BaseStatistics::Deserialize	[vim src/storage/statistics/base_statistics.cpp +92]
  │   ├── BlockHandle::Load	[vim src/storage/buffer_manager.cpp +37]
  │   ├── BufferManager::ReadTemporaryBuffer	[vim src/storage/buffer_manager.cpp +429]
  │   ├── TableDataReader::ReadTableData	[vim src/storage/checkpoint/table_data_reader.cpp +22]
  │   ├── CheckpointManager::LoadFromStorage	[vim src/storage/checkpoint_manager.cpp +101]
  │   ├── CheckpointManager::ReadSchema	[vim src/storage/checkpoint_manager.cpp +192]
  │   ├── CheckpointManager::ReadTable	[vim src/storage/checkpoint_manager.cpp +301]
  │   ├── WriteAheadLog::Replay	[vim src/storage/wal_replay.cpp +66]
  │   ├── ReplayState::ReplayDropTable	[vim src/storage/wal_replay.cpp +237]
  │   ├── ReplayState::ReplayDropView	[vim src/storage/wal_replay.cpp +273]
  │   ├── ReplayState::ReplayCreateSchema	[vim src/storage/wal_replay.cpp +288]
  │   ├── ReplayState::ReplayDropSchema	[vim src/storage/wal_replay.cpp +299]
  │   ├── ReplayState::ReplayCreateType	[vim src/storage/wal_replay.cpp +315]
  │   ├── ReplayState::ReplayDropType	[vim src/storage/wal_replay.cpp +330]
  │   ├── ReplayState::ReplayDropSequence	[vim src/storage/wal_replay.cpp +357]
  │   ├── ReplayState::ReplaySequenceValue	[vim src/storage/wal_replay.cpp +370]
  │   ├── ReplayState::ReplayDropMacro	[vim src/storage/wal_replay.cpp +401]
  │   ├── ReplayState::ReplayUseTable	[vim src/storage/wal_replay.cpp +417]
  │   ├── ReplayState::ReplayUpdate	[vim src/storage/wal_replay.cpp +463]
  │   ├── ReplayState::ReplayCheckpoint	[vim src/storage/wal_replay.cpp +491]
  │   ├── RowGroup::DeserializeDeletes	[vim src/storage/table/row_group.cpp +709]
  │   ├── RowGroup::Deserialize	[vim src/storage/table/row_group.cpp +739]
  │   ├── ColumnData::DeserializeColumn	[vim src/storage/table/column_data.cpp +380]
  │   ├── ChunkInfo::Deserialize	[vim src/storage/table/chunk_info.cpp +31]
  │   ├── ChunkConstantInfo::Deserialize	[vim src/storage/table/chunk_info.cpp +92]
  │   ├── ChunkVectorInfo::Deserialize	[vim src/storage/table/chunk_info.cpp +249]
  │   ├── MainHeader::Deserialize	[vim src/storage/single_file_block_manager.cpp +26]
  │   ├── DatabaseHeader::Deserialize	[vim src/storage/single_file_block_manager.cpp +49]
  │   ├── SingleFileBlockManager::LoadFreeList	[vim src/storage/single_file_block_manager.cpp +176]
  │   ├── StartCheckpoint	[vim src/include/duckdb/storage/in_memory_block_manager.hpp +21]
  │   ├── Read	[vim src/include/duckdb/common/virtual_file_system.hpp +24]
  │   ├── Read	[vim src/include/duckdb/common/virtual_file_system.hpp +32]
  │   ├── ReadList	[vim src/include/duckdb/common/serializer.hpp +89]
  │   ├── ReadOptional	[vim src/include/duckdb/common/serializer.hpp +98]
  │   ├── BufferedCSVReader::ReadBuffer	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1386]
  │   ├── ExpressionListRef::Deserialize	[vim src/parser/tableref/expressionlistref.cpp +61]
  │   ├── TableFunctionRef::Deserialize	[vim src/parser/tableref/table_function.cpp +26]
  │   ├── Constraint::Deserialize	[vim src/parser/constraint.cpp +13]
  │   ├── SampleOptions::Deserialize	[vim src/parser/parsed_data/sample_options.cpp +26]
  │   ├── AlterInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +10]
  │   ├── AlterTableInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +29]
  │   ├── RenameColumnInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +65]
  │   ├── RenameTableInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +83]
  │   ├── RemoveColumnInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +118]
  │   ├── ChangeColumnTypeInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +139]
  │   ├── SetDefaultInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +160]
  │   ├── AlterViewInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +176]
  │   ├── RenameViewInfo::Deserialize	[vim src/parser/parsed_data/alter_table_info.cpp +201]
  │   ├── ResultModifier::Deserialize	[vim src/parser/result_modifier.cpp +18]
  │   ├── OrderByNode::Deserialize	[vim src/parser/result_modifier.cpp +149]
  │   ├── OrderModifier::Deserialize	[vim src/parser/result_modifier.cpp +164]
  │   ├── BaseTableRef::Deserialize	[vim src/parser/tableref/basetableref.cpp +28]
  │   ├── JoinRef::Deserialize	[vim src/parser/tableref/joinref.cpp +54]
  │   ├── ColumnDefinition::Deserialize	[vim src/parser/column_definition.cpp +20]
  │   ├── PositionalReferenceExpression::Deserialize	[vim src/parser/expression/positional_reference_expression.cpp +39]
  │   ├── FunctionExpression::Deserialize	[vim src/parser/expression/function_expression.cpp +121]
  │   ├── ColumnRefExpression::Deserialize	[vim src/parser/expression/columnref_expression.cpp +52]
  │   ├── StarExpression::Deserialize	[vim src/parser/expression/star_expression.cpp +76]
  │   ├── WindowExpression::Deserialize	[vim src/parser/expression/window_expression.cpp +239]
  │   ├── CastExpression::Deserialize	[vim src/parser/expression/cast_expression.cpp +45]
  │   ├── ParameterExpression::Deserialize	[vim src/parser/expression/parameter_expression.cpp +35]
  │   ├── LambdaExpression::Deserialize	[vim src/parser/expression/lambda_expression.cpp +61]
  │   ├── CollateExpression::Deserialize	[vim src/parser/expression/collate_expression.cpp +40]
  │   ├── CaseExpression::Deserialize	[vim src/parser/expression/case_expression.cpp +62]
  │   ├── SubqueryExpression::Deserialize	[vim src/parser/expression/subquery_expression.cpp +46]
  │   ├── ParsedExpression::Deserialize	[vim src/parser/parsed_expression.cpp +106]
  │   ├── SelectNode::Deserialize	[vim src/parser/query_node/select_node.cpp +91]
  │   ├── RecursiveCTENode::Deserialize	[vim src/parser/query_node/recursive_cte_node.cpp +46]
  │   ├── SetOperationNode::Deserialize	[vim src/parser/query_node/set_operation_node.cpp +41]
  │   ├── QueryNode::Deserialize	[vim src/parser/query_node.cpp +77]
  │   ├── TableRef::Deserialize	[vim src/parser/tableref.cpp +25]
  │   ├── NotNullConstraint::Deserialize	[vim src/parser/constraints/not_null_constraint.cpp +20]
  │   ├── UniqueConstraint::Deserialize	[vim src/parser/constraints/unique_constraint.cpp +41]
  │   ├── PipeFile::ReadChunk	[vim src/common/pipe_file_system.cpp +23]
  │   ├── Value::Deserialize	[vim src/common/types/value.cpp +1282]
  │   ├── Vector::Deserialize	[vim src/common/types/vector.cpp +887]
  │   ├── DataChunk::Deserialize	[vim src/common/types/data_chunk.cpp +200]
  │   ├── FileBuffer::Read	[vim src/common/file_buffer.cpp +94]
  │   ├── FileBuffer::ReadAndChecksum	[vim src/common/file_buffer.cpp +98]
  │   ├── BufferedFileReader::ReadData	[vim src/common/serializer/buffered_file_reader.cpp +17]
  │   ├── Deserialize	[vim src/common/types.cpp +756]
  │   ├── Deserialize	[vim src/common/types.cpp +802]
  │   ├── Deserialize	[vim src/common/types.cpp +898]
  │   ├── Deserialize	[vim src/common/types.cpp +969]
  │   ├── EnumTypeInfoTemplated	[vim src/common/types.cpp +1020]
  │   ├── ExtraTypeInfo::Serialize	[vim src/common/types.cpp +1144]
  │   ├── LogicalType::Deserialize	[vim src/common/types.cpp +1198]
  │   ├── GZipConsumeString	[vim src/common/gzip_file_system.cpp +54]
  │   ├── GZipFile::Initialize	[vim src/common/gzip_file_system.cpp +141]
  │   ├── GZipFile::ReadData	[vim src/common/gzip_file_system.cpp +196]
  │   ├── FileSystem::PathSeparator	[vim src/common/file_system.cpp +73]
  │   ├── FileHandle::Read	[vim src/common/file_system.cpp +245]
  │   ├── FileHandle::Read	[vim src/common/file_system.cpp +253]
  │   ├── FileHandle::ReadLine	[vim src/common/file_system.cpp +277]
  │   ├── Deserializer::Read	[vim src/common/serializer.cpp +6]
  │   ├── Deserializer::ReadStringVector	[vim src/common/serializer.cpp +13]
  │   ├── ViewCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/view_catalog_entry.cpp +63]
  │   ├── TypeCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/type_catalog_entry.cpp +25]
  │   ├── SchemaCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/schema_catalog_entry.cpp +207]
  │   ├── SequenceCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/sequence_catalog_entry.cpp +32]
  │   ├── MacroCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/macro_catalog_entry.cpp +29]
  │   ├── TableCatalogEntry::Deserialize	[vim src/catalog/catalog_entry/table_catalog_entry.cpp +484]
  │   ├── PragmaImportDatabase	[vim src/function/pragma/pragma_queries.cpp +44]
  │   ├── HTTPFileSystem::Read	[vim extension/httpfs/httpfs.cpp +138]
  │   ├── read	[vim extension/parquet/include/thrift_tools.hpp +20]
  │   ├── Prefetch	[vim extension/parquet/include/thrift_tools.hpp +31]
  │   ├── Read	[vim extension/parquet/include/struct_column_reader.hpp +36]
  │   ├── ParquetReader::ScanInternal	[vim extension/parquet/parquet_reader.cpp +571]
  │   ├── ColumnReader::Skip	[vim extension/parquet/column_reader.cpp +336]
  │   └── ListColumnReader::Read	[vim extension/parquet/column_reader.cpp +421]
  ├── TemplatedWritePlain	[vim extension/parquet/parquet_writer.cpp +126]
  │   └── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  ├── ParquetWriter::Flush	[vim extension/parquet/parquet_writer.cpp +177]
  │   ├── MetaBlockWriter::~MetaBlockWriter	[vim src/storage/meta_block_writer.cpp +17]
  │   ├── MetaBlockWriter::WriteData	[vim src/storage/meta_block_writer.cpp +42]
  │   ├── CheckpointManager::CreateCheckpoint	[vim src/storage/checkpoint_manager.cpp +33]
  │   ├── Update	[vim src/storage/compression/rle.cpp +42]
  │   ├── Finalize	[vim src/storage/compression/rle.cpp +207]
  │   ├── LocalStorage::Append	[vim src/storage/local_storage.cpp +165]
  │   ├── LocalStorage::Commit	[vim src/storage/local_storage.cpp +411]
  │   ├── RowGroup::Delete	[vim src/storage/table/row_group.cpp +796]
  │   ├── VersionDeleteState::Delete	[vim src/storage/table/row_group.cpp +818]
  │   ├── SingleFileBlockManager::WriteHeader	[vim src/storage/single_file_block_manager.cpp +319]
  │   ├── PhysicalSimpleAggregate::Combine	[vim src/execution/operator/aggregate/physical_simple_aggregate.cpp +153]
  │   ├── Finalize	[vim src/execution/operator/join/physical_index_join.cpp +44]
  │   ├── PhysicalNestedLoopJoin::Combine	[vim src/execution/operator/join/physical_nested_loop_join.cpp +168]
  │   ├── Finalize	[vim src/execution/operator/join/physical_nested_loop_join.cpp +228]
  │   ├── PhysicalPiecewiseMergeJoin::Combine	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +97]
  │   ├── Finalize	[vim src/execution/operator/join/physical_piecewise_merge_join.cpp +185]
  │   ├── Finalize	[vim src/execution/operator/projection/physical_projection.cpp +15]
  │   ├── PhysicalHashJoin::Combine	[vim src/execution/operator/join/physical_hash_join.cpp +156]
  │   ├── Finalize	[vim src/execution/operator/join/physical_hash_join.cpp +198]
  │   ├── PhysicalUpdate::Combine	[vim src/execution/operator/persistent/physical_update.cpp +116]
  │   ├── PhysicalInsert::Combine	[vim src/execution/operator/persistent/physical_insert.cpp +86]
  │   ├── Finalize	[vim src/execution/operator/filter/physical_filter.cpp +32]
  │   ├── BufferedCSVReader::TryParseComplexCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +977]
  │   ├── BufferedCSVReader::TryParseSimpleCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1205]
  │   ├── BufferedCSVReader::ParseCSV	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1424]
  │   ├── BufferedCSVReader::AddRow	[vim src/execution/operator/persistent/buffered_csv_reader.cpp +1525]
  │   ├── HandleDigit	[vim src/common/operator/cast_operators.cpp +1435]
  │   ├── HandleExponent	[vim src/common/operator/cast_operators.cpp +1457]
  │   ├── Finalize	[vim src/common/operator/cast_operators.cpp +1487]
  │   ├── BufferedFileWriter::WriteData	[vim src/common/serializer/buffered_file_writer.cpp +24]
  │   ├── BufferedFileWriter::Sync	[vim src/common/serializer/buffered_file_writer.cpp +48]
  │   ├── Appender::FlushChunk	[vim src/main/appender.cpp +243]
  │   ├── Appender::Close	[vim src/main/appender.cpp +270]
  │   ├── ClientContext::LogQueryInternal	[vim src/main/client_context.cpp +520]
  │   ├── duckdb_appender_flush	[vim src/main/capi/appender-c.cpp +190]
  │   ├── Executor::Flush	[vim src/parallel/executor.cpp +635]
  │   ├── PipelineExecutor::PushFinalize	[vim src/parallel/pipeline_executor.cpp +106]
  │   ├── PipelineExecutor::PullFinalize	[vim src/parallel/pipeline_executor.cpp +206]
  │   ├── CleanupState::~CleanupState	[vim src/transaction/cleanup_state.cpp +17]
  │   ├── CleanupState::CleanupDelete	[vim src/transaction/cleanup_state.cpp +51]
  │   ├── if	[vim src/transaction/transaction.cpp +114]
  │   ├── if	[vim extension/icu/icu-collate.cpp +44201]
  │   ├── EndRow	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +39]
  │   ├── Close	[vim extension/tpcds/dsdgen/include/append_info-c.hpp +59]
  │   ├── OperatorProfiler::AddTiming	[vim src/main/query_profiler.cpp +200]
  │   ├── EndRow	[vim extension/tpch/dbgen/dbgen.cpp +114]
  │   ├── DBGenWrapper::LoadTPCHData	[vim extension/tpch/dbgen/dbgen.cpp +571]
  │   ├── ParquetWriteSink	[vim extension/parquet/parquet-extension.cpp +440]
  │   ├── ParquetWriteCombine	[vim extension/parquet/parquet-extension.cpp +455]
  │   └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1flush	[vim tools/jdbc/src/jni/duckdb_java.cpp +438]
  ├── RDecimalCastLoop	[vim tools/rpkg/src/include/typesr.hpp +53]
  │   └── transform	[vim tools/rpkg/src/statement.cpp +257]
  ├── AppendColumnSegment	[vim tools/rpkg/src/scan.cpp +10]
  │   └── dataframe_scan_function	[vim tools/rpkg/src/scan.cpp +126]
  ├── AppendStringSegment	[vim tools/rpkg/src/scan.cpp +23]
  │   └── dataframe_scan_function	[vim tools/rpkg/src/scan.cpp +126]
  ├── VectorToR	[vim tools/rpkg/src/statement.cpp +13]
  │   └── transform	[vim tools/rpkg/src/statement.cpp +257]
  ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── StringUtil::Upper	[vim src/common/string_util.cpp +157]
  │   ├── StringUtil::Lower	[vim src/common/string_util.cpp +163]
  │   ├── Catalog::SimilarEntryInSchemas	[vim src/catalog/catalog.cpp +195]
  │   ├── CurrentSchemasFunction	[vim src/function/scalar/system/system_functions.cpp +46]
  │   ├── LocaleBuilder::setVariant	[vim extension/icu/icu-collate.cpp +29121]
  │   ├── _copyExtensions	[vim extension/icu/icu-collate.cpp +29169]
  │   ├── LocaleBuilder::setExtension	[vim extension/icu/icu-collate.cpp +29224]
  │   ├── LocaleBuilder::addUnicodeLocaleAttribute	[vim extension/icu/icu-collate.cpp +29281]
  │   ├── LocaleBuilder::removeUnicodeLocaleAttribute	[vim extension/icu/icu-collate.cpp +29344]
  │   ├── transform	[vim tools/rpkg/src/statement.cpp +257]
  │   ├── duckdb_execute_R_impl	[vim tools/rpkg/src/statement.cpp +452]
  │   ├── from_json	[vim tools/rest/json.hpp +3004]
  │   ├── decltype	[vim tools/rest/json.hpp +3060]
  │   ├── from_json_array_impl	[vim tools/rest/json.hpp +3080]
  │   └── from_json	[vim tools/rest/json.hpp +3121]
  ├── ScanPandasColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +9]
  │   ├── ScanPandasNumeric	[vim tools/pythonpkg/src/vector_conversion.cpp +50]
  │   └── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  ├── ScanPandasCategoryTemplated	[vim tools/pythonpkg/src/vector_conversion.cpp +22]
  │   └── ScanPandasCategory	[vim tools/pythonpkg/src/vector_conversion.cpp +37]
  ├── ScanPandasFpColumn	[vim tools/pythonpkg/src/vector_conversion.cpp +80]
  │   └── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  ├── VectorConversion::NumpyToDuckDB	[vim tools/pythonpkg/src/vector_conversion.cpp +112]
  │   ├── MapFunction::MapFunctionExec	[vim tools/pythonpkg/src/map.cpp +76]
  │   └── PandasScanFunction::PandasScanFunc	[vim tools/pythonpkg/src/pandas_scan.cpp +149]
  ├── AppendColumnSegment	[vim tools/rpkg/src/utils.cpp +84]
  │   └── dataframe_scan_function	[vim tools/rpkg/src/scan.cpp +126]
  ├── AltrepString::Dataptr	[vim tools/rpkg/src/altrep.cpp +44]
  │   └── AltrepString::SetElt	[vim tools/rpkg/src/altrep.cpp +88]
  ├── AltrepString::Elt	[vim tools/rpkg/src/altrep.cpp +73]
  ├── assign_json_loop	[vim tools/rest/server.cpp +64]
  │   └── serialize_chunk	[vim tools/rest/server.cpp +99]
  ├── assign_json_string_loop	[vim tools/rest/server.cpp +77]
  │   └── serialize_chunk	[vim tools/rest/server.cpp +99]
  ├── CastSQLite::ToVectorString	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp +101]
  │   └── duckdb::SQLiteUDFWrapper::CreateSQLiteScalarFunction	[vim tools/sqlite3_api_wrapper/sqlite3_udf_api/sqlite3_udf_wrapper.cpp +7]
  └── Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch	[vim tools/jdbc/src/jni/duckdb_java.cpp +251]
  
