/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    POWER_OF = 270,
    LAMBDA_ARROW = 271,
    DOUBLE_ARROW = 272,
    LESS_EQUALS = 273,
    GREATER_EQUALS = 274,
    NOT_EQUALS = 275,
    ABORT_P = 276,
    ABSOLUTE_P = 277,
    ACCESS = 278,
    ACTION = 279,
    ADD_P = 280,
    ADMIN = 281,
    AFTER = 282,
    AGGREGATE = 283,
    ALL = 284,
    ALSO = 285,
    ALTER = 286,
    ALWAYS = 287,
    ANALYSE = 288,
    ANALYZE = 289,
    AND = 290,
    ANY = 291,
    ARRAY = 292,
    AS = 293,
    ASC_P = 294,
    ASSERTION = 295,
    ASSIGNMENT = 296,
    ASYMMETRIC = 297,
    AT = 298,
    ATTACH = 299,
    ATTRIBUTE = 300,
    AUTHORIZATION = 301,
    BACKWARD = 302,
    BEFORE = 303,
    BEGIN_P = 304,
    BETWEEN = 305,
    BIGINT = 306,
    BINARY = 307,
    BIT = 308,
    BOOLEAN_P = 309,
    BOTH = 310,
    BY = 311,
    CACHE = 312,
    CALL_P = 313,
    CALLED = 314,
    CASCADE = 315,
    CASCADED = 316,
    CASE = 317,
    CAST = 318,
    CATALOG_P = 319,
    CHAIN = 320,
    CHAR_P = 321,
    CHARACTER = 322,
    CHARACTERISTICS = 323,
    CHECK_P = 324,
    CHECKPOINT = 325,
    CLASS = 326,
    CLOSE = 327,
    CLUSTER = 328,
    COALESCE = 329,
    COLLATE = 330,
    COLLATION = 331,
    COLUMN = 332,
    COLUMNS = 333,
    COMMENT = 334,
    COMMENTS = 335,
    COMMIT = 336,
    COMMITTED = 337,
    COMPRESSION = 338,
    CONCURRENTLY = 339,
    CONFIGURATION = 340,
    CONFLICT = 341,
    CONNECTION = 342,
    CONSTRAINT = 343,
    CONSTRAINTS = 344,
    CONTENT_P = 345,
    CONTINUE_P = 346,
    CONVERSION_P = 347,
    COPY = 348,
    COST = 349,
    CREATE_P = 350,
    CROSS = 351,
    CSV = 352,
    CUBE = 353,
    CURRENT_P = 354,
    CURRENT_CATALOG = 355,
    CURRENT_DATE = 356,
    CURRENT_ROLE = 357,
    CURRENT_SCHEMA = 358,
    CURRENT_TIME = 359,
    CURRENT_TIMESTAMP = 360,
    CURRENT_USER = 361,
    CURSOR = 362,
    CYCLE = 363,
    DATA_P = 364,
    DATABASE = 365,
    DAY_P = 366,
    DAYS_P = 367,
    DEALLOCATE = 368,
    DEC = 369,
    DECIMAL_P = 370,
    DECLARE = 371,
    DEFAULT = 372,
    DEFAULTS = 373,
    DEFERRABLE = 374,
    DEFERRED = 375,
    DEFINER = 376,
    DELETE_P = 377,
    DELIMITER = 378,
    DELIMITERS = 379,
    DEPENDS = 380,
    DESC_P = 381,
    DESCRIBE = 382,
    DETACH = 383,
    DICTIONARY = 384,
    DISABLE_P = 385,
    DISCARD = 386,
    DISTINCT = 387,
    DO = 388,
    DOCUMENT_P = 389,
    DOMAIN_P = 390,
    DOUBLE_P = 391,
    DROP = 392,
    EACH = 393,
    ELSE = 394,
    ENABLE_P = 395,
    ENCODING = 396,
    ENCRYPTED = 397,
    END_P = 398,
    ENUM_P = 399,
    ESCAPE = 400,
    EVENT = 401,
    EXCEPT = 402,
    EXCLUDE = 403,
    EXCLUDING = 404,
    EXCLUSIVE = 405,
    EXECUTE = 406,
    EXISTS = 407,
    EXPLAIN = 408,
    EXPORT_P = 409,
    EXPORT_STATE = 410,
    EXTENSION = 411,
    EXTERNAL = 412,
    EXTRACT = 413,
    FALSE_P = 414,
    FAMILY = 415,
    FETCH = 416,
    FILTER = 417,
    FIRST_P = 418,
    FLOAT_P = 419,
    FOLLOWING = 420,
    FOR = 421,
    FORCE = 422,
    FOREIGN = 423,
    FORWARD = 424,
    FREEZE = 425,
    FROM = 426,
    FULL = 427,
    FUNCTION = 428,
    FUNCTIONS = 429,
    GENERATED = 430,
    GLOB = 431,
    GLOBAL = 432,
    GRANT = 433,
    GRANTED = 434,
    GROUP_P = 435,
    GROUPING = 436,
    GROUPING_ID = 437,
    HANDLER = 438,
    HAVING = 439,
    HEADER_P = 440,
    HOLD = 441,
    HOUR_P = 442,
    HOURS_P = 443,
    IDENTITY_P = 444,
    IF_P = 445,
    IGNORE_P = 446,
    ILIKE = 447,
    IMMEDIATE = 448,
    IMMUTABLE = 449,
    IMPLICIT_P = 450,
    IMPORT_P = 451,
    IN_P = 452,
    INCLUDING = 453,
    INCREMENT = 454,
    INDEX = 455,
    INDEXES = 456,
    INHERIT = 457,
    INHERITS = 458,
    INITIALLY = 459,
    INLINE_P = 460,
    INNER_P = 461,
    INOUT = 462,
    INPUT_P = 463,
    INSENSITIVE = 464,
    INSERT = 465,
    INSTALL = 466,
    INSTEAD = 467,
    INT_P = 468,
    INTEGER = 469,
    INTERSECT = 470,
    INTERVAL = 471,
    INTO = 472,
    INVOKER = 473,
    IS = 474,
    ISNULL = 475,
    ISOLATION = 476,
    JOIN = 477,
    JSON = 478,
    KEY = 479,
    LABEL = 480,
    LANGUAGE = 481,
    LARGE_P = 482,
    LAST_P = 483,
    LATERAL_P = 484,
    LEADING = 485,
    LEAKPROOF = 486,
    LEFT = 487,
    LEVEL = 488,
    LIKE = 489,
    LIMIT = 490,
    LISTEN = 491,
    LOAD = 492,
    LOCAL = 493,
    LOCALTIME = 494,
    LOCALTIMESTAMP = 495,
    LOCATION = 496,
    LOCK_P = 497,
    LOCKED = 498,
    LOGGED = 499,
    MACRO = 500,
    MAP = 501,
    MAPPING = 502,
    MATCH = 503,
    MATERIALIZED = 504,
    MAXVALUE = 505,
    METHOD = 506,
    MICROSECOND_P = 507,
    MICROSECONDS_P = 508,
    MILLISECOND_P = 509,
    MILLISECONDS_P = 510,
    MINUTE_P = 511,
    MINUTES_P = 512,
    MINVALUE = 513,
    MODE = 514,
    MONTH_P = 515,
    MONTHS_P = 516,
    MOVE = 517,
    NAME_P = 518,
    NAMES = 519,
    NATIONAL = 520,
    NATURAL = 521,
    NCHAR = 522,
    NEW = 523,
    NEXT = 524,
    NO = 525,
    NONE = 526,
    NOT = 527,
    NOTHING = 528,
    NOTIFY = 529,
    NOTNULL = 530,
    NOWAIT = 531,
    NULL_P = 532,
    NULLIF = 533,
    NULLS_P = 534,
    NUMERIC = 535,
    OBJECT_P = 536,
    OF = 537,
    OFF = 538,
    OFFSET = 539,
    OIDS = 540,
    OLD = 541,
    ON = 542,
    ONLY = 543,
    OPERATOR = 544,
    OPTION = 545,
    OPTIONS = 546,
    OR = 547,
    ORDER = 548,
    ORDINALITY = 549,
    OUT_P = 550,
    OUTER_P = 551,
    OVER = 552,
    OVERLAPS = 553,
    OVERLAY = 554,
    OVERRIDING = 555,
    OWNED = 556,
    OWNER = 557,
    PARALLEL = 558,
    PARSER = 559,
    PARTIAL = 560,
    PARTITION = 561,
    PASSING = 562,
    PASSWORD = 563,
    PERCENT = 564,
    PLACING = 565,
    PLANS = 566,
    POLICY = 567,
    POSITION = 568,
    PRAGMA_P = 569,
    PRECEDING = 570,
    PRECISION = 571,
    PREPARE = 572,
    PREPARED = 573,
    PRESERVE = 574,
    PRIMARY = 575,
    PRIOR = 576,
    PRIVILEGES = 577,
    PROCEDURAL = 578,
    PROCEDURE = 579,
    PROGRAM = 580,
    PUBLICATION = 581,
    QUALIFY = 582,
    QUOTE = 583,
    RANGE = 584,
    READ_P = 585,
    REAL = 586,
    REASSIGN = 587,
    RECHECK = 588,
    RECURSIVE = 589,
    REF = 590,
    REFERENCES = 591,
    REFERENCING = 592,
    REFRESH = 593,
    REINDEX = 594,
    RELATIVE_P = 595,
    RELEASE = 596,
    RENAME = 597,
    REPEATABLE = 598,
    REPLACE = 599,
    REPLICA = 600,
    RESET = 601,
    RESPECT_P = 602,
    RESTART = 603,
    RESTRICT = 604,
    RETURNING = 605,
    RETURNS = 606,
    REVOKE = 607,
    RIGHT = 608,
    ROLE = 609,
    ROLLBACK = 610,
    ROLLUP = 611,
    ROW = 612,
    ROWS = 613,
    RULE = 614,
    SAMPLE = 615,
    SAVEPOINT = 616,
    SCHEMA = 617,
    SCHEMAS = 618,
    SCROLL = 619,
    SEARCH = 620,
    SECOND_P = 621,
    SECONDS_P = 622,
    SECURITY = 623,
    SELECT = 624,
    SEQUENCE = 625,
    SEQUENCES = 626,
    SERIALIZABLE = 627,
    SERVER = 628,
    SESSION = 629,
    SESSION_USER = 630,
    SET = 631,
    SETOF = 632,
    SETS = 633,
    SHARE = 634,
    SHOW = 635,
    SIMILAR = 636,
    SIMPLE = 637,
    SKIP = 638,
    SMALLINT = 639,
    SNAPSHOT = 640,
    SOME = 641,
    SQL_P = 642,
    STABLE = 643,
    STANDALONE_P = 644,
    START = 645,
    STATEMENT = 646,
    STATISTICS = 647,
    STDIN = 648,
    STDOUT = 649,
    STORAGE = 650,
    STORED = 651,
    STRICT_P = 652,
    STRIP_P = 653,
    STRUCT = 654,
    SUBSCRIPTION = 655,
    SUBSTRING = 656,
    SUMMARIZE = 657,
    SYMMETRIC = 658,
    SYSID = 659,
    SYSTEM_P = 660,
    TABLE = 661,
    TABLES = 662,
    TABLESAMPLE = 663,
    TABLESPACE = 664,
    TEMP = 665,
    TEMPLATE = 666,
    TEMPORARY = 667,
    TEXT_P = 668,
    THEN = 669,
    TIME = 670,
    TIMESTAMP = 671,
    TO = 672,
    TRAILING = 673,
    TRANSACTION = 674,
    TRANSFORM = 675,
    TREAT = 676,
    TRIGGER = 677,
    TRIM = 678,
    TRUE_P = 679,
    TRUNCATE = 680,
    TRUSTED = 681,
    TRY_CAST = 682,
    TYPE_P = 683,
    TYPES_P = 684,
    UNBOUNDED = 685,
    UNCOMMITTED = 686,
    UNENCRYPTED = 687,
    UNION = 688,
    UNIQUE = 689,
    UNKNOWN = 690,
    UNLISTEN = 691,
    UNLOGGED = 692,
    UNTIL = 693,
    UPDATE = 694,
    USER = 695,
    USING = 696,
    VACUUM = 697,
    VALID = 698,
    VALIDATE = 699,
    VALIDATOR = 700,
    VALUE_P = 701,
    VALUES = 702,
    VARCHAR = 703,
    VARIADIC = 704,
    VARYING = 705,
    VERBOSE = 706,
    VERSION_P = 707,
    VIEW = 708,
    VIEWS = 709,
    VIRTUAL = 710,
    VOLATILE = 711,
    WHEN = 712,
    WHERE = 713,
    WHITESPACE_P = 714,
    WINDOW = 715,
    WITH = 716,
    WITHIN = 717,
    WITHOUT = 718,
    WORK = 719,
    WRAPPER = 720,
    WRITE_P = 721,
    XML_P = 722,
    XMLATTRIBUTES = 723,
    XMLCONCAT = 724,
    XMLELEMENT = 725,
    XMLEXISTS = 726,
    XMLFOREST = 727,
    XMLNAMESPACES = 728,
    XMLPARSE = 729,
    XMLPI = 730,
    XMLROOT = 731,
    XMLSERIALIZE = 732,
    XMLTABLE = 733,
    YEAR_P = 734,
    YEARS_P = 735,
    YES_P = 736,
    ZONE = 737,
    NOT_LA = 738,
    NULLS_LA = 739,
    WITH_LA = 740,
    POSTFIXOP = 741,
    UMINUS = 742
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y"

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGConstrType           constr;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 826 "third_party/libpg_query/grammar/grammar_out.cpp"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  630
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   56657

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  509
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  396
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1918
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3104

#define YYUNDEFTOK  2
#define YYMAXUTOK   742


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   506,     2,   494,     2,     2,
     499,   500,   492,   490,   503,   491,   501,   493,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   508,   502,
     486,   488,   487,   507,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   497,     2,   498,   495,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   504,     2,   505,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   489,   496
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   466,   466,   482,   494,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   538,
       1,    30,    53,    54,    59,    63,    68,    72,    80,    81,
      85,    86,    91,    92,    96,    97,   102,   103,   104,   105,
     106,   111,   119,   123,   128,   129,   134,   138,   143,   147,
     151,   155,   159,   163,   167,   171,   175,   179,   183,   187,
     191,   195,   203,   209,   210,   211,   216,   220,     2,     7,
      14,    24,    25,    32,     6,    47,    48,    52,    53,    68,
      69,    76,    84,    92,   100,   108,   116,   127,   128,   155,
     171,   188,   189,   208,   212,   216,   220,   237,   244,   251,
     261,   262,   265,   277,   288,   296,   301,   306,   311,   316,
     324,   332,   337,   342,   349,   350,   354,   355,   356,   360,
     367,   368,   372,   373,   377,   378,   379,   383,   384,   388,
     389,   399,   412,   413,   416,   425,   436,   437,   438,   441,
     442,   443,   447,   448,   449,   450,   454,   455,   459,   461,
     477,   479,   484,   487,   495,   499,   503,   507,   511,   515,
     522,   527,   534,   535,   539,   544,   548,   552,   560,   567,
     568,   573,   574,   578,   579,   584,   586,   588,   593,   613,
     614,   616,   621,   622,   626,   627,   630,   631,   656,   657,
     662,   667,   671,   672,   676,   677,   681,   682,   683,   684,
     685,   689,   702,   709,   716,   723,   724,   728,   729,   733,
     734,   738,   739,   743,   744,   748,   749,   753,   764,   765,
     766,   767,   771,   772,   777,   778,   779,   788,   794,   803,
     804,   817,   818,   822,   823,   827,   828,   834,   840,   848,
     857,   865,   874,   883,   887,   913,   917,   930,   944,   959,
     971,   987,   993,   998,  1004,  1011,  1012,  1020,  1024,  1028,
    1034,  1041,  1046,  1047,  1048,  1049,  1053,  1054,  1066,  1067,
    1072,  1079,  1086,  1093,  1125,  1136,  1149,  1154,  1155,  1158,
    1159,  1162,  1163,  1168,  1169,  1174,  1178,  1184,  1205,  1213,
    1226,  1229,  1233,  1233,  1236,  1237,  1239,  1244,  1251,  1256,
    1262,  1267,  1273,  1279,  1288,  1290,  1293,  1297,  1298,  1299,
    1300,  1301,  1302,  1307,  1327,  1328,  1329,  1330,  1341,  1355,
    1356,  1362,  1367,  1372,  1377,  1382,  1387,  1392,  1397,  1403,
    1409,  1415,  1422,  1444,  1453,  1457,  1465,  1469,  1477,  1489,
    1510,  1514,  1520,  1524,  1537,  1545,  1555,  1557,  1559,  1561,
    1563,  1565,  1570,  1571,  1578,  1587,  1595,  1604,  1615,  1623,
    1624,  1625,  1629,  1629,  1632,  1632,  1635,  1635,  1638,  1638,
    1641,  1641,  1644,  1644,  1647,  1647,  1650,  1650,  1653,  1655,
    1657,  1659,  1661,  1663,  1665,  1667,  1669,  1674,  1679,  1685,
    1692,  1697,  1703,  1709,  1740,  1742,  1744,  1752,  1767,  1769,
    1771,  1773,  1775,  1777,  1779,  1781,  1783,  1785,  1787,  1789,
    1791,  1793,  1795,  1798,  1800,  1802,  1805,  1807,  1809,  1811,
    1813,  1818,  1823,  1830,  1835,  1842,  1847,  1854,  1859,  1867,
    1875,  1883,  1891,  1909,  1917,  1925,  1933,  1941,  1949,  1953,
    1957,  1961,  1969,  1973,  1989,  1997,  2005,  2013,  2021,  2029,
    2037,  2041,  2045,  2049,  2053,  2061,  2069,  2077,  2085,  2105,
    2127,  2138,  2145,  2156,  2170,  2186,  2188,  2190,  2192,  2194,
    2196,  2198,  2200,  2202,  2204,  2206,  2208,  2210,  2212,  2214,
    2216,  2218,  2220,  2222,  2224,  2226,  2230,  2234,  2238,  2252,
    2253,  2254,  2261,  2273,  2288,  2300,  2302,  2314,  2325,  2349,
    2360,  2369,  2373,  2380,  2388,  2396,  2407,  2415,  2443,  2479,
    2490,  2491,  2498,  2504,  2508,  2512,  2516,  2520,  2524,  2528,
    2532,  2536,  2540,  2544,  2548,  2552,  2556,  2560,  2564,  2566,
    2568,  2572,  2581,  2586,  2593,  2608,  2615,  2619,  2623,  2627,
    2631,  2645,  2646,  2650,  2651,  2652,  2656,  2657,  2664,  2665,
    2669,  2670,  2675,  2683,  2685,  2699,  2702,  2729,  2730,  2733,
    2734,  2745,  2751,  2758,  2767,  2784,  2829,  2837,  2845,  2853,
    2861,  2882,  2883,  2886,  2887,  2891,  2901,  2902,  2906,  2907,
    2911,  2912,  2913,  2916,  2917,  2920,  2921,  2922,  2923,  2924,
    2925,  2926,  2927,  2928,  2929,  2930,  2931,  2932,  2935,  2937,
    2942,  2944,  2949,  2951,  2953,  2955,  2957,  2959,  2961,  2963,
    2977,  2979,  2983,  2987,  2994,  2999,  3006,  3011,  3019,  3023,
    3029,  3033,  3042,  3053,  3054,  3058,  3062,  3069,  3070,  3071,
    3072,  3073,  3074,  3075,  3076,  3077,  3078,  3088,  3092,  3099,
    3106,  3107,  3123,  3127,  3132,  3136,  3151,  3156,  3160,  3163,
    3166,  3167,  3168,  3171,  3178,  3188,  3202,  3203,  3207,  3218,
    3219,  3222,  3223,  3226,  3230,  3237,  3241,  3249,  3260,  3261,
    3265,  3266,  3270,  3271,  3274,  3275,  3285,  3286,  3290,  3291,
    3295,  3296,  3299,  3315,  3323,  3331,  3346,  3364,  3365,  3368,
    3369,  3372,  3376,  3377,  3381,  3382,  3385,  3386,  3387,  3397,
    3398,  3409,  3413,  3440,  3442,  3448,  3449,  3452,  3454,  3464,
    3467,  3478,  3482,  3486,  3498,  3502,  3511,  3518,  3556,  3560,
    3564,  3568,  3572,  3576,  3580,  3586,  3587,  3603,  3604,  3605,
    3608,  3609,  3615,  3616,  3617,  3620,  3621,  3622,  3625,  3626,
    3627,  3630,  3631,  3634,  3636,  3641,  3642,  3645,  3653,  3654,
    3655,  3656,  3659,  3660,     7,    14,    22,    11,    24,    37,
      54,    55,    56,    61,     3,    10,    17,    24,    31,    38,
      45,    52,    61,    61,    63,    64,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     7,    13,    19,    25,
       7,    21,    36,    56,    57,    84,    85,    86,    87,    88,
      89,    93,    94,    99,   104,   105,   106,   107,   108,   113,
     120,   121,   122,   139,   146,   153,   163,   173,   185,   193,
     202,   220,   221,   225,   226,   230,   239,   262,   276,   283,
     288,   290,   292,   294,   297,   300,   301,   302,   303,   308,
     312,   313,   318,   325,   330,   331,   332,   333,   334,   335,
     336,   337,   343,   344,   348,   353,   360,   367,   374,   386,
     387,   388,   389,   393,   398,   399,   400,   405,   410,   411,
     412,   413,   414,   415,   420,   440,   469,   470,   474,   478,
     479,   480,   484,   488,   496,   497,   502,   503,   504,   508,
     516,   517,   522,   523,   527,   532,   536,   540,   545,   553,
     554,   558,   559,   563,   564,   570,   581,   594,   608,   622,
     636,   650,   673,   677,   684,   688,   696,   701,   708,   718,
     719,   720,   721,   722,   729,   736,   737,   742,   743,     7,
      14,    31,    51,    52,     7,    16,    34,    41,    46,    47,
      48,    49,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    90,    91,    92,    97,    98,   103,   107,   115,   116,
     121,   122,   123,   129,   134,   142,   143,     9,    19,    29,
      39,    49,    59,    69,    79,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   113,   114,   115,   116,   117,   118,   119,   124,   125,
     130,   131,   132,   137,   138,   139,   142,   143,     7,     9,
      18,    27,    36,    45,    54,    63,    72,    85,    87,    93,
      94,    99,   103,   107,   118,   126,   130,   139,   148,   157,
     166,   175,   184,   192,   200,   209,   218,   227,   236,   253,
     262,   271,   280,   290,   303,   318,   327,   335,   350,   358,
     368,   378,   385,   392,   400,   407,   418,   419,   424,   428,
     433,   438,   446,   447,   452,   456,   457,   458,     2,     9,
      15,    21,    28,    35,    45,    46,    47,     6,    15,    25,
      35,    45,    55,    65,    75,    85,    95,   106,   117,   127,
     140,   141,     7,    18,    19,    23,    24,    25,    26,     8,
      22,    36,    48,    56,    70,    71,    72,    73,    74,    87,
      88,    93,    94,    98,    99,     8,    33,    62,    66,    67,
      72,    73,    78,    79,    83,    84,    89,    90,     7,    20,
       7,    21,    25,    32,    43,    44,    50,    51,     8,    21,
      34,    52,    74,    75,    76,    77,    10,    16,    22,    28,
      38,    39,    47,    58,    70,    78,    86,    93,   103,   105,
     111,   115,   119,   134,   141,   142,   143,   147,   148,     5,
      11,     7,    14,    20,    28,    29,     9,    19,    32,    33,
       8,    20,    36,    37,    41,    45,     7,    16,    25,    34,
      43,    52,     7,     8,    21,    27,    34,    40,    47,    57,
      61,    70,    79,    88,    95,    96,   101,   113,   118,   143,
     153,   163,   169,   180,   191,   206,   207,   213,   214,   219,
     220,   226,   227,   231,   232,   237,   239,   245,   246,   250,
     251,   254,   255,   260,     9,    19,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
      32,    32,    32,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
      33,    33,    33,    33,    33,    33,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
      34,    34,    34,    34,    34,    34,    34,    34,    34,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
      38,    38,    38,    38,    38,    38,    38,    38,    38
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW",
  "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P",
  "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY",
  "AS", "ASC_P", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA",
  "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC",
  "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED",
  "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC_P",
  "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT",
  "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'", "'#'", "'?'",
  "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "CopyStmt",
  "copy_from", "copy_delimiter", "copy_generic_opt_arg_list", "opt_using",
  "opt_as", "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "VariableResetStmt", "generic_reset",
  "reset_rest", "CallStmt", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "simple_select", "with_clause",
  "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
  "opt_table", "all_or_distinct", "by_name", "distinct_clause",
  "opt_all_clause", "opt_ignore_nulls", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "sample_count", "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "qualified_row", "row", "dict_arg",
  "dict_arguments", "dict_arguments_opt_comma", "sub_type", "all_Op",
  "MathOp", "qual_Op", "qual_all_Op", "subquery_Op", "any_operator",
  "expr_list", "expr_list_opt_comma", "opt_expr_list_opt_comma",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "qualified_name", "name_list",
  "name_list_opt_comma", "name", "attr_name", "func_name", "AexprConst",
  "Iconst", "Sconst", "ColId", "ColIdOrString", "type_function_name",
  "function_name_token", "type_name_token", "any_name", "attrs",
  "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "PragmaStmt", "CreateAsStmt", "opt_with_data", "create_as_target",
  "VariableShowStmt", "show_or_describe", "var_name", "AlterSeqStmt",
  "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem", "opt_by",
  "SignedIconst", "DeallocateStmt", "CreateStmt",
  "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
  "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "ExecuteStmt",
  "execute_param_clause", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "ExplainStmt", "opt_verbose", "explain_option_arg",
  "ExplainableStmt", "NonReservedWord", "NonReservedWord_or_Sconst",
  "explain_option_list", "analyze_keyword", "opt_boolean_or_string",
  "explain_option_elem", "explain_option_name", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "CreateTypeStmt", "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "TransactionStmt", "opt_transaction", "RenameStmt",
  "opt_column", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "IndexStmt", "access_method", "access_method_clause",
  "opt_concurrently", "opt_index_name", "opt_reloptions", "opt_unique",
  "ExportStmt", "ImportStmt", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "ViewStmt",
  "opt_check_option", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "CheckPointStmt", "LoadStmt",
  "file_name", "CreateSeqStmt", "OptSeqOptList", "CreateFunctionStmt",
  "macro_alias", "param_list", "AlterObjectSchemaStmt", "UpdateStmt",
  "InsertStmt", "insert_rest", "insert_target", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_on_conflict",
  "index_elem", "returning_clause", "override_kind", "set_target_list",
  "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "AnalyzeStmt",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,    60,    62,    61,   741,
      43,    45,    42,    47,    37,    94,   742,    91,    93,    40,
      41,    46,    59,    44,   123,   125,    35,    63,    58
};
# endif

#define YYPACT_NINF (-2713)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1847)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    5598,   -23,    42, -2713, -2713,   -23, 37515, -2713,   -23,    53,
    1812, 39435, -2713,  6532,   -23, 42315, 56157,   295,   296,   437,
   42795, 42795, 50445, 42315, 43275,   -23,   285, 50925, -2713,   -23,
   25509, 39915,    -2,  -138, 43755, 42315,  1338,   370,   303, -2713,
   -2713, -2713, -2713, -2713,   127, -2713,   138,   128,   867,   195,
   -2713, -2713, -2713, -2713, 25029, -2713, -2713, -2713, -2713, -2713,
   -2713,   338, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713,   112, -2713, -2713, -2713, -2713, 44235, 42315, 44715,
   40395, 45195, -2713,   110, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713,   164, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713,   170, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713,   186, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713,   212,   519, -2713,   202, -2713,
   -2713, -2713, -2713,  1338, 42315,   588,   667,   512, 51405, -2713,
   -2713, 50445, -2713, -2713,   521,   421, -2713, -2713, -2713, -2713,
   -2713, 40875, -2713, -2713, -2713, -2713, -2713,   623, -2713, -2713,
     470, -2713,    96, -2713, -2713,   509,   482, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713,   579, -2713, 45675, -2713, 51885,
   46140, 46620, -2713,   460, 56158, 23589, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,   338,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,  1043, -2713,
   42795,  1043, -2713, -2713, -2713, -2713, -2713,   423,   479, -2713,
     524,   876, -2713, -2713, -2713,   587, -2713, -2713,   828, 10625,
   10625, 52365, 52365,  1043, 52365,   629,   387, -2713, -2713, -2713,
    -138, -2713,   867,   587, 25990, -2713,   685,   519, -2713, -2713,
     241,  1033, 14665, 42315,   732, -2713,   755,   732,   770,   785,
   -2713,  5598,   287,   287,  1264,   287,   973,   990, -2713,  1549,
   -2713,   842, -2713,   901,  1112, -2713,   587, -2713, 42315,  1182,
    1175, 39915,  1261,   929,  1093,  1292,  3003,  1304,  1018,  1306,
    1145,  7090, 14665, 35115, -2713,   519,   946,   965, -2713, -2713,
   -2713, -2713,   666,  1202, -2713,   977,  1448, -2713, -2713,  1037,
   47100, 47580, 42315, 42315,  1412, -2713, -2713, -2713, -2713,  1038,
   -2713, -2713, -2713,   134, -2713, -2713, -2713, -2713,  1059, -2713,
    1059,  1059, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
    1012,  1012,  1208,  1019, -2713, -2713, -2713,  1392, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,  1055,   558,
   -2713,  1059, -2713,  1012, -2713, -2713, -2713, -2713, -2713, -2713,
   55230, -2713, -2713, -2713, -2713,   333,   414, -2713, -2713, -2713,
   -2713,  1061, -2713,  1528, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713,  1069, -2713,  3599,  1012,    61, -2713, -2713,  1434,
   -2713,    72,  1436,    81, -2713,  1441,  1308, 14665, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
    -138, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713,   537, -2713, -2713, 32530, -2713,
   -2713, 56158,  1071, -2713, -2713, 32530, 15170, 48060,  1566, -2713,
    1369, 50445,  1107, -2713, -2713, -2713, -2713, -2713, -2713,   154,
    1606,   109,  1610, 14665,  1121,   109,   109,  1129,  1457,   203,
     208,   209,   210,  1140,  1150,   222,   236,   236, -2713,  1161,
    1165, -2713,   238,  1170,  1174,  1641,  1670,   148,  1193,  1196,
     558,   109, 14665, -2713,  1203,   236,  1207,  1210,  1213,  1696,
    1221,   242,  1717,  1224,   106,   179,  1225,  1233, -2713,  1236,
     262,   263, 14665, 14665, 14665,  1577, 14665,  8100, 42315,  1727,
   -2713,   519,  1240,  1043, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713,   150,  3110, -2713,  1281, -2713, -2713, -2713,  1447,
   14665, -2713, -2713,  1250,  1541, -2713,   265, -2713, -2713, -2713,
     559,  1541, -2713, -2713, -2713, -2713, -2713,   277,  1663, 31570,
   32050, 42315, -2713, -2713,   519, -2713, -2713, -2713, -2713, -2713,
   -2713,   662, -2713,   338, 33917,  1260,  1266,   519,   732, 42315,
   42315,  1729, -2713, -2713, -2713, -2713, -2713,   867,   867,  9615,
     175,   140,   766, 11130, 15675,  1602,  1485,   168,   143,  1605,
   -2713,  1492,   973,   990, 14665, -2713,  1543,   755, 39915, 42315,
   52845,  1402, 42315, 37995,   480,   903,  1284,  1365,  1291,   196,
    1698, -2713,  1285, -2713,  1379, 42315, 55230,   279, -2713,  1741,
     279,   279,   233,  1742,  1385,   351,  1542,   444,  -102,  2154,
   -2713,  1285, 39915,   201,   595,  1285, 42315,  1387,   615,  1285,
     135, 15170,  1088,  1124,   367,  1147,  1226,   151,   163,   166,
     169,   173, 15170,  1246,  1279,   180,  1283,  1289,  1383,  1411,
    1418,  1524,  1538,  1559,   183,  1562,  1564,  1569,  1571,  1578,
     185,  1586,   187,  1595,   159,   190, 15170,  1604,  1309, -2713,
   33917,   -40, -2713, -2713,  1624,   207, -2713, 30132,  1300, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,  1393,
   50445,  1351,   710,  1664,  1720, 35115,  1316, 48060, 42315,  1548,
    2154,  1550,  1322,  1789,   965,  1331, -2713, 53325, -2713, -2713,
   -2713, -2713, -2713, -2713,  1332, -2713, -2713, 14665, -2713, -2713,
   -2713,  1823, -2713, 48060, 48060,  1059,  1059, -2713, -2713,  1798,
    1423,  1424,  1823, -2713,  1823, -2713, 50445,  1344,  1350,  1823,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713,  1823,  1431, -2713,  1435,
    1442,  1449, -2713, -2713, -2713, -2713, -2713, -2713, -2713, 48060,
   -2713, 50445, 50445, -2713, 42315, 42315, -2713, 42315, 50445,  1353,
   56158, 37035, -2713, -2713, -2713, -2713,   824,   949, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, 35115, -2713,  2124,
   -2713, -2713, -2713,  1361,   778, -2713,   784,  1338, -2713, -2713,
   14665,   519, 14665, -2713, 33917,  1408, 14665, 14665,  1368,  1823,
    1823, -2713,  2385,  1823,  1823, 34067, 14665, 28873, 14665, 19210,
   11635, 14665, 14665,  8605, 14665, 34067,  1857,  1857, 26950, -2713,
    1525, -2713,  1373,  1328,  5834,  1370, -2713,  1372,  1380,  1384,
   -2713,   519,   519, 14665, -2713, 14665,  3972,  3972, -2713,   199,
   48060, 14665, 14665, 14665, 14665, 14665, 14665, 14665, 34635,  1463,
     160, 50445, 14665, 14665,  1388,   823, -2713, 14665,  1611, -2713,
    1390, 14665,  1474,   870, 14665, 14665, 14665, 14665, 14665, 14665,
   14665, 14665, 14665, -2713, -2713, 20711,   216,  1713,  1732,   519,
     -37,   358, 10625, 41355,  1730,  7090, -2713,   519, 30610,   142,
    1730, -2713, -2713, -2713,   266, -2713, -2713, -2713, -2713, -2713,
    1361, -2713,  1361,  1400, 42315,   241, 38955, 14665, -2713, -2713,
    1395,  1403,  1405,  1691, -2713,   299,   299,  1404, -2713, 33007,
    1646,  1691,   867, -2713, -2713, 19701,  1531,  1697,  1643, -2713,
   -2713,  1620,  1623, -2713,  1437, 33980, 16180, 16180, -2713,  1287,
   33917,  1297, -2713, -2713, -2713, -2713, -2713, -2713,   659, -2713,
   42315,    25,  1602,   143,  1438, -2713, -2713,  1493,  1901,    33,
   50445, -2713, 27430,  1396,  1443, 53805, 42315,  1719,  1669,  1721,
     -99, 48060, -2713, -2713, -2713, -2713, 42315, 50445, 48525, 54285,
   35595, 42315, 35115, -2713, -2713, -2713, -2713, 42315,   836, 42315,
    4173, -2713, -2713, -2713,   279, -2713, -2713, -2713, -2713, -2713,
   50445, 42315, -2713, -2713,   279, 50445, 42315,   279, -2713,  1503,
   42315, 42315, 42315, 42315,  1591, 42315, 42315,   -24,   -24,  1651,
   -2713, 12140,   121, -2713, 14665, 14665, -2713, 14665,  1625, -2713,
   -2713,   791,  1676,    75,  1496, 42315, 42315, 50445,   730, -2713,
   -2713, -2713, -2713, -2713, -2713, 35115, -2713,  1455,  1810,  2154,
   -2713,  1814, 38475,   752,  1051,  1502, 12645,  1926,  1699, -2713,
   -2713,  1682, 14665,  1470,  1472,    61,   801, -2713, -2713,  1476,
    1350,  1495,  1497,  1475,  1480,   807, 48060,  1823,   103,  1486,
    1487,  1398,   932,   996,  1301, -2713,    72, -2713,    81, -2713,
    1687,   178, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
     812, 22629, -2713, -2713,  1947,  1043,  1947,   568, -2713, -2713,
    1947, -2713,  1947, -2713, 32530, -2713, 15170, -2713, 48060, -2713,
   -2713, -2713, -2713, -2713,  1488, -2713,  1494, 14665,    15, -2713,
   33069,  1490, 14665,  1491,  1501, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713,  1508,  1822, -2713,  1509,  1510,  1465,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713,  1511,  1516, 33105,  1513, 19210,
   19210,  8100,  1139, -2713, 19210,  1518, -2713,  1519, 33020,  1517,
    1522, 33150, 13150, 14665, 13150, 13150, 33559, -2713,  1523, 33638,
   42315, -2713, 16685, -2713, -2713, -2713, 14665, 42315, -2713, 14665,
    1526,  6248, -2713, -2713, -2713,   320,  6531,   358,  4229,  4229,
    4229, 34067, -2713, -2713, -2713,  1514, -2713, 19210, 19210, -2713,
    3545,  1422,  8100, -2713, -2713,  1824, -2713,   786, -2713,  1498,
   -2713, -2713,  4812, -2713, 28873, 33993, 14665,   194, -2713, 14665,
    1388, 14665,  1608,  4229,  4229,  4229,   332,   332,   215,   215,
     215,   320,   358, -2713, -2713, -2713,  1530,  1539,  1546,  1872,
    1221, 14665, -2713, -2713,   856,   917, 42315,  2529,  3322,  4922,
   -2713, -2713, 23109,  1572,   -40,  1577,  1572,  1823,  3972, -2713,
     755, -2713, -2713, -2713, 33917, 42315, -2713,  1338, -2713, -2713,
    1556,  1556, 14665,  1843,  1556, -2713,  1691,  1753,  1759,  1025,
    1025,  1287,  1763, -2713, -2713,  1614, -2713, -2713, -2713, 14665,
    9110,  1314, -2713,  1320, -2713, -2713, -2713, -2713,  1551, -2713,
   -2713,  1818, -2713, -2713, -2713, -2713, 23109,  1616, 50445,  1628,
     562, 25509, -2713,  1791, -2713, 50445, -2713, -2713,  1581,  1730,
    1593,  1668,  1285, 14665,  1820, -2713,   149,  1587,  1938,   -65,
    1895, 50445, -2713,   380,   806, -2713,   678,  1944,   178,  1945,
     178, 35115, 35115, 35115, -2713, -2713,  1043,   816, -2713, -2713,
     372,   818, -2713, -2713, -2713, -2713,  1684,   624,  2154,  1285,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713,   260,   787,  1285,
    1685, -2713,  1689, -2713,  1690,   839,  1285, -2713, -2713,   121,
     121,   121, 15170, -2713,  1829,  1830,  1599, 33917, 33917, 33917,
    1613, -2713,   184, -2713, 50445, -2713, -2713, -2713,  1625, 42315,
    1615,  2077,   965, -2713,  1774,   747, -2713, 50445, 42315, 42315,
   42315, 21200, -2713, -2713, -2713,  1619,  1621, -2713,   -26,  1838,
    1839, 42315,  1666,  1291,  2090, -2713,   849, 13655,  1977, 42315,
    1630, -2713, -2713, -2713, -2713,  1823, -2713, -2713,  -111,  -111,
   -2713, 50445, -2713,  1635, -2713,  1637, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713, -2713, -2713, 50445, -2713, -2713,
   35115, -2713, 36555, -2713, -2713, -2713, -2713,  1043, -2713,  1043,
    1859, 50445, 31090,  1043,  1043, -2713, -2713, -2713, -2713, 33667,
   14665, -2713,  1995, 48060, -2713,  6296, -2713, -2713, -2713, 14665,
   -2713, -2713, 14665, -2713, 28873, 14665,  1969, -2713,  2130,  2130,
    5834, 48060, 19210, 19210, 19210, 19210, 19210,   565,  1207, 19210,
   19210, 19210, 19210, 19210, 19210, 19210, 19210, 19210, 20206,   502,
   -2713, -2713, 14665, 14665,  1976,  1969, 14665, -2713, 48060,  1644,
   -2713,  1645,  1648, 14665, -2713, 48060,  1650,  8100, 33746, -2713,
     519,  6578, -2713, 33917, -2713,  3972, 14665,  1432,  1512, 14665,
    1654, 14665,  1972, -2713, -2713,  1656, -2713, -2713, 48060, 14665,
    1661,  5522, 19210, 19210,  5735, -2713,  5893, 14665,  8100, -2713,
    1651, 14160, -2713,  1862,  1750,  1750,  1750,  1750, -2713, -2713,
   42315, 42315, 42315, 24069,  1991, 22146, 49005, 49005,  1660, -2713,
    1381, -2713, 49005, 49485, -2713,  1679, -2713,   519, 14665,  1985,
     121,  1525,  1985,  1667, -2713, -2713,  1671,   171, -2713, -2713,
   -2713,  1678, -2713,  1556, -2713, -2713, -2713,  1878, -2713, -2713,
   -2713, 42315, -2713, -2713, 14665,  1819, -2713, -2713, -2713, -2713,
    1735, -2713, -2713,   851,  2096,  1819,   865, -2713,   519, 27430,
    1616, 14665, 42315, 29361,  2032, -2713, 50445, 50445, 50445, -2713,
   50445,  1683,  1688,   815,  1686,   544, -2713,  1811,   815,  2012,
     783,  1291,   351,  4874,   250, -2713, -2713, -2713,  1761, 42315,
   -2713, 50445, -2713, -2713, -2713, -2713, -2713, -2713, -2713, 35595,
   28392, 35115, -2713, 35115, 42315, 42315, 42315, 42315, 42315, 42315,
   42315, 42315, 42315, 42315,  1693,  1703,  1704,  1651, -2713, -2713,
   -2713, -2713, -2713, -2713,  -102, -2713, -2713,   184,  1692, 38475,
    1338,  1502,  1720,   666, 49965,   885,  2154,  1706,  2152, -2713,
     752, 38475, -2713, -2713, -2713,  2115, -2713,   460,   156, -2713,
   -2713,  1338, -2713,  1338, 33917, 50445,  1756, -2713,  1350,  1708,
   -2713, -2713,  1350, 48060, -2713, -2713,   178, -2713,   890, -2713,
   -2713, -2713, -2713, 50445,  1705, -2713,  1705, -2713, -2713, 14665,
   33917, -2713,  1707, -2713, 33917, 29390, -2713, 33917,  1976, -2713,
    2130,   291,   291,   291,  3089,  2038,   240,  1711,   291,   291,
     291,   281,   281,   118,   118,   118,  2130,   502, 33917, 33917,
   -2713, -2713,  1715, -2713, -2713, -2713, -2713,  1716, -2713,  5092,
   -2713,  1710,  1718, 50445, -2713, -2713,   307, 14665, 14665,  3545,
   -2713, 34160, 14665, 48060,   907,  3545,   294, 14665,  2013,  2579,
   14665, 14665, 29920, 29426,  1723, 14665, 29455, 27910, -2713, 42315,
   42315, 42315, 42315, -2713, -2713, -2713, 49005, 49485,  1726, 21666,
   49005,  1381,  1728, 42315, -2713,  1809,  1731,  1809, 23109,  1997,
    1924, -2713, 23109,  1924,  1100,  1924,  2004,  1809, 26470, -2713,
    1809,  1737,  1933, -2713,   592, 33917,  2173,  2047,  1738, -2713,
    2047,  1043, -2713, -2713, -2713, 28873, -2713, -2713, -2713, 33917,
   10625, -2713,  1338,   519,  1294, 50445,   -25, -2713,  1754, 50445,
   -2713,  1819, 33917, -2713, -2713, 50445,  1743, -2713,  1744,   815,
   -2713, 50445,  1780, -2713,   230,  2046,    32, -2713, 14665, -2713,
    2133,  2216,  1811,  1757, 50445, 42315, 19210, -2713,   379,   172,
   -2713,  2031, 42315,  1780,  2174, -2713, -2713, -2713,   544, -2713,
    2080,  1990, -2713,   279, -2713, 14665,   544,  1998,   312, 50445,
   -2713, -2713,  2145, -2713, 48060,   178,   178, -2713,  1771,  1773,
    1777,  1778,  1779,  1783,  1786,  1787,  1788,  1795,  1800,  1802,
    1803, -2713,  1804,  1805,  1807,  1813,  1815,  1816,  1817,  1821,
    1055,  1825, -2713,  1827,  1678,  1831,  1842,  1844,  1847, 54765,
    1848,  1849,  1850,  1851,  1853,  1855,   824,   949, -2713, -2713,
   -2713,   977, -2713, -2713, -2713,  1856, -2713,  1833, -2713, -2713,
   -2713,  1873, -2713,  1875, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713,   121,  1071,   108, 50445,  1799,  1666,  2273,   810,
    2040,  1860,  1502, -2713, 38475,  1673,   416,  1839, -2713,   157,
    1666, -2713,  2206,  1858, -2713,  2036, 50445,  1861, -2713, -2713,
   -2713, -2713, 36555,  1705, 33917, -2713, -2713, -2713, 19210,  2153,
    1865, 48060, -2713, -2713, 14665, -2713, -2713,  3545,  3545, 34160,
     908, -2713,  3545, 14665, 14665,  3545,  3545, 14665, -2713, -2713,
   29553, -2713, 55695, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, 36075, 49005,  1866, 41835, -2713, -2713, 42315, -2713,  1381,
   23109, -2713, -2713,   793, -2713, 23109,  2136, -2713, 23109, -2713,
   42315,  1869, -2713, 42315, -2713, 10120, 14665,  1909,  1043,  1909,
   -2713,  1870,  1852, -2713,   562, -2713, -2713,  2284, 24549,  2240,
   14665, -2713, -2713,   815, -2713,  2041,  1780,  1877, -2713, -2713,
   -2713, -2713, -2713, -2713, 29783, -2713,    71, 14665, -2713,   894,
    3089, -2713, -2713, -2713, -2713,  1780,   965, -2713, 42315,  2340,
    2228, -2713, -2713, 33917, -2713, -2713,  1823,  1823, -2713, -2713,
    2306, -2713, -2713, -2713, -2713,   977,   364, 28392, 42315, 42315,
    1882, -2713, -2713,  -102,  2259,   926,   752, -2713,  1338, 42315,
    2232, 38475,  2347,  1892, 42315,  1666,   834,   834, -2713,  2035,
   -2713,  2039, -2713, -2713,   226, -2713, 42315, -2713, -2713, 24549,
   -2713,  3210, 19210, 48060,   939, -2713, -2713,  3545,  3545,  3545,
   -2713,  2088, -2713, -2713,   960,  2358, -2713, 42315,   -58,    -4,
    1906,  1908, -2713, -2713,  1900, -2713, 14665,  1911, -2713, -2713,
   23109,   793,   966, -2713, 48060, 42315,   992, 48060, -2713,  1912,
     -70,  1917, -2713,  7595,  1905, -2713, -2713, -2713, -2713, -2713,
   -2713, 33917, 33917, 50445,  2092, -2713,  2092, -2713, 10625,  1971,
   42315, 14665,  2345,    59, -2713,   999,    46, 33917, 42315, -2713,
   35115, -2713,   815,   235,  1922, 14665, 29887,  2148, -2713, -2713,
    2178, -2713,  2233, -2713, 50445,  1986,   507,  2000, -2713, -2713,
   -2713, -2713,  1071,  1043,  1502,  1839,  1858,  1930, 42315,  1338,
     752,   460, -2713, -2713, -2713, -2713, -2713, -2713, -2713, -2713,
   -2713, -2713, -2713, -2713, -2713,  2361,  2141,  2363,  1756,  1001,
    3210,  1010, -2713,  2377,  1651,  1679, 36075,  1936, -2713,  1937,
   -2713, -2713, -2713, -2713, -2713, 50445,  1065, -2713, 33917, 42315,
   -2713, -2713, -2713, 42315,  2306,  1022, -2713, 14665,  1939, 14665,
   -2713, 17190,  1940, -2713,  2398, 14665,  1999,  1999,  1338, -2713,
   29949, 50445, 50445, 50445,  1572, 24549, -2713,  2063,   965,   815,
    1953,  1026, -2713, -2713, -2713, -2713, -2713,  2154, -2713, 30014,
    2172,   657,  2157,  1922, -2713, 14665, -2713,  2017, -2713, -2713,
   -2713,  2409, -2713, -2713, 38475,  1949,  1858,  1839,  1666,  2160,
   -2713,  2163,  1955,  1502, -2713, 14665,    48, -2713, -2713, 42315,
   -2713,  1039,  1956,  1957, -2713, -2713, -2713,  1958, 17190,  1959,
   -2713, 50445,  1961, 33917,  2101, -2713, -2713, -2713,  2345, -2713,
   -2713,   299,   299, -2713, -2713, 27430,  2178, 28392, -2713, 35115,
     871,   235,  2261, -2713, -2713, -2713, -2713,   115,  2177, -2713,
    2180, -2713, 33917, -2713,  1338, 38475, -2713, -2713, -2713, -2713,
   -2713, 24549,  1572,  1517, 17695, 17695,  1965,  1045, -2713,  2460,
    2131, -2713, -2713,  1973, -2713, -2713, -2713, 41835, 50445,  1556,
    1556,  1572,  2157, -2713, -2713, -2713, -2713, -2713,   627,   627,
    2353, -2713,  2037, -2713,  1858,  1046, -2713, 18705,  2121,   251,
   33056, -2713, -2713, -2713, -2713, -2713,  1979,  1983, -2713, -2713,
   -2713,   299, -2713, -2713, -2713, -2713, -2713,  2459, -2713,   155,
   -2713, -2713, -2713,  1502,  2449, -2713, -2713, -2713, -2713, -2713,
   -2713,  2477,  1556,   815, -2713, -2713, -2713,  1572, 18200,  1987,
   -2713, -2713, -2713, -2713
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
    1275,  1146,     0,  1029,  1028,  1146,     0,  1240,  1146,    67,
     966,     0,   793,     0,  1146,     0,  1275,     0,     0,     0,
       0,     0,     0,     0,     0,  1146,   143,     0,   792,  1146,
       0,     0,  1180,     0,     0,     0,     0,     0,     2,     4,
      11,    35,     9,    31,   108,    95,   148,   107,  1274,   249,
     111,    28,    12,    37,   791,     6,    18,    16,    21,    14,
      22,   987,    20,    17,     7,    32,    30,    29,    34,    25,
      23,    24,    19,    38,    36,    10,    27,    15,    13,     5,
      33,    26,     0,     8,  1145,  1144,  1138,     0,     0,     0,
       0,     0,  1139,   747,  1306,  1307,  1308,  1309,  1310,  1311,
    1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,
    1666,  1322,  1323,  1324,  1613,  1614,  1667,  1615,  1616,  1325,
    1326,  1327,  1328,  1329,  1330,  1331,  1332,  1617,  1618,  1333,
    1334,  1335,  1336,  1337,  1619,  1668,  1338,  1339,  1340,  1341,
    1342,  1343,  1669,  1344,  1345,  1346,  1347,  1348,  1349,  1350,
    1351,  1352,  1670,  1353,  1354,  1355,  1671,  1672,  1673,  1674,
    1675,  1356,  1357,  1358,  1359,  1360,  1361,  1362,  1620,  1621,
    1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,
    1373,  1374,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,
    1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1622,  1391,
    1392,  1393,  1394,  1395,  1623,  1396,  1397,  1398,  1624,  1399,
    1400,  1401,  1676,  1677,  1402,  1403,  1625,  1679,  1404,  1405,
    1626,  1627,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
    1680,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,  1422,
    1423,  1424,  1681,  1628,  1425,  1426,  1427,  1428,  1429,  1629,
    1630,  1631,  1430,  1682,  1683,  1431,  1684,  1432,  1433,  1434,
    1435,  1436,  1437,  1438,  1685,  1439,  1686,  1440,  1441,  1442,
    1443,  1444,  1445,  1446,  1447,  1632,  1448,  1449,  1450,  1451,
    1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,
    1462,  1463,  1464,  1465,  1633,  1688,  1634,  1466,  1467,  1468,
    1635,  1469,  1470,  1689,  1471,  1636,  1472,  1637,  1473,  1474,
    1475,  1476,  1477,  1478,  1479,  1480,  1481,  1638,  1690,  1482,
    1691,  1639,  1483,  1484,  1485,  1486,  1487,  1488,  1489,  1490,
    1491,  1492,  1493,  1494,  1640,  1495,  1496,  1641,  1497,  1498,
    1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,
    1642,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,
    1518,  1519,  1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,
    1692,  1528,  1529,  1530,  1643,  1531,  1532,  1533,  1534,  1535,
    1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,  1544,  1545,
    1546,  1693,  1547,  1644,  1548,  1549,  1550,  1694,  1551,  1552,
    1645,  1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,
    1562,  1563,  1564,  1565,  1646,  1566,  1647,  1567,  1568,  1569,
    1570,  1696,  1571,  1572,  1573,  1574,  1575,  1648,  1649,  1576,
    1577,  1650,  1578,  1651,  1579,  1580,  1652,  1581,  1582,  1583,
    1584,  1585,  1586,  1587,  1588,  1589,  1590,  1697,  1591,  1592,
    1593,  1594,  1595,  1653,  1654,  1596,  1698,  1597,  1598,  1599,
    1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,  1655,
    1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,
    1609,  1610,  1611,  1612,    94,     0,     0,   729,   748,   749,
     757,  1141,    66,     0,     0,     0,     0,     0,     0,   960,
     959,     0,  1196,   965,     0,     0,   747,   751,   828,  1625,
    1632,  1497,  1646,   826,   750,   727,   748,     0,  1054,  1055,
       0,  1063,     0,  1047,  1052,  1048,     0,  1073,  1065,  1074,
    1066,  1046,  1067,  1056,  1045,     0,  1075,     0,  1050,     0,
       0,     0,  1142,   973,  1275,     0,   996,  1017,   994,  1013,
    1010,   997,  1019,   992,  1003,  1001,  1006,   999,   982,   987,
    1005,  1002,   993,  1014,  1012,  1011,  1016,  1007,  1004,  1020,
    1018,   995,  1009,  1000,   998,   991,  1015,  1008,     0,  1239,
       0,     0,   746,  1244,  1245,  1242,  1241,   774,  1164,    90,
    1648,  1576,    91,    88,   794,    89,  1143,   142,   140,     0,
     697,  1404,  1442,  1535,  1546,  1648,     0,  1216,  1220,  1140,
    1653,   785,     0,   786,     0,   112,   290,   750,   721,  1179,
       0,  1184,     0,  1511,   117,   120,   766,   118,   108,     0,
       1,  1275,   138,   138,     0,   138,     0,   100,   108,   103,
     107,   250,   790,  1648,  1576,   784,   787,   986,  1304,     0,
       0,     0,  1412,     0,     0,  1412,     0,  1412,     0,  1412,
       0,     0,   689,     0,   690,   730,     0,   931,   964,   963,
     962,   961,   966,  1412,   977,   761,     0,  1252,  1253,     0,
       0,     0,     0,     0,  1191,   829,   827,  1061,  1062,     0,
    1053,  1049,  1051,     0,   758,  1699,   344,  1700,   373,   351,
     373,   373,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,
     340,   340,  1378,   353,  1709,  1710,  1711,  1412,  1712,  1713,
     341,   342,   378,  1714,  1715,  1716,  1717,  1718,     0,     0,
    1719,   373,  1720,   340,  1721,  1722,   345,  1723,   312,  1724,
       0,  1725,   343,   313,  1726,   381,   381,  1727,  1728,   368,
    1729,     0,  1076,   326,   327,   328,   329,   354,   355,   330,
     360,   361,   365,   331,   413,   340,  1072,   759,   760,  1412,
    1068,  1072,  1412,  1072,   723,  1412,     0,     0,   969,   984,
    1021,  1730,  1731,  1732,  1733,  1734,  1735,  1737,  1736,  1738,
    1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,
    1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,
    1759,  1760,  1763,  1761,  1762,  1764,  1765,  1766,  1767,  1768,
    1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1778,  1777,
    1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,
    1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,
    1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,
    1809,  1810,  1811,  1812,  1035,     0,  1036,  1026,   990,  1022,
    1023,  1275,    65,  1243,  1199,     0,     0,     0,     0,    92,
       0,     0,     0,   732,   734,   735,   618,   745,   692,     0,
    1614,  1615,  1616,   682,     0,  1617,  1618,  1619,  1668,   546,
     533,   542,   547,   534,   536,   543,  1620,  1621,   483,  1622,
    1623,   743,  1624,  1626,  1627,  1629,  1630,  1631,   538,   540,
    1633,  1634,     0,   744,  1636,  1637,  1478,  1639,  1640,  1642,
    1643,   544,  1645,  1647,  1648,  1649,  1650,  1651,   742,  1652,
     545,  1654,     0,     0,     0,   710,   637,     0,     0,     0,
     692,   517,     0,     0,   334,   335,   356,   357,   336,   362,
     363,   337,     0,   704,   414,   562,   692,   529,   593,   458,
       0,   515,   509,   700,   124,   698,     0,   510,   731,   692,
     683,   124,   696,  1219,  1217,  1223,  1218,     0,     0,     0,
       0,     0,   292,   291,   722,  1178,  1176,  1177,  1175,  1174,
    1181,     0,  1183,   987,   632,   634,     0,   683,   119,     0,
       0,     0,    98,    97,     3,   136,   137,     0,     0,     0,
       0,     0,     0,     0,     0,   234,   164,   165,   167,   231,
     235,   243,     0,   104,     0,   788,     0,   766,     0,     0,
    1201,     0,     0,     0,  1161,  1161,     0,     0,     0,     0,
       0,  1132,  1081,  1125,     0,     0,     0,     0,   809,   822,
       0,     0,     0,     0,     0,   819,     0,     0,   802,   796,
     798,  1083,     0,  1161,     0,  1079,     0,     0,     0,  1085,
     747,     0,  1666,  1667,  1668,  1669,  1670,   546,   533,   542,
     547,   543,     0,  1676,  1677,  1625,  1679,  1680,  1681,  1682,
    1683,  1684,  1685,  1686,  1632,  1688,  1689,  1690,  1691,  1692,
     544,  1694,  1646,  1696,  1652,   545,     0,  1698,     0,   521,
     640,   148,   638,   767,     0,   748,   754,   688,     0,   768,
    1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,  1856,
    1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,
    1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,  1876,
    1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,
    1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,  1905,  1906,
    1907,  1908,  1909,  1910,  1911,  1912,  1913,  1799,  1914,  1915,
    1916,  1917,  1918,   685,   728,   770,   769,   771,   691,     0,
       0,    63,     0,     0,   974,     0,   762,     0,     0,  1412,
    1249,  1412,   931,     0,   931,     0,  1190,  1193,  1064,  1060,
    1058,  1057,  1059,   372,   359,   367,   366,   637,   349,   348,
     347,     0,   346,     0,     0,   373,   373,   371,   350,   326,
       0,     0,     0,   377,     0,   375,     0,   320,   316,     0,
     386,   387,   388,   389,   396,   397,   394,   395,   390,   391,
     384,   385,   392,   393,   382,   383,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   332,   338,  1070,  1071,     0,
    1043,     0,     0,  1038,     0,     0,  1040,     0,     0,     0,
    1275,     0,   803,  1031,  1032,  1030,     0,     0,   823,  1025,
     989,   806,  1034,  1024,  1033,   988,   983,     0,  1198,    54,
    1229,  1228,  1237,   775,     0,   643,     0,  1275,    93,   795,
       0,   513,   637,   482,   681,     0,     0,     0,     0,     0,
       0,   519,   646,     0,     0,   438,     0,     0,     0,   661,
       0,   667,     0,     0,     0,   439,   418,   419,     0,   709,
     718,   636,     0,   517,   632,     0,   596,   598,     0,     0,
     511,   512,   518,     0,   738,     0,   413,   413,   703,   618,
       0,   611,     0,     0,   615,   616,   617,     0,     0,     0,
     695,     0,   626,   628,     0,     0,   454,   624,     0,   457,
       0,     0,     0,     0,   612,   613,   614,   605,   606,   607,
     608,   609,   610,   622,   604,   435,     0,     0,   565,   516,
       0,   434,   701,     0,   252,     0,   736,   733,     0,   684,
     252,  1231,  1235,  1236,     0,  1230,  1234,  1222,  1221,  1226,
    1224,  1227,  1225,     0,  1172,     0,  1169,   635,   247,   121,
     725,     0,     0,   116,   115,   158,   158,   149,   152,   158,
       0,   114,     0,   206,   207,     0,     0,     0,     0,   240,
     238,   732,   745,   194,   168,   193,     0,     0,   172,     0,
     198,   414,   233,   102,   162,   163,   166,   101,     0,   236,
       0,   246,   234,   167,     0,   789,  1305,  1207,  1269,     0,
       0,  1202,     0,     0,     0,     0,     0,     0,  1412,     0,
       0,   315,  1116,  1097,   883,  1160,     0,     0,     0,     0,
       0,     0,     0,  1124,  1121,  1122,  1123,     0,     0,     0,
       0,   807,   808,   821,     0,   812,   813,   810,   814,   815,
       0,     0,   800,   801,     0,     0,     0,     0,   799,     0,
       0,     0,     0,     0,     0,     0,     0,   148,   148,   148,
     527,     0,   146,   147,     0,     0,   686,   689,    53,   929,
     939,     0,     0,     0,     0,     0,     0,     0,   966,   978,
     976,   979,   981,   980,   763,     0,  1078,     0,     0,  1248,
    1246,     0,   928,   902,     0,  1195,     0,     0,  1412,   918,
    1192,     0,     0,     0,     0,  1072,     0,   370,   369,   321,
     317,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1077,  1072,  1069,  1072,   724,
       0,  1072,   972,   985,  1027,   804,   824,   805,   825,    86,
       0,    60,    68,    73,    51,     0,    51,     0,    70,    74,
      51,    69,    51,    64,     0,   776,     0,  1163,     0,  1165,
    1162,  1168,  1167,  1166,     0,   693,     0,     0,   680,   676,
       0,     0,     0,     0,     0,   647,   648,   649,   650,   651,
     652,   653,   654,   655,     0,     0,   656,     0,     0,     0,
     603,   611,   615,   616,   617,   612,   613,   614,   605,   606,
     607,   608,   609,   610,   630,     0,     0,     0,     0,     0,
       0,     0,     0,   485,     0,     0,   592,     0,   632,   666,
       0,     0,     0,     0,     0,     0,   632,   672,     0,     0,
       0,   708,     0,   705,   460,   692,     0,   599,   459,     0,
       0,     0,   740,   741,   415,   426,   461,   462,   430,   431,
     432,   436,   773,   772,   702,     0,   694,     0,     0,   416,
     440,   445,     0,   673,   478,     0,   466,     0,   453,     0,
     464,   468,   441,   456,     0,   437,     0,   695,   627,   629,
       0,   625,     0,   427,   428,   429,   420,   421,   422,   423,
     424,   425,   433,   602,   600,   601,     0,     0,     0,   567,
       0,     0,   463,   699,  1404,  1442,     0,   135,   135,   135,
     123,   133,     0,   304,   148,   710,   304,     0,   413,   293,
     766,  1182,  1170,  1171,   633,   726,   765,  1275,   156,   157,
     161,   161,     0,     0,   161,   139,   113,  1643,  1531,     0,
       0,     0,     0,   199,   241,     0,   232,   196,   197,     0,
     195,   732,   200,   731,   201,   204,   205,   173,   242,   719,
     244,     0,   237,   106,   105,   248,     0,  1205,     0,     0,
       0,     0,  1264,  1281,  1203,     0,   692,  1297,  1299,   252,
       0,     0,  1082,     0,  1412,  1099,     0,     0,     0,     0,
       0,     0,   833,     0,   933,   833,  1137,  1412,  1072,  1412,
    1072,  1310,  1379,  1547,   907,  1128,     0,     0,  1095,  1154,
     936,     0,   892,  1118,  1133,  1147,     0,     0,   797,  1084,
     811,   816,  1150,   820,   817,  1258,   818,  1161,     0,  1080,
       0,  1148,     0,  1256,     0,     0,  1086,  1152,  1260,   146,
     146,   146,     0,   639,     0,     0,     0,   641,   642,   688,
       0,    52,     0,   930,     0,    62,    42,    43,    53,     0,
     931,     0,   931,   977,     0,     0,   764,     0,     0,     0,
       0,   315,   921,   919,   952,     0,   926,   920,     0,     0,
     878,     0,   782,     0,     0,  1254,     0,     0,     0,     0,
       0,   339,   352,  1044,   326,     0,   380,   379,   381,   381,
     326,     0,   310,     0,   324,     0,   364,   333,   406,   407,
     408,   409,   410,   411,   412,  1037,  1039,     0,  1041,    55,
       0,    58,     0,    61,    57,    56,    50,     0,    81,     0,
       0,     0,     0,     0,     0,  1238,   644,   141,   484,     0,
       0,   677,     0,     0,   560,     0,   535,   537,   550,     0,
     539,   541,     0,   619,     0,     0,     0,   551,   487,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   504,   503,
     552,   591,     0,     0,   664,   665,     0,   553,     0,     0,
     671,     0,     0,     0,   558,     0,     0,     0,     0,   717,
     514,   633,   597,   595,   520,   413,     0,     0,     0,     0,
       0,     0,     0,   467,   455,     0,   465,   469,     0,     0,
       0,   449,     0,     0,   447,   479,   443,     0,     0,   480,
       0,     0,   566,   575,   135,   135,   135,   135,   132,   134,
       0,     0,     0,     0,  1531,     0,   276,     0,   255,   251,
     253,   263,   276,   281,   530,   302,   531,   750,     0,   211,
     146,   718,   211,     0,  1232,  1173,     0,     0,   150,   151,
     153,     0,   620,   161,   155,   203,   202,     0,   171,   239,
     169,     0,   245,  1206,     0,  1286,  1270,  1268,  1288,  1287,
       0,   692,  1295,     0,     0,  1286,     0,  1289,  1303,  1300,
    1205,     0,     0,     0,     0,   882,     0,     0,     0,   833,
       0,   941,     0,   948,     0,     0,   933,   914,  1117,     0,
       0,     0,  1091,  1136,  1109,  1101,  1087,  1115,     0,     0,
    1120,     0,  1113,  1130,  1131,  1129,   843,   868,  1134,     0,
       0,     0,   879,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   148,   144,   145,
     522,   687,    84,    85,   802,    83,   940,     0,     0,   928,
       0,  1195,   975,   966,     0,     0,  1249,   931,     0,   906,
     902,   927,   900,   899,   901,     0,   783,   973,     0,   777,
    1194,     0,  1255,     0,  1251,     0,  1189,   358,   323,     0,
     376,   374,   322,     0,   318,   325,  1072,    87,     0,    46,
      82,    71,    76,     0,    80,    78,    77,    72,    75,     0,
     679,   675,     0,   532,   645,     0,   631,   659,   658,   486,
     495,   499,   500,   501,   660,     0,     0,     0,   496,   497,
     498,   489,   490,   491,   492,   493,   494,   502,   669,   668,
     662,   663,     0,   555,   556,   557,   670,     0,   707,   632,
     712,   714,     0,     0,   594,   739,   417,     0,     0,   446,
     674,   470,     0,     0,     0,   442,   619,     0,     0,     0,
       0,     0,   451,     0,     0,     0,     0,     0,   528,     0,
       0,     0,     0,   126,   125,   131,   276,   281,     0,   108,
     111,     0,   263,     0,   275,   190,   274,   190,   256,     0,
     287,   285,     0,   287,     0,   287,     0,   190,     0,   277,
     190,   274,     0,   294,   722,   303,     0,   228,     0,   706,
     228,     0,   122,   159,   160,     0,   154,   170,   720,  1204,
       0,  1200,     0,  1276,     0,     0,  1273,  1263,     0,     0,
    1298,  1286,  1277,  1155,   833,     0,     0,  1098,     0,   950,
     894,   942,   925,   909,     0,     0,     0,   834,     0,   967,
       0,     0,   915,     0,     0,     0,     0,   895,     0,     0,
     854,     0,     0,   925,     0,   932,   850,   851,     0,  1090,
    1110,     0,  1106,     0,  1135,     0,     0,     0,     0,     0,
    1093,  1105,     0,  1088,     0,  1072,  1072,  1096,   758,  1699,
    1700,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,
    1710,  1825,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,
    1834,  1719,   840,  1720,  1478,  1721,  1722,  1723,  1724,     0,
    1725,   313,  1726,  1727,  1728,  1729,   605,   606,   943,   837,
     839,     0,   838,   935,   835,   759,   836,   938,   893,  1151,
    1259,     0,  1149,     0,  1257,  1158,  1156,  1153,  1261,   525,
     526,   523,   146,    65,    45,     0,     0,   782,     0,     0,
    1412,     0,  1195,  1247,   928,     0,   958,   878,   953,     0,
     782,   780,     0,  1215,  1250,     0,     0,     0,   319,   311,
    1042,    59,     0,    79,   678,   548,   559,   657,     0,     0,
       0,     0,   554,   549,   715,   716,   711,   476,   474,   471,
       0,   472,   450,     0,     0,   448,   444,     0,   481,   561,
       0,   564,   578,   573,   574,   130,   129,   128,   127,   262,
     260,     0,   265,   272,   183,   189,   261,     0,   259,   254,
       0,   286,   282,     0,   283,     0,     0,   284,     0,   257,
       0,   272,   258,     0,   301,     0,     0,   569,   522,   569,
    1233,     0,  1285,  1265,     0,  1266,  1296,     0,     0,     0,
       0,  1290,  1262,   946,  1100,     0,   925,     0,   833,   911,
     910,   913,   908,   912,     0,   968,     0,     0,   852,     0,
     859,   897,   898,   896,   853,   925,   931,   855,     0,     0,
       0,  1102,  1092,  1089,  1094,  1103,     0,     0,  1104,  1107,
     309,  1119,  1112,  1834,  1842,     0,     0,     0,     0,     0,
       0,    41,    48,   802,     0,     0,   902,   779,     0,     0,
       0,   928,     0,     0,     0,   782,     0,     0,   830,     0,
     875,     0,   970,   781,     0,  1208,     0,  1187,  1188,     0,
      47,   505,     0,     0,     0,   713,   473,   477,   475,   452,
     563,   580,   577,   297,     0,   300,   264,     0,     0,   178,
     185,     0,   188,   182,     0,   266,     0,     0,   268,   270,
       0,     0,     0,   305,     0,     0,     0,   727,   209,  1354,
    1626,  1530,   210,     0,   214,   208,   212,   217,   219,   218,
     220,   216,   227,     0,   230,   737,   230,   621,     0,     0,
       0,     0,  1292,  1292,  1301,     0,     0,  1278,     0,   833,
       0,   924,   947,   864,   842,     0,     0,     0,   849,   856,
     957,   858,     0,  1111,     0,  1127,     0,     0,   937,  1159,
    1157,   524,    65,     0,  1195,   878,  1215,     0,     0,     0,
     902,   973,   778,   891,   884,   885,   886,   887,   888,   889,
     890,   905,   904,   876,   877,     0,     0,     0,  1189,     0,
     506,     0,   507,     0,   148,   302,     0,     0,   296,     0,
     176,   174,   177,   179,   175,     0,     0,   273,   289,     0,
     269,   267,   278,     0,   309,     0,   280,     0,     0,     0,
     221,   215,   568,   570,     0,     0,   181,   181,     0,  1272,
       0,     0,  1294,  1294,   304,     0,  1280,     0,   931,   949,
     923,     0,   916,   862,   861,   863,   867,     0,   865,     0,
     881,     0,   874,   842,   308,     0,  1114,     0,   944,    40,
      44,     0,   832,  1209,   928,     0,  1215,   878,   782,     0,
    1212,     0,     0,  1195,   508,     0,   583,   295,   298,     0,
     271,     0,     0,     0,   306,   307,   279,     0,     0,     0,
     213,     0,     0,   229,     0,   110,   109,  1267,  1292,  1291,
    1293,   158,   158,  1271,  1302,     0,   957,     0,   903,     0,
       0,   864,     0,   857,   954,   955,   956,     0,   870,   860,
     871,  1108,  1126,   945,     0,   928,  1210,   831,   971,  1213,
    1214,     0,   304,   579,     0,     0,     0,     0,   186,     0,
     192,   288,   223,     0,   222,   571,   572,   183,  1294,   161,
     161,   304,   874,   922,   917,   841,   866,   880,     0,     0,
       0,   872,     0,   873,  1215,     0,  1185,  1613,  1355,  1583,
       0,   581,   584,   582,   576,   299,     0,     0,   184,   224,
     180,   158,  1283,  1282,  1279,   833,   846,     0,   845,     0,
     934,   869,  1211,  1195,     0,   588,   587,   586,   590,   589,
     187,     0,   161,   951,   844,   848,   847,   304,     0,     0,
    1284,  1186,   585,   191
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2713, -2713, -2713,  1863,    74, -2713, -2713, -2713, -2713,  -522,
     530, -2318, -2713,   475, -2713, -2713, -2713, -2713,  -112,   243,
   -2713,    82, -2713, -2713,    83,     7,  1854,   -35,   -13,    -8,
      23,    50,  1500,  1532, -2713, -1327,   644, -2713, -2713, -2713,
   -1860,  -633,   -36, -2713,   679, -1435, -1784,  -523,  1021,  1489,
    1499,  -384,  -400, -2713,  -519, -2713, -1175, -2713, -2713,   670,
    1056, -1315, -1246, -2713,   360, -2713,  -458,  -388, -2713, -2713,
   -2713, -2713, -2713,   104,  -290,  -518,  1035, -2713,  1520, -2713,
   -2713, -2713, -2713, -1760, -1331, -2713,   664, -2068,   383, -2010,
   -1859,   141,   129, -1076,  -260,    20,   389,  -349, -2713, -2713,
    -346, -1772, -2482,  -362,  -357, -2713, -2713, -2713,  -526, -1177,
    -720, -2713, -2713,   206,  2083, -2713, -2713, -2713,  2265,  2302,
   -2713, -2713,  2712,  2776, -2713,  -570,  2830,  2021,  -710,  1200,
   -1081,  1211, -1102, -1094,  -551,  1212,  1214, -1306,  3554, -1619,
    -879,     6, -2713, -2402, -1708, -2713, -2713, -2713,  -119, -2713,
    -429, -2713,  -427, -2713, -2713, -2713,  -465, -2712, -2713,  1141,
     825, -2713, -2713, -2713, -1309, -2713,  4072,   731, -2713, -1705,
    -929,  -614,  -866,  -808, -1060, -1199, -2713, -2713, -2713, -2713,
   -2713, -2713, -1721, -1787,  -476,   788, -2713, -2713,   895, -2713,
   -2713, -2713,  -632,   998,  -583,  -901,   789, -2713,   130,  1967,
   -1403, -2713,   754, -1994, -2713, -2713,   413, -2713,  2300,  -473,
    -988,  1030, -1069,    69, -2713,  -733,   146,  1659,  2457, -2181,
   -2713, -2713,  -498, -2236,  -982, -2713,  -636, -2713,    84,    88,
   -2366, -1431,    89, -2713,  1003,    94,  -654, -1042,  -851, -1054,
   -2713,    77,    97,     4, -1842, -2461,  -365, -2713,  -470, -2713,
    -115, -2713,  -413, -2713,  -542,  -421,  -451, -2427, -1017, -2713,
    1552,  -154, -2713,   711, -2713, -2194, -2713, -2713,   699, -2713,
   -1000, -2713, -1903,   322,  -395, -2219, -2196, -1846,  -662,   390,
    -399,   368, -1815,  -836, -2713,   724, -2713,  -383, -2713,  -630,
   -1586,    98, -2191,   100,   649, -2713, -2713,  -450, -2713,  -487,
    -479, -2713, -2713,    16,  -843,  1315, -2713,   101, -2713, -2713,
    1324,  -725, -2713,  1376,   102,   107, -2713, -2713,   398, -2713,
    1095, -2713,   386,  -598,   733, -2713,   116,  1409,   117,  -981,
     119, -2713,   799,   120,  1183, -2713, -2713, -2713,     9, -2713,
    -251, -2713, -2713, -2217, -2713, -2713, -2713,    28,  1592,   431,
   -2713,    13, -2558,   122,   663, -2713,   978, -2713,   708,   123,
     124,    66,    14,   357,   125, -2713, -2713,   126,    29,    30,
   -2713, -2713, -2713, -2713,   189,   449, -2713,  -289, -1945,   -31,
   -2713, -2546, -2567, -2713, -2713,  -344, -2510, -1782,  1209,    -6,
   -2713, -2713, -2713,  -529, -2713, -2177
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    37,    38,    39,   546,  1958,  2733,  2308,  2734,  2027,
    1952,  1318,  2023,  1639,  1573,  1319,   494,  1653,  2309,  2264,
    1640,   547,   592,   593,   548,   549,   951,    45,    46,    47,
     612,   624,   625,  1424,  1810,  2140,  1017,  1462,   599,   600,
    1946,   636,  1563,  1457,  1458,  1830,  2168,  1486,  1487,  1026,
    1027,  2780,  2985,  2781,  2782,  2645,  2646,  3068,  1474,  1478,
    1479,  1852,  1842,  1465,  2427,  2804,  2805,  2806,  2807,  2808,
    2809,  2810,   952,  2667,  2916,  1482,  1483,  1029,  1030,  1031,
    1491,  1862,    49,    50,  1813,  2148,  2149,  2150,  2151,  2404,
    2405,  2420,  2416,  2652,  2788,  2152,  2153,  2773,  2774,  2888,
    2423,  2159,  2792,  2793,  2845,  1615,   751,  1893,  1325,  1258,
     753,   953,   754,  1238,   954,  1242,   756,   955,   956,   957,
     759,   958,   959,   960,   762,  1234,   961,   962,  1253,  1277,
    1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  1004,  1712,
     964,   965,   966,  2155,   967,  1418,  1799,  2133,  2814,  2912,
    2913,  2388,  2633,  2771,  2884,  3026,  3061,  3062,   968,   969,
    1366,  1367,  1368,  1796,  1413,  1414,   970,  2549,  1416,  1705,
    1005,  1727,  1362,  1121,  1122,  1326,  1684,  1685,  1708,  2056,
    1715,  1720,  2084,  2085,  1728,  1764,   971,  1668,  1669,  2042,
    1335,   972,   664,  1128,   665,  1331,  1758,   981,   973,   974,
     975,  1359,  1360,  2099,  2361,  2362,  1733,  1858,   616,  1450,
    2784,   774,  1203,   976,   977,   978,   979,  1007,   618,  1123,
     487,   765,  2990,  1216,  1011,  1124,  1904,  1754,   550,   551,
    2289,  1223,   552,    54,   606,   553,  1589,  1544,  1320,  1070,
    1534,  1311,   554,   555,  2213,  2553,  2938,  2237,  3080,  2485,
    2486,  2935,  2936,  2216,  1905,  3008,  3009,  2286,  1526,  3003,
    1972,  2871,  1911,  1892,  2487,  1980,  2831,  2586,  1906,  2467,
    1973,  2931,  1600,  1974,  2932,  2688,  1975,  1570,  1593,  2217,
    3010,  1912,  1571,  2212,  2554,  1514,  1976,  2942,  1977,   504,
    2471,   556,   778,   557,  1214,  1580,    60,   648,  1312,   558,
    1313,  1314,   865,    61,  1321,   867,   868,   560,   539,   540,
     771,  1290,   541,   766,   561,   562,  2224,  2225,  2226,  1907,
    1051,  2946,  1908,  1052,  1053,  2228,   563,    86,   564,  1517,
     565,   878,  1660,   566,  1000,   621,  1001,  1003,   567,  2758,
    2597,  1227,  1601,  1984,   505,    70,    71,   568,  1041,  2185,
    1867,   569,  2755,   570,   607,   608,  1322,  1437,  1323,   571,
     572,   585,   573,  1590,   574,   683,  1597,   575,   576,   577,
    1873,  1499,  2679,    82,  2192,  1877,  2195,  2824,  2441,  2190,
    2196,  2922,  2991,  2193,  1878,  1879,  2825,  1880,    83,   516,
     489,   490,   768,  1206,  1126,  1207
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     488,   629,  1069,   676,    57,  1211,  1032,    43,  1006,    69,
     637,   752,   484,    73,    77,  1548,   870,  1310,  1365,  1803,
    1249,  1831,  1451,    48,  1834,  1315,  1547,  1204,    72,    80,
      81,  1523,   559,  1208,   994,   639,  1255,   611,  1704,    48,
     640,   770,  1212,  1513,  2162,  1606,  1293,  2169,  1296,  1371,
    2174,   615,  2147,  2218,  2578,  1496,  1559,   779,  1071,  2551,
    1075,   645,  1079,  2556,  1519,  1419,   864,   773,  1324,  2120,
    1742,  1743,  1610,  2576,    40,   485,  2211,  2401,  1427,  2254,
    2255,  2256,    41,    42,    51,   627,  2587,   586,    52,    53,
    2058,  2059,  1552,  2197,    55,  2079,  2590,    56,    58,  1816,
      59,    62,    63,  2360,  2156,   492,  2147,    64,  2266,   871,
     658,  -381,   887,  1025,  -373,  -755,    65,    66,  1028,    67,
      68,  1287,    74,    75,    76,    78,    79,   -96,   -99,  2061,
    1235,  1236,  1287,  2062,  2921,  1308,  1436,  2407,  2107,  2108,
    -755,  1287,  1308,  2419,  1961,  1481,  1584,  -730,  -752,  -752,
    1869,  2692,  2275,  -378,  2040,   582, -1671,  -378,  2156,   887,
    2748,  1247,  1854,  1299, -1818, -1818,   583,   583, -1672, -1678,
     619, -1673, -1844, -1844, -1674, -1687, -1819, -1819, -1675, -1820,
   -1820,  2796, -1821, -1821,  -381, -1678, -1822, -1822, -1687,   582,
   -1693, -1695, -1695, -1825, -1825, -1697, -1834, -1834, -1840, -1840,
   -1842, -1842,  1756, -1845, -1845,   689,  1532,  -756, -1671,  1535,
    1536,  2737,  -756, -1672, -1673, -1674,  2314,  2316,  1504,  1229,
    -753,  -753,   -96,   -99,  2752,  1255,  1380, -1675,  -603,  1376,
    1381,  1460,   -49,  1857,   649,  -603,  1756,  3048,  1287,  2775,
    1679,  -340,    87,  -353,   995,  1793,  1956, -1693,  1680,  2879,
    2447,  2890,  1794,   634,  1308,  2731,  1308,  1308,  1389,  2282,
    2834,  1677,  2677,  1230,  2707,  2591,  2848, -1697,  -368,   634,
     582,   582,  3095,  1557,     3,     4,  2822,  2923,  1515,  2749,
    1431,  1302,   582,  1302,  1558,   632,   887,  2875,   887,  1550,
    1391,  2703,  2061,  2417,  2750,  2876,  2062,  2350,  2953,   886,
    2428,  1860,  2061,  1463,  1021,  2892,  2062,  2460,  2908, -1847,
   -1847, -1847,  1944,  2905,   597,  2726,  1015,  1507,  1380,  2926,
    1800,   887,   650,  -623,  1308,  1235,  1236,  1308,  1308,  1021,
    -623,  1380,  1361,  1870,  2433,  2328,  1531,  1515,  1828,   870,
    2649,  1537,  1890,  1380,  2653,  3084,   870,  1381,  2246,  2326,
    2689,  1247,  1250,   633,  2893,  -802,  2992,  2822,  2725,  1542,
    -802,   622,  1208,  1389,  2351,  2742,   579,  2459,  1372,  1380,
     630,  1603,  2609,  1381,  1251,  1389,  1890,  3024,  1023,  2862,
   -1815, -1815,  1391,  1543,  1316,  2400,  3102,  2419,  2743,  2436,
    2407,  2211,  2595,  2211,  1432,  1391,    84,  1429,  3016,  2434,
    1891,  1389,    26,  1023,    88,   578,  3025,  1391,  1861,  1464,
    1288,   996,    89,   997,   -96,   -99,  3086,   598,  2214,  1016,
    1494,  1288,  1719,  2690,  1429,  1829,  2592,  1024,  2952,  -225,
    1288,   634,  3096,  1391,  2208,  2156,  2891,  2156,  1231,    31,
    1524,    85,  3038,  2330,  2331,  2332,  2333,  2334,    90,  2704,
    2338,  2339,  2340,  2341,  2342,  2343,  2344,  2345,  2346,  2347,
     870,   870,  1801,  1561,  2877,  1704,  1666,  2829,  1945,  1509,
    1713,  3071,  1667,  1522,  2678,  2693,  2751,   -96,   -99,  1656,
      33,  2141,  2142,  1538,  2775,  2927,  2839,  3027,  1562,  2846,
    2894,  1539,  1957,   722,    34,    91,  3082,   620,  2603,  2701,
     666,  1943,   690,  2378,  2379,  1885,  2682,   580,  1604,  1492,
     629,  3055,  2164,  2061,  1493,  1433,  1966,  2062,    35,  1613,
    2009,  1614,  2610,  2822,  2172,  1854,  1619,  1288,  2010,  2012,
    3017,   767,  1871,  1338,  2949,  1548,  3043,  2639,  2278,   869,
    2008,  2607,  2855,  1620,    26,  1232,  2551,   581,  2200,  2732,
    2556,   651,   493,  1446,  3049,  2215,   662,  1515,   988,  1233,
     663,   866,  1595,  1757,  1289,  2746,  3087,    48,  1516,  1250,
    2835,   635,  2702,  1636,  1638,  1292,  2469,  2262,  2263,  1204,
    2068,    31,  2785,  1510,  1295,  -603,  1843,  2789,   -96,   -99,
    2791,  1251,  3018,   488,   488,  2177,  1943,  2122,  2222,   639,
    2470,  2004,  1795,  1033,   640,  1252,  1673,  1674,  -373,  -755,
    1687,  1688,  2683,  2077,  2747,  2266,   488,  1814,  1551,  2822,
    2765,   684,    33,  1361,  1245,  1246,  2502,   -96,   -99,   -96,
     -99,  2933,  2776,  1525,  -755,    57,   999,  2951,    43,   662,
      69,  -730,  1250,   663,    73,    77,   873,  -378,  2147,  1375,
   -1671,  1332,  2147,    36,    48,  1125,   488,  1205,  1354,    72,
      80,    81, -1672, -1678,  1251, -1673,  2957,  2681, -1674, -1687,
    2958,  1040, -1675,  1008,    36,  1607,  1608,  2247,  1254, -1678,
    -623,  1641, -1687,  1920, -1693, -1695, -1695,  3076,  1524, -1697,
    2934,  1586,   998,  1923,   677,  1522,  1926,  2335,   641,  1665,
    2156,  -756, -1671,  2219,  2156,    40,  -756, -1672, -1673, -1674,
    1412,   661,  2730,    41,    42,    51,  1664,   752,  1361,    52,
      53, -1675,  2900,  1671,   872,    55,   583,   874,    56,    58,
    2671,    59,    62,    63,   767,  1237,  1717,  1241,    64,  1665,
    1208, -1693,  2096,  1853,  1853,  1704,  3022,    65,    66,   985,
      67,    68,  1753,    74,    75,    76,    78,    79,  2576,  1740,
    2735, -1697,  -368,  1625,  1425,  1817,   678,  1306,  1307,  1306,
    1307,   488,   870,  2074,  2075,  2076,  2077, -1847, -1847, -1847,
    1372,  2072,  2073,  2074,  2075,  2076,  2077,  1665,  1986,   647,
    2024,  1681,  1204,   770,  1627,  1665,  1250,  1208,  2025,  2365,
    1631,  1308,  2716,  2717,   989,   631,  1546,  2389,  2390,  2391,
    2392,  1308,  1542,  1633,  1308,  2220,  2551,  2298,  1251,  2743,
    2556,  1628,   864,  2302,  1409,  1410,  1411,  1412,  1635,  3004,
    1713,  1713,  1252,   887,  2100,  1713,  1543,  2336,  2165,  1524,
    2030,  -802,  -802,   495,  -314,  2031,  2832,  2337,  1407,  1408,
    1409,  1410,  1411,  1412,  1744,   679,   672,  2700,  2847,  1524,
    2240,  1043,   869,  2863,  1548,  1585,  3097,  1044,  1524,   869,
    1125,   767,  1365,  2241,   687,   990,  1918,  1250,  1713,  1713,
    1993,  1525,  2257,  1466,  2003,  2005,  1910,   488,   881,  2409,
    2147,   680,   688,  1759,    48,  2147,  2032,  3077,  2147,  1251,
    2489,  2015,  2709,  2016,   496,  1882,  2018,   495,  1308,  1056,
    2714,   875,   629,  1254,  2864,   691,   488,  1239,  2112,  2374,
    1777,  1308,   876,  2865,  1939,  1940,  1941,   681,  1057,  1467,
   -1197,  2172,  1919,  2156,  2463,   692,   488,   488,   488,  1248,
     488,   488,  2156,  1522,   693,  2113,  2248,  2156,  1965,  1204,
    2156,  1929,  2866,  1637,  1043,  1765,  1936,  1553,   887,   777,
    1044,  2283,  3005,  2473,   488,  2410,  2290,  2188,   496,  1046,
    2156,  1286,  2490,  1045,   682,  2198,  3078,  1556,   877,  1058,
    1515,  -314,  1766,   869,   869,  1894,  2245,  2929,  1990,  2761,
    1466,  1518,  2072,  2073,  2074,  2075,  2076,  2077,   668,  2411,
     669,  2947,  2189,  3079,  1453,  1454,   879,  1461,  1585,   640,
     640,  2476,   640,   488,  1309,  2412,   662,   488,   488,  2464,
     663,  1309,  1964,  2867,  2221,  2413,  2222,   595,   488,  2175,
    2147,  1524,  1525,   613,   887,  2868,  1467,  1300,  1469,  3006,
    1301,   513,  1921,  1043,  1574,   543,  1778,  1924,   582,  1044,
     767,  2156,  1525,   588,  2223,  2491,   662,   646,  1040,  2414,
    1428,  1525,  1779,  2114,   626,   626,  1045,  1780,  2115,  2778,
    1059,  2011,  2013,  2014,  2779,  1125,   499,   670,   500,   671,
    2786,   679,  2156,  1524,  2163,  2465,  1125,  2466,   881,   662,
    2002,  -730,  1549,   663,  1522,  1767,  1468,   880,  1470,  1374,
    1768, -1813, -1813,   503,  1781,  1769,  2176,  2176,  1377,  2090,
    1125,   987,   870,  1239,  1522,   882,  1575,   680,   654,  1262,
    1263,  1060,  1426,  1522,  2029,   870,  1704,  1046,  2033,  1061,
    2034,  1248,  2036,  1435,  1021,  1309,  1309, -1814, -1814,  1022,
     499,  1062,   500,  2880,  1574,  1469,  2415,   886,  2110,  2249,
    2061,  -147,  2993,  2274,  2062,  1045,  -147,  2063,  2064,  2065,
   -1816, -1816,  1444,  1576,   502,  1445,  2837,   503,  1365,  2500,
    1043,  2480,  1063,  2230,  2620,  2232,  1044,   993,  2156,  2310,
    2493,  2160,  1048,  1713,  1713,  1713,  1713,  1713,  1268,  1269,
    1713,  1713,  1713,  1713,  1713,  1713,  1713,  1713,  1713,  1713,
     682,  2253,  1981,  1002,  2492,  1470,  2501,  2457,  1023,  1205,
    2116,   767,  1049,  1978,  2481,  1979,  2739,  2156,  1579,  1065,
    1046,  2117,  2573,  1581,  1525,  -147,  2869,  1582,  1583,  2870,
    2482,   488,  2648,  3093,  2787,  1009,    26,   767,   767, -1817,
   -1817,  1066,  2659,  1713,  1713,  2662,  2089,  1770,  2091,  2092,
    3056,  1782,  1268,  1269,  1010,  3072,  3073,  1024,  1771, -1823,
   -1823,  1068,  2299,  1576,   983,   984,  2134,   986,  2135,  3074,
    1012,  1047,  2410,    31,  -147,  1048,  1525,  1018,  1655,  1020,
    1050,  1656,  1045,   767,  1657,  1013,  1522,  1658,  2300,  2301,
    2443,  1953, -1824, -1824,  1954,   869, -1826, -1826,  1272,  1273,
    2271,  1994, -1827, -1827,  1658,  1049,  2411,  2000,  3100,  1046,
    2001,  1205,  2019,  2156,    33,  2020,  2238,   866,  2242,  2239,
    1019,  2243,  2655,    48,   488,  3101,   488,  2136,  2483,  2137,
     488,   488,  2413,  1036,  1659,  2484,  2066,  2654,  1522,  2657,
     488,  1034,   488,   488,   488,   488,   488,   488,   488,  2292,
      48,  2444,  1656,  1038,  2445,  1661,  1662,  1663,  2067,  2233,
    1073,  2235,  1272,  1273,  1048,  2448,    36,   488,  2449,   488,
    2456,  3045,  2458,  1050,   767,   488,   488,   488,   488,   488,
     488,   488,  1205,  1035,  1641,  2582,   488,   488,  1954,  2552,
    2601,   488,  1039,  2602,  1074,   488, -1828, -1828,   488,   488,
     488,   488,   488,   488,   488,   488,   488,  2621,  2766,   488,
    1658,  1658,  2764,  1042,    92,  1803,   488,   491,  2172,  1125,
      26,  1043,  1205,   542, -1829, -1829,  2854,  1044,  2068,  1954,
    1379, -1830, -1830,  1380,   596,  1054,  1046,  1381,   609,  2882,
     886,   488,  1658,  2061,  1055,  1894,  1209,  2062,  2500,  1836,
    2063,  2064,  2065,  2415,   640,  2684,  1072,    31,  1076,   488,
    2885,   999,  1050,  2886,  1210,  1389,  2902,  2367,  1665,  2903,
     488,   488, -1847,  1379,  1213,  -108,  1380,  2409,  1215,  2356,
    1381,  1382,  1383,  1384,  1385,  1386,  1217,  1077,  1686,  -108,
    1218,  1048,  2906,   870,  -108,  2903,  1226,  1391,    33,  2924,
    1387,  2963,  2925,  1228,  2925,   767,  1872,  1308,  1389,  1233,
    2964,  1237,    34,  1658,  1205,  1390,  1205,  2322,  1241,  2306,
     886,  1078,  2976,  2061,  1240,  2903,  2998,  2062,  1043,  2999,
    2063,  2064,  2065,  1045,  1044,  2329,    35, -1831, -1831,  3028,
    1391,   686,  3029,  -108,  1243,  3065,  3083,  2368,  2903,  2925,
      36, -1832, -1832,  2410,  1244,  1125,  3039,  3040,   488,   488,
    1256,   488,  2352,  -108,  2881,  1257,  1665,  2109,  1259,  2357,
    1317,   776, -1833, -1833,  2424, -1835, -1835, -1836, -1836,  1205,
    1818,  2600, -1837, -1837, -1838, -1838,  1291,  2411,  1294,  1050,
    1125, -1839, -1839,  1297,  2674,  1298,   488,  1713, -1847, -1841,
   -1841,  1982,  1328,  2412,  1327,  2557,  1330,  1910, -1843, -1843,
     767,  -344,  -108,  2413, -1847,  -351,  1043, -1846, -1846, -1847,
    1336,  -108,  1044,  1338,  2572,  2069,  2070,  2071,  1337,  2072,
    2073,  2074,  2075,  2076,  2077,   869,  3092,  1564,  1565,  1339,
    1045,  1392,  2712,  2579,  1855,  1856,  -341,  2414,   869,  1340,
    1125,  2067,   767,   626,  -199,  -199, -1847,  1393,  1270,  1271,
      36,   488,  1394,    26,  1342,   486,   488,  1272,  1273,  -225,
     514,  -203,  -203,  -226,   514,  -342,   629,  -202,  -202,   584,
     584,   587,   514,   594,  1395,  1396,   594,  1046,  2172,   594,
     617,  2852,  1343,   514,   514,  1344,   632,  1440,  1442,  1397,
      31,  -345,  1346,   488,   488,   488,  1347,    26,   488,  1348,
    -148,  1400,  1349,   594,  2548,  -148,   488,   488,   488,   488,
    1350,  2068,  -343,  1351,  1352,  1358,   488,   629,  1045,  1713,
     488,  2067,  1353,   488,  2415,  1354,  1370,  1398,  1881,  1373,
    1399,    33,  1048,  1417,    31,  1420,   617,   514,   617,   617,
     617,   488,   488,  1422,  1400,    34,   488,  1401,  1423,  2310,
    1308,  -108,  1438,  1447,   633,  1308,  1448,  1452,  1022,  1024,
     488,  1488,  1049,   488,  1490,   488,  1495,  2599,  1502,    35,
    2721,  2722,  1521,  1520,  -148,    33,  1527,  1309,  1528,  2889,
    1522,  2028,  1208,    36,  1046,   488,  1529,  1533,  1540,    34,
    1309,  2068,  1541, -1847,  1555,  1545,   488,  2889,  1567,  1560,
    1568,  1665,  1572,  1636,  1638,  1578,  1577,  1585,  2154,  1249,
    1588,  1592,  1591,    35,  2744,   662,   488,  1594,  1012,   663,
    1596,  1602,   887,  -148,  1659,  1609,   629,    36,  1611,  1612,
    1050,  1617,   634,   488,   488,  1927,  1402,  1618,  1621,  1048,
      48,  1690,  1622,  1632,    44,  1661,  1662,  1663,  1691,  1623,
     488,  1692,  1693,  1694,  1654,  1667,  1624,  1672,  1380,  1732,
      44,  1734,  2154,  1736,  1365,  1737,  2552,   488,  1755,  1928,
    2473,   485,  1046,  1713,    44,  1738,  2474,  1762,  1773,  1774,
     628,  1776,  1739,  1797,  1798,  1205,  1205,  1205,  1825,  2475,
    1819,  1812,   638,  1826,  1827, -1847,   633,  1832,    44,  1835,
    1844,  2973,  1407,  1408,  1409,  1410,  1411,  1412,  2069,  2070,
    2071,  1845,  2072,  2073,  2074,  2075,  2076,  2077,  2476,  1847,
    2477,  1846,  1848,  1934,  1866,   485,  1125,  1048,  1865,  1868,
    1849,  1888,  1883,  1887,   634,  1889,  1548,  1050,  1403,  1959,
    1951,  1404,  1405,  1406,  1967,  1407,  1408,  1409,  1410,  1411,
    1412,  1955,  1968,  1983,  1987,   767,  1969,  1935,  2052,  1989,
    1991,  1988,  1992,  1995,  2017,  1998,  2698,  1996,  2720,  1997,
    1999,   488,   635,  1636,  1638,  2026,  2006,  2007,  2037,   495,
    2044,  2046,  2038,  2049,  1308,  2111,  2106,  2118,  2069,  2070,
    2071,  2047,  2072,  2073,  2074,  2075,  2076,  2077,  2048,  2050,
    2051,  2053, -1197,  2057,  1205,  2478,   869,  2054,  2080,  2081,
    2086,   886,  2087,  2094,  2061,  2127,  2104,  2132,  2062,  2128,
    2158,  2063,  2064,  2065,   488,  1050,  3023,   767,  2130,   626,
    2167,  -204,    26,   488,  2840,  2131,   488,  -205,  2623,   488,
     496,  2178,  2236,  2179,  2181,   767,   488,   488,   488,   488,
     488,  2182,   629,   488,   488,   488,   488,   488,   488,   488,
     488,   488,   488,   870,  2184,  2187,   488,   488,  2194,    31,
     488,  2201,   767,  2479,  2199,  2202,  2206,   488,  2480,   767,
    2207,   488,  2204,   629,  2384,  2210,  2229,  2231,  2265,  2260,
     488,  2244,  2250,   488,   497,   488,  2251,  2252,  2258,  2259,
     629,  2261,   767,   488,  2269,  2270,   488,   488,  2273,  2280,
      33,   488,   488,  2284,  2281,   488,  2285,  2288,  2291,  2295,
    2297,  2481,  2171,  2304,    34,  2305,  2313,   488,  2321,   488,
    2083,  2061,  2082,  2372,  2353,  2354,  2552,  2482,  2355,  2154,
    2358,  2154,   488,   617,  2370,  2373,  2139,   674,    35,  2387,
     675,  2376,  2398,  2408,  2422,  2426,  2437,  2431,  1309,  2440,
     514,  2432,    36,  2311,   498,  2312,  1642,  2435,   488,  2317,
    2318,  2442,  2446,  1056,  2455,  2468,  2461,  2488,  2462,  2504,
    2585,  2575,  1056,  2569,  2930,   488,  2589,  2596,   675,   514,
     514,  2548,  1057,  2570,  2571,  2584,  2598,  2605,  1954,  2608,
    2611,  1057,   485,  2614,   485,  2612,  2613,  2644,  2615,  2650,
    2651,  1643,   499,  2629,   500,  2641,  2658,  2664,  2642,  2665,
    2647,  2666,  2067,  1205,  2555,  1205,  2663,  1205,  2668,   584,
     501,  2687,  2680,  2685,  2686,  2483,   502,  1644,  2691,   503,
    2695,  2966,  2484,  1058,  2696,  2705,  2697,  2708,   980,   980,
     594,   594,  1058,   594,  1308,  1645,  2996,  2711,  2904,  1646,
    2710,  2904,  -752,   617, -1813,  2715,  1579,  2577, -1814, -1815,
   -1816,  1581,   514,  3000, -1817,  1582,  1583, -1818, -1819, -1820,
    2728,  1647,  2729,  2977,  1648,  2979, -1821,   767,  2593,  2736,
    2594, -1822,  2068, -1823, -1824, -1826, -1827,   617, -1828,  1649,
     617,  2738,  2740,   488, -1829,  2753, -1830, -1831, -1832,  2754,
    2496,  2727, -1833,  2756,  2762,  1629, -1835,  1630, -1836,  1695,
    1696,  1697, -1837,  1698,  1699,  1700,  1701,  1702,  1703,   617,
     617,   617,   617, -1838,  1059, -1839,  2944,    44, -1840, -1841,
   -1842, -1843, -1844,  1059, -1845,  2818, -1846,  -753,  2790,  2741,
    2759,   488,   488,  2930,  2763,  2777,   488,   767,  2795,  2813,
    2817,   488,  2820,  2826,   488,   488,  2830,  2828,  2842,   488,
    2843,  2844,  2851,  2853,  2858,  2859,  2550,   653,  1675,   656,
     582,   660,  2860,  2873,  2883,  1060,  2887,  2874,    44,   628,
    2897,  1650,   488,  1061,  1060,  2895,   488,  2896,  2911,  1651,
    2899,  2907,  1061,  2265,  2154,  1062,  2909,  2918,  2154,  2915,
    2921,  2937,  2943,  2989,  1062,  2704,  2941,  2945,  2948,  2954,
    2959,  2960,  2961,  2965,   488,  2969,  2982,  2970,  2978,  2995,
    2984,  2997,  3002,  2981,  3007,  3013,  1063,  3014,  3015,  2673,
    3019,  2675,  1652,  3020,  3021,  1063,  3030,  3031,  3032,  3034,
    2632,  3037,   488,  3047,  3050,  3064,   638,  3052,   515,  3066,
     488,  2548,   515,  3069,  3067,  3048,  3049,   485,  3085,  3090,
     515,   485,  3091,  3094,  3098,    44,  3099,  3103,  2267,   488,
    2760,   515,   515,  1065,  1014,  2307,  1260,  1261,   767,  2069,
    2070,  2071,  1065,  2072,  2073,  2074,  2075,  2076,  2077,  1449,
    2574,  2170,  2972,  1430,  1864,  1066,  1485,  2986,  3070,  2180,
    3033,  1841,  2430,  2980,  1066,  1484,  2917,  1863,  2402, -1572,
    2183,  2901,  2397,  2555,  2669,  1068,  1886,  2968,  2640,  2967,
    1329,  2974,  1676,  2656,  1068,   515,  1895,  2975,  1898,  1489,
    2816,  1909,  3035,  1678,  1682,  3036,  1683,  1913,   764,  1915,
    3063,  1802,  2102,  2041,  2173,  1950,  2123,   982,  2125,  2161,
    2672,  1922,  1262,  1263,  2429,  2718,  1925,  2670,  3011,  3081,
    1930,  1931,  1932,  1933,  2838,  1937,  1938,   886,  3046,  3053,
    2061,  3075,  2745,  2872,  2062,  1512,   869,  2063,  2064,  2065,
    2209,  2234,   488,  2588,  3044,   767,  2472,   514,   488,  3051,
    2205,  2558,  2272,  3042,  2624,  1626,  1634,   488,   488,  1605,
     755,   488,  2503,  1914, -1572,  2507,  2166,  2962,  1821,  2227,
    1497,  2451,  2035,  2583,  2676,   488,  2994,  1264,  1265,  1266,
    1267,  1268,  1269,  2819,   488,  1270,  1271,  2154,  2450,   488,
     617,  3041,   488,     0,     0,  1823,  2154,     0,     0,   488,
     488,  2154,     0,     0,  2154,     0,     0,     0,   514,   514,
       0,     0,   488,     0,   488,     0, -1572,     0,     0,     0,
       0,     0,     0,     0,  2154,     0,     0,     0,     0,     0,
   -1572,   488,     0,     0,     0, -1572,     0,   617,   617,  1501,
   -1572,   617,  1511,     0,     0,     0,     0,     0,     0, -1572,
     485,     0,     0, -1572,   617,     0,     0,     0,     0,   485,
       0,  2555,     0,     0,   485,    44,     0,   485,     0,     0,
       0,   617,     0,     0,     0,   617,     0,     0,     0,     0,
       0,     0,     0,  1333, -1572,  2856,     0,   485,  1309,     0,
       0,  1272,  1273,   488,     0,     0,   488,   767,     0,     0,
       0,   764,     0,  1341, -1572,  2154,     0,     0,   629,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     488,     0,     0,     0,   488,     0,     0,     0,   767,     0,
       0,   767,     0,     0,   667,     0,  2154,   488,  2067,     0,
       0,  1363,   757,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   488, -1572,  2815,   488, -1572,     0,     0,     0,
       0,     0, -1572,   755,  1205,     0,     0,     0,   485,   488,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   758,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1629, -1572,     0,     0,   485,
       0,     0,     0,     0,  1274,  1275,  2956,     0,  2068,  1569,
       0,   638,   638,  2550,   638,     0,     0,   617,     0, -1572,
     488,     0,     0,     0,     0,     0,  1599,     0,     0,     0,
       0,     0,  2154,     0,     0,     0,     0,     0,   764,     0,
       0,   488,     0,   488,     0,   488,     0,     0,     0,   488,
       0,     0,     0,     0,   992,  1616,     0,     0,     0,   488,
       0,     0,     0,     0,     0,  2987,     0,     0,     0,     0,
       0,  2154,     0,     0,     0,  2139,     0,     0,     0,   488,
       0,     0,     0,     0,     0,     0,     0,     0,  1037,     0,
     675,   675,     0,   514,   514,   485,   514,   675,     0,   488,
     755,     0, -1572,     0,     0,     0,     0,     0,   515,     0,
   -1572,     0,   488,     0,     0,     0,     0,     0,     0,     0,
    1220,  1222,  1224,  1225,     0,     0,     0, -1572,     0, -1572,
   -1572,  2555,     0,  1205,   485,     0,     0,   515,   515,  2950,
       0,     0,     0,     0,     0,   757,  1706,     0,  1434,     0,
       0,  2287,     0,     0,     0,   488,     0,  1731,   488,   488,
       0,  3054,     0,     0,     0,     0, -1572,  2154,  1043, -1572,
   -1572, -1572,     0,     0,  1044,     0,     0,     0,     0,     0,
       0,  1056,   758,     0,     0,     0,     0,     0,     0,     0,
     675,   488,     0,     0,     0,     0,     0,     0,     0,     0,
    1057,     0,     0,     0,     0,  2069,  2070,  2071,     0,  2072,
    2073,  2074,  2075,  2076,  2077,     0,     0,   764,     0,     0,
     515,   980,   617,     0,     0,     0,     0,     0,     0,     0,
     485,     0,   488,     0,     0,     0,     0,   886,     0,     0,
    2061,     0,     0,   617,  2062,   617,     0,  2063,  2064,  2065,
       0,  1058,     0,  1378,     0,     0,     0,     0,  1379,     0,
       0,  1380,     0,     0,     0,  1381,  1382,  1383,  1384,  1385,
    1386,     0,     0,     0,     0,     0,     0,     0,     0,   755,
    1045,     0,   757,  2550,     0,  1387,     0,     0,  1388,   617,
       0,     0,     0,  1389,    44,     0,     0,     0,     0,  1874,
    1390,  1876,     0,     0,  1511,   514,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   514,  1896,   514,  1900,   758,
     514,    44,     0,     0,     0,  1391,   514,     0,   514,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   675,
     514,     0,  1059,     0,   675,   514,     0,     0,     0,   514,
     514,   514,   514,     0,   514,   514,     0,     0,   886,     0,
       0,  2061,     0,     0,     0,  2062,     0,     0,  2063,  2064,
    2065,     0,  2453,     0,   617,   617,  1963,     0,   764,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1763,   760,
       0,  1971,     0,  1060,     0,     0,     0,     0,     0,  2505,
       0,  1061,     0,     0,   764,   764,     0,     0,     0,     0,
       0,     0,     0,  1062,  2559,  2560,  2561,  2562,  2563,  2564,
    2565,  2566,  2567,  2568,     0,     0,  1392,     0,     0,     0,
       0,  1443,     0,     0,  1046,     0,     0,     0,     0,     0,
     755,     0,  1393,     0,  1063,     0,     0,  1394,  2067,     0,
     764,     0,     0,   761,     0,     0,   638,     0,     0,     0,
       0,   757, -1574,     0,     0,     0,   755,   755,     0,  1395,
    1396,     0,     0,     0,     0,     0,     0,     0,     0,  1498,
       0,     0,  1503,     0,  1397,  1064,     0,     0,     0,  1048,
       0,  1065,     0,    44,     0,  1530,     0,     0,   758,     0,
       0,     0,     0,     0,     0,     0,     0,   763,     0,     0,
       0,     0,   755,  1066,     0,     0,  1554,     0,  2068,  1067,
       0,     0,  1398,     0,     0,  1399,     0,     0,     0,   514,
       0,     0,     0,  1068,     0,     0,   514,     0,     0,  1400,
       0,   764,  1401,     0,     0,  1369,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1847,
       0,     0,     0,  1706,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1050,    44,     0,
       0,     0,   760,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   755,     0,   617,   515,   515,     0, -1574,
       0,  2157,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   757, -1574,   514,     0,     0,     0, -1574,     0,
       0,  1402,     0, -1574,     0,     0,     0,     0,     0,  2068,
       0,     0, -1574,     0,     0,  2699, -1574,     0,   757,   757,
       0,     0,     0,     0,     0,     0,   761,     0,  1587,   758,
       0,     0,     0,     0,     0,  2157,     0,  2186,     0,     0,
    2191,     0,   764,     0,  1876,     0,     0, -1574,     0,     0,
       0,     0,     0,     0,     0,   758,   758,     0,     0,     0,
    1569,     0,     0,  1379,   757,     0,  1380, -1574,     0,     0,
    1381,     0,     0,     0,     0,  1363,     0,     0,     0,     0,
     763,     0,     0,     0,     0,  2069,  2070,  2071,     0,  2072,
    2073,  2074,  2075,  2076,  2077,     0,     0,     0,  1389,   760,
       0,   758,     0,  1403,   755, -1847,  1404,  1405,  1406,     0,
    1407,  1408,  1409,  1410,  1411,  1412, -1574,     0,     0, -1574,
       0,     0,     0,  1569,     0, -1574,  1363,     0,   617,     0,
    1391,     0,     0,     0,     0,     0,  1569,   617,   617,   617,
       0,     0,     0,     0,  1763,     0,     0,   764,     0,     0,
     514,     0,     0,     0,     0,   757,     0,     0,   617, -1574,
    2129,     0,     0,   761,     0,     0,     0,     0,     0,     0,
    2303,     0,     0,     0,     0,     0,  2146,     0,     0,     0,
       0,     0, -1574,     0,     0,     0,   675,     0,     0,   764,
       0,    44,   758,     0,     0,     0,     0,     0,     0,     0,
    1569,  1569,     0,     0,     0,     0,  2069,  2070,  2071,   755,
    2072,  2073,  2074,  2075,  2076,  2077,     0,   763,     0,     0,
    1260,  1261,     0,  1706,     0,     0,     0,     0,     0,     0,
    2146, -1847,     0,  1811,     0,   628,     0,     0,  2139,     0,
       0,     0,     0,     0,     0,     0,     0, -1847,  2841,     0,
       0,   755, -1847,     0,  1820,     0,  1822,     0,     0,     0,
       0,   515,   515,     0,   515, -1574,     0,     0,  2849,  2850,
       0,     0,     0, -1574,     0,     0,     0,     0,   760,     0,
       0,     0,     0,     0,  2861,     0,   757,     0,     0, -1847,
   -1574,     0, -1574, -1574,     0,     0,  1262,  1263,     0,     0,
    1859,     0,     0,     0,     0,     0,     0,     0,     0,   617,
     617,   617,   486,     0,  2157,  2406,  2406,     0,     0,     0,
       0,  2406,  2421,   758,     0,     0,     0,     0,     0, -1574,
       0,     0, -1574, -1574, -1574,     0,     0,     0,     0,     0,
       0,     0,   761,     0,  1400,     0,     0,     0,     0,     0,
     617,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2919,  1264,  1265,  1266,  1267,  1268,  1269,     0,  1876,  1270,
    1271,   514,     0,     0,     0,  1569,  1511,  1569,     0,  1599,
       0,     0,     0,     0,     0,  1960,  1962,     0,     0,     0,
       0,   757,     0,     0,     0,     0,   763,     0,   514,     0,
    2506,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,     0,     0,     0,     0,     0,   758,     0,
       0,     0,     0,   757,     0,     0, -1847,     0,  1971,   760,
       0,     0,     0,   617,     0,     0,     0,     0,     0,     0,
    1511,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1363,     0,     0,  1599,   760,   760,     0,     0,     0,
     758,     0,     0,   515,     0,  1272,  1273,     0,     0,     0,
       0,     0,  1569,   515,     0,   515,     0,     0,   515,     0,
       0,     0,  1363,     0,   515,     0,   515,     0,     0,     0,
       0,     0,   764,   761,     0,     0,     0,  2396,   515,  2399,
       0,   760,     0,   515,     0,     0,     0,   515,   515,   515,
     515,     0,   515,   515,     0,     0,     0,     0,     0,   761,
     761,     0,  2616,     0,     0,     0,     0,     0, -1847,     0,
       0,     0,     0,     0,     0,  1407,  1408,  1409,  1410,  1411,
    1412,     0,     0,     0,     0,     0,  2634,   763,   617,   617,
     617,   617,     0,     0,   755,  2406,  2421,     0,  2406,  2406,
       0,     0,   514,     0,   764,   761,     0,  2157,     0,     0,
       0,  2157,     0,   763,   763,     0,     0,   514,  1274,  1275,
       0,     0,   764,  1260,  1261,     0,     0,     0,     0,     0,
       0,     0,   760,     0,  1706,     0,     0,     0,  1276,   980,
       0,     0,     0,     0,  2191,     0,  2138,     0,  1876,   764,
       0,     0,     0,     0,  1511,     0,   764,     0,     0,   763,
    1569,     0,     0,     0,    44,     0,   755,     0,     0,     0,
       0,     0,     0,   675,   514,     0,     0,     0,     0,   764,
       0,   617,     0,     0,   755,    44,     0,    44,     0,     0,
       0,     0,     0,   963,   963,     0,   761,     0,  2719,  1262,
    1263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   755,     0,     0,     0,     0,     0,     0,   755,     0,
       0,     0,     0,     0,     0,     0,     0,   515,     0,     0,
       0,     0,     0,     0,  1369,     0,     0,     0,  1043,     0,
       0,   755,     0,     0,  1044,     0,     0,     0,     0,     0,
     763,  1056,     0,     0,     0,  1120,  1127,     0,     0,     0,
       0,     0,     0,   760,  1264,  1265,  1266,  1267,  1268,  1269,
    1057,     0,  1270,  1271,  1569,     0,   757,  1379,     0,     0,
    1380,     0,     0,  1971,  1381,     0,     0, -1847, -1847, -1847,
       0,     0,     0,     0,     0,  2757,     0,     0,     0,  2268,
       0,   764,  2146,     0,     0,     0,  2146,     0,  2276,  2277,
    2279,     0,  1389,   758,     0,     0,     0,     0,     0,  1390,
       0,  1058,   515,     0,     0,     0,     0,   761,     0,  2296,
       0,  2772,     0,     0,     0,     0,    44,     0,    44,     0,
     486,  2406,     0,  2783,  1391,     0,   514,     0,   757,  2157,
    1045,     0,     0,     0,  2157,     0,     0,  2157,     0,   514,
       0,     0,   514,   755,   764,     0,   757,     0,   760,     0,
       0,     0,     0,     0,     0,     0,     0,  2823,  1272,  1273,
       0,   763,     0,     0,     0,   758,     0,     0,     0,     0,
       0,     0,     0,   757,     0,     0,     0,     0,     0,     0,
     757,     0,     0,   758,     0,     0,     0,   514,     0,     0,
     760,     0,  1059,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   757,     0,     0,   755,   514,   514,     0,
     758,     0,   761,     0,   764,     0,     0,   758,   617,     0,
    1511,     0,     0,   514,     0,  1392,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   617,     0,     0,  2823,     0,
     758,  1393,     0,  1060,     0,     0,  1394,     0,     0,     0,
    1120,  1061,     0,     0,   761,     0,   514,     0,   515,    44,
    2393,  2394,  2395,  1062,     0,     0,   763,  1334,     0,  2157,
       0,  1274,  1275,     0,   514,     0,   755,     0,     0,     0,
       0,     0,     0,  1397,  1046,     0,     0,     0,     0,     0,
       0,     0,  2914,     0,  1063,     0,  1345,   980,     0,   514,
       0,  2438,     0,     0,     0,     0,     0,   617,   763,     0,
       0,     0,     0,     0,     0,     0,  1355,  1356,  1357,     0,
       0,  1364,     0,   675,  2146,   757,     0,     0,     0,  2146,
       0,     0,  2146,     0,     0,  1916,     0,   617,  1400,  1048,
       0,  1065,     0,     0,  1421,   764,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   758,  1066,     0,   486,     0,     0,     0,  1917,
       0,     0,     0,     0,  2971,     0,     0,     0,   514,     0,
     764,     0,   514,  1068,     0,     0,     0,     0,   757,     0,
       0,     0,     0,  1459,  2581,     0,     0,  1475,  1480,     0,
     675,   675,   675,     0,  2823,     0,     0,   755,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   758,     0,     0,     0,     0,
    1402,     0,     0,  1511,     0,     0,     0,  1050,     0,     0,
       0,     0,   755,     0,     0,     0,     0,     0,   514,     0,
       0,     0,   764,     0,     0,  1120,     0,     0,   757,     0,
    2914,     0,     0,     0,  2146,     0,  1120,     0,     0,     0,
       0,     0,     0,     0,  1876,     0,     0,  1363,     0,   515,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1120,     0,     0,     0,  1511,   758,     0,     0,     0,     0,
    2823,     0,     0,   760,     0,     0,   515,     0,     0,  2635,
    2636,  2637,  2638,     0,   755,     0,  2783,   675,     0,     0,
       0,   515,   515,   515,   515,   515,   515,   515,   515,   515,
     515,     0,  1403,    44,     0, -1847, -1847, -1847,     0,  1407,
    1408,  1409,  1410,  1411,  1412,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   761,   764,     0,
       0,     0,     0,     0,     0,   760,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   757,
       0,     0,    44,   760,     0,     0,     0,     0,     0,     0,
       0,     0,  2706,     0,   764,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     760,   763,     0,     0,   757,     0,   758,   760,     0,     0,
     755,     0,     0,     0,     0,   764,     0,     0,   764,   761,
    1379,     0,     0,  1380,     0,     0,     0,  1381,     0,     0,
     760,     0,     0,     0,     0,     0,     0,   761,     0,     0,
       0,   758,     0,     0,     0,     0,   755,     0,     0,     0,
       0,     0,     0,     0,     0,  1389,     0,     0,     0,     0,
    2643,     0, -1847,     0,   761,     0,     0,     0,    44,     0,
       0,   761,     0,   763,     0,  2661,   757,   755,     0,     0,
     755,     0,     0,     0,     0,     0,     0,  1391,     0,     0,
    1670,   763,     0,     0,   761,     0,     0,     0,     0,     0,
    1689,     0,  1707,     0,     0,  1718,  1721,  1726,  1729,     0,
       0,     0,  1056,   758,     0,     0,     0,     0,   763,     0,
       0,     0, -1588,     0,     0,   763,     0,     0,     0,  1741,
       0,  1057,   515,     0,     0,  1745,  1746,  1747,  1748,  1749,
    1750,  1751,     0,     0,     0,     0,  1760,  1761,   763,     0,
       0,  1772,   760,     0,     0,  1775,     0,  2119,  1783,  1784,
    1785,  1786,  1787,  1788,  1789,  1790,  1791,     0,     0,  1792,
       0,     0,     0,     0,     0,     0,   963,     0,     0,  1120,
       0,     0,  1058,  2494,     0,     0,     0,     0, -1847,     0,
       0,  2495,   757,     0,     0,     0,     0,     0,     0,     0,
       0,  1824,     0,     0, -1847,     0,     0,     0,     0, -1847,
       0,     0,     0,     0,     0,   760,   761, -1588,   764,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   757,   758,
    1356,  1357,     0,     0,     0,  1415,     0,     0,     0,  2857,
       0,     0,     0,     0,     0,     0, -1847,     0,     0,  2496,
       0,     0,     0,     0,     0,     0,  2878,     0,     0,   757,
       0,     0,   757,     0,     0,   758,     0,     0,     0, -1588,
     763,     0,     0,  1059,     0,     0,  1415,     0,     0,   761,
     755,     0,     0, -1588,     0,   760,     0,     0, -1588,     0,
       0,     0,     0, -1588,     0,     0,   758,     0,     0,   758,
    1379,  1400, -1588,  1380,   515,     0, -1588,  1381,  1382,  1383,
    1384,  1385,  1386,     0,     0,  1120,     0,  2794,  1947,  1948,
    2797,  1949,     0,     0,  1060,     0,     0,  1387,  2928,     0,
    2363,     0,  1061,   763,     0,  1389,     0, -1588,     0,     0,
       0,     0,  1390,     0,  1062,     0,  2497,     0,     0,   761,
    1120,     0,     0,     0,     0,     0,     0, -1588,  2955,     0,
       0,     0,     0,     0,     0,   515,     0,  1391,     0,     0,
       0,     0,     0,     0,     0,  1063,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   515,   515,     0,     0,     0,
       0,     0,  1415, -1847,     0,     0,     0,     0,     0,  1415,
       0,   515,     0,   763,     0,     0, -1588,     0,     0, -1588,
    1120,     0,     0,     0,     0, -1588,   760,     0,     0,     0,
       0,  2039,  1065,     0,     0,     0,  2045,     0,     0,     0,
       0,     0,     0,     0,   515,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1066,     0,     0,     0,     0, -1588,
       0,   760,  2797,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   757,     0,  1068,  2060,  2498,     0,  1392,  2499,
       0,     0, -1588,     0,     0,     0,  1726,   515,  1726,  1726,
     761,     0,     0,     0,  1393,     0,  2098,     0,     0,  1394,
    2101,     0,     0,  2103,     0, -1847,     0,     0,     0,   758,
       0,     0,  1407,  1408,  1409,  1410,  1411,  1412,     0,     0,
       0,  1395,  1396,     0,     0,   761,     0,     0,     0,     0,
       0,     0,     0,   760,     0,     0,  1397,     0,  2139,     0,
    2121,     0,     0,  2124,   763,  2126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1588,   515,     0,     0,     0,
    2794,     0,     0, -1588,  1398,     0,     0,  1399,     0,   763,
       0,     0,     0,  1522,     0,     0,     0,     0,     0,     0,
   -1588,  1400, -1588, -1588,  1401,     0,  1459,   761,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1480,  1790,     0,  1415,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1415,     0, -1588,
       0,  1714, -1588, -1588, -1588,     0,  2794,  1415,  1415,  1415,
       0,     0,     0,     0,     0,     0,  1415,  2203,     0,   760,
       0,   763,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1402,     0,   760,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1415,     0,     0,  1120,     0,     0,     0,
       0,     0,     0,   761,     0,     0,   760,     0,     0,   760,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1379,  1415,     0,  1380,     0,     0,     0,  1381,     0,   761,
       0,  2294,     0,     0,     0,     0,     0,  1415,     0,     0,
       0,     0,  1415,     0,     0,     0,     0,   763,     0,     0,
       0,     0,     0,     0,     0,  1389,     0,     0,     0,     0,
     761,     0, -1847,   761,     0,  1403,     0,     0,  1404,  1405,
    1406,     0,  1407,  1408,  1409,  1410,  1411,  1412,     0,     0,
       0,     0,  1735,   763,  2320,     0,     0,  1391,   -39,     0,
       0,     0,     0,  2324,     0,     0,  2325,     0,     0,  2327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,   763,     0,     0,   763,     0,     2,
       0,     3,     4,     0,     0,     0,  2348,  2349,     0,     0,
    1824,     0,     0,     0,     0,     0,     0,     5,     0,     0,
       0,  2359,     0,     0,     0,     0,     6,     0,     0,     0,
    2366,     0,     0,  2369,     0,  2371,     0,  2377,     7,     0,
       0,     0,     0,  2375,     0,     0,     0,     0,     0,     8,
       0,  2382,  2383,     0,     0,  2386,     0,     0,     0,     0,
       0,     9,     0,    10,     0,     0,     0,     0, -1847,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   760,
       0,    11,  2425,     0, -1847,     0,     0,     0,     0, -1847,
       0,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,     0,     0,  2439,     0,
       0,    14,  1415,  1379,     0,     0,  1380,     0,     0,    15,
    1381,    16,    17,     0,     0,  2452, -1847,     0,     0,     0,
       0,  1415,     0,     0,     0,    18,     0,     0,     0,     0,
       0,     0,     0,   761,     0,     0,     0,     0,  1389,  1415,
       0,  1714,  1714,     0,  2078, -1847,  1714,     0,     0,     0,
    1415,     0,     0,  1415,    19,     0,     0,     0,  1415,     0,
       0,  1415,     0,     0,     0,     0,     0,     0,     0,    20,
    1391,  1400,     0,  1415,     0,     0,     0,  1415,  1415,  1415,
    1415,  1415,  1415,  1415,     0,     0,     0,   763,     0,  1714,
    1714,     0,  1415,  1415,     0,    21,     0,     0,     0,     0,
       0,     0,  1379,     0,  1415,  1380,     0,  1415,     0,  1381,
    1382,  1383,  1384,  1385,  1386,  1415,  1415,  1415,  1415,  1415,
    1415,  1415,  1415,  1415,  1415,     0,     0,     0,     0,  1387,
       0,     0,     0,  2604,     0,     0,     0,  1389,     0,     0,
    2380,     0,     0,     0,  1390,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1415,     0,     0,     0,
       0,  1379,     0, -1847,  1380,     0,     0,     0,  1381,  1391,
       0, -1847,    22,     0,     0,    23,     0,     0,     0,     0,
       0,  2617,  2618,     0,     0,     0,  2619, -1847,     0,     0,
       0,  2622, -1847,     0,  2625,  2626,  1389,     0,     0,  2630,
       0,     0,     0, -1847,    24,     0,     0,     0,     0,     0,
       0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,  1391, -1847,
       0,     0,     0,     0,    27,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
       0,     0,     0,     0,   963,     0,     0,     0,     0,     0,
      30,     0,     0,     0,    31, -1847,     0,     0,     0,     0,
    1392,     0,  1407,  1408,  1409,  1410,  1411,  1412,     0,  1415,
    1415,  1415,  2694,     0,  1400,     0,  1393,     0,     0,     0,
       0,  1394,     0,     0,     0,     0,     0,     0,  2381,     0,
      32,     0,     0,     0,     0,    33,     0,     0,     0,  2713,
       0,     0,     0,  1395,  1396,     0,     0,     0,     0,    34,
       0,     0,     0,     0,     0,     0,     0,     0,  1397, -1847,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0, -1847,     0,     0,     0,     0,
   -1847,     0,     0,     0,     0,     0,     0,    36,     0,     0,
     -39,     0,     0,     0,     0,     0,  1398,     0,     0,  1399,
       0,  1415,     0,     0,     0,     0, -1847,  1415,     0,     0,
       0,     0,     0,  1400,     0,     0,  1401, -1847,     0,     0,
    2078,  2078,  1415,     0,  1714,  1714,  1714,  1714,  1714,     0,
       0,  1714,  1714,  1714,  1714,  1714,  1714,  1714,  1714,  1714,
    1714,  2078,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2098,     0,
    1415,     0,     0,  1415,     0,  1415,     0,  2767,  2768,  2078,
    2078,  2769,  1400,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1415,  1714,  1714,  1415,     0,  1415,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1402,     0,     0, -1847,  2811,
    2812,     0,     0,     0,     0,  1407,  1408,  1409,  1410,  1411,
    1412,     0,     0,     0,  2827,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2836,     0,     0,     0,     0,  1379,     0,     0,  1380,
       0,     0,     0,  1381,  1382,  1383,  1384,  1385,  1386,     0,
       0,     0,     0,     0, -1847,  1415,     0,     0,     0,     0,
       0,     0,     0,  1387,     0,     0,     0,     0,     0,     0,
       0,  1389,     0,     0,     0,     0,     0,     0,  1390,     0,
       0,     0,     0,     0,  1379,     0,     0,  1380,     0,     0,
       0,  1381,  1382,  1383,  1384,  1385,  1386,  1403,     0,     0,
    1404,  1405,  1406,  1391,  1407,  1408,  1409,  1410,  1411,  1412,
       0,  1387,     0,     0,  1735,     0,     0,     0,     0,  1389,
    2898,     0,     0,     0,     0,     0,  1390,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1364,     0,     0,
       0,     0,     0,     0,     0,     0,  1415,     0,     0,     0,
       0,  1391,   963,     0,     0,  2920, -1847,     0,     0,     0,
       0,     0,     0,  1407,  1408,  1409,  1410,  1411,  1412,  2939,
       0,     0,  1415,     0,     0,     0,  1415,  1415,     0,  1415,
       0,     0,  2078,  2078,  2078,  2078,  2078,     0,     0,     0,
    2078,  2078,  2078,  2078,  2078,  2078,  2078,  2078,  2078,  2078,
    1415,  1415,     0,     0,  1392,     0,     0,     0,     0,     0,
       0,  1415,     0,     0,     0,     0,     0,     0,  1415,     0,
    1393,  1415,     0,  1415,     0,  1394,     0,  1415,     0,     0,
    2078,  2078,     0,     0,  1415,  1415,     0,     0,  1415,     0,
       0,     0,     0,     0,     0,  2811,     0,  1395,  1396,  2983,
       0,     0,  1392,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,     0,     0,  1393,     0,
       0,     0,     0,  1394,     0,     0,     0,  1415,     0,  3012,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1415,     0,     0,     0,  1395,  1396,     0,     0,     0,
    1398,     0,     0,  1399,  1415,     0,     0,     0,     0,     0,
    1397,     0,  2811,     0,     0,     0,     0,  1400,     0,  1379,
    1401,     0,  1380,     0,     0,     0,  1381,     0,  1714,  1384,
    1385,  1386,     0,     0,     0,   517,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1387,     0,  1398,     0,
       0,  1399,     0,     0,  1389,     0,     0,     0,  3060,  3060,
       0,  1390,     0,     0,     0,  1400,  1379,     0,  1401,  1380,
       0,     0,     0,  1381,  1382,  1383,  1384,  1385,  1386,     0,
       0,     0,     0,     0,     0,     0,  1391,     0,   518,     0,
       0,  3060,     0,  1387,     0,     0,     0,     0,     0,     0,
       0,  1389,     0,     0,   519,     0,     0,     0,  1390,  1402,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3060,  1391,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1415,  1402,   520,     0,
    1714,     0,     0,     0,     0,     0,     0,     0,   521,  1415,
    1415,  1415,     0,     0,  1415,     0,     0,  1415,  1415,     0,
     522,     0,  1415,     0,     0,   523,     0,  1392,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1393,     0,     0,     0,     0,  1394,     0,
       0,  1403,   524,     0,  1404,  1405,  1406,     0,  1407,  1408,
    1409,  1410,  1411,  1412,     0,     0,     0,     0,  2105,     0,
    1395,  1396,     0,     0,  1392,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1397,  1415,     0,     0,     0,
    1393,     0,  2078,     0,     0,  1394,     0,   525,     0,  1403,
       0,   526,  1404,  1405,  1406,  1415,  1407,  1408,  1409,  1410,
    1411,  1412,     0,     0,     0,     0,  2323,  1395,  1396,     0,
       0,     0,     0,  1398,     0,     0,  1399,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,     0,     0,     0,     0,
    1400,     0,     0,  1401,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2078,  1714,     0,     0,     0,     0,  1415,
    1415,  1415,     0,     0,   527,     0,     0,     0,     0,     0,
    1398,     0,     0,  1399,     0,     0,     0,     0,   528,     0,
       0,     0,     0,     0,     0,     0,     0,  1400,     0,     0,
    1401,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1415,  1415,     0,     0,     0,     0,     0,
       0,   529,     0,     0,   530,     0,     0,     0,     0,  1415,
       0,     0,   531,     0,     0,   532,     0,     0,  1415,     0,
       0,     0,  1402,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   533,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   534,     0,
       0,     0,     0,     0,     0,   535,     0,     0,     0,     0,
       0,     0,  2078,     0,   536,     0,     0,     0,     0,  1402,
     537,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1415,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   538,     0,     0,     0,     0,
       0,     0,  1415,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1415,     0,     0,  1403,     0,     0,  1404,  1405,  1406,
       0,  1407,  1408,  1409,  1410,  1411,  1412,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1415,     0,     0,     0,     0,
       0,  1403,     0,     0,  1404,  1405,  1406,     0,  1407,  1408,
    1409,  1410,  1411,  1412,     0,     0,     0,     0,  2364,     0,
       0,     0,     0,     0,  1415,     0,     0,     0,     0,     0,
       0,     0,     0,  1080,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  1081,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,  1415,   107,   108,   109,  1082,   111,   112,   113,
     114,   890,  1083,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,  1084,     0,   136,   137,
     138,   139,   140,   141,  1085,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,  1086,   153,   154,   155,
    1087,  1088,  1089,  1090,   903,   904,  1091,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,  1092,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
    1093,     0,  1094,   214,   215,  1095,  1096,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,  1097,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,  1098,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,  1099,
    1100,   255,  1101,   257,   258,   259,   260,   261,   262,     0,
       0,   263,  1102,   265,  1103,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,  1104,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,  1105,   921,   297,   298,
     299,   300,   922,   301,   302,  1106,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,  1107,   319,  1108,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,  1109,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
     396,  1111,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1112,
     415,   933,   417,     0,   418,   419,     0,   420,  1113,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,  1114,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
    1115,     0,   448,   449,   450,   451,   452,   453,   941,  1116,
     455,  1117,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,  1118,     0,     0,     0,     0,   946,     0,   947,
    1119,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    26,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,    31,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   610,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,    34,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
      35,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,  2910,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    26,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,    31,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   610,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,    34,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,    35,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
    1722,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,  1723,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,  1724,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,  1725,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  -609,
     102,   103,   104,     0,     0,     0,  -609,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,  -609,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,  1455,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,  1456,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  2798,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,  2799,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,  2800,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,  2801,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,  2802,     0,     0,     0,     0,   946,     0,  2803,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,   945,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,    93,  1471,   582,   884,   885,   886,  1472,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  1473,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,  1716,     0,     0,     0,   948,
       0,   949,   950,  1080,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,  1082,   111,   112,   113,
     114,   890,  1083,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,  1084,     0,   136,   137,
     138,   139,   140,   141,  1085,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,  1086,   153,   154,   155,
    1087,  1088,  1089,  1090,   903,   904,  1091,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
    1093,     0,  1094,   214,   215,  1095,  1096,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,  1097,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,  1098,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,  1099,
    1100,   255,  1101,   257,   258,   259,   260,   261,   262,     0,
       0,   263,  1102,   265,  1103,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,  1104,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,  1105,   921,   297,   298,
     299,   300,   922,   301,   302,  1106,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,  1107,   319,  1108,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,  1109,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
     396,  1111,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1112,
     415,   933,   417,     0,   418,   419,     0,   420,  1113,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,  1114,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
    1115,     0,   448,   449,   450,   451,   452,   453,   941,  1942,
     455,  1117,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,  1080,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,  1082,   111,   112,   113,   114,   890,  1083,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,  1084,     0,   136,   137,   138,   139,   140,   141,  1085,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,  1086,   153,   154,   155,  1087,  1088,  1089,  1090,   903,
     904,  1091,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,  1093,     0,  1094,   214,   215,
    1095,  1096,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,  1097,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,  1098,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,  1099,  1100,   255,  1101,   257,   258,
     259,   260,   261,   262,     0,     0,   263,  1102,   265,  1103,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,  1104,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,  1105,   921,   297,   298,   299,   300,   922,   301,   302,
    1106,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,  1107,   319,  1108,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,  1109,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
    1110,   392,   393,   394,   395,   396,  1111,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1112,   415,   933,   417,     0,   418,
     419,     0,   420,  1113,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,  1114,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,  1115,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,  1117,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,  1985,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,  1723,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,  2293,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,  2385,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,  1080,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,  1082,   111,   112,   113,
     114,   890,  1083,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,  1084,     0,   136,   137,
     138,   139,   140,   141,  1085,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,  1086,   153,   154,   155,
    1087,  1088,  1089,  1090,   903,   904,  1091,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
    1093,     0,  1094,   214,   215,  1095,  1096,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,  1097,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,  1098,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,  1099,
    1100,   255,  1101,   257,   258,   259,   260,   261,   262,     0,
       0,   263,  1102,   265,  1103,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,  1104,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,  1105,   921,   297,   298,
     299,   300,   922,   301,   302,  1106,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,  1107,   319,  1108,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,  1109,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,  1110,   392,   393,   394,   395,
     396,  1111,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1112,
     415,   933,   417,     0,   418,   419,     0,   420,  1113,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,  1114,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
    1115,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,  1117,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,  1476,  1477,     0,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,    93,  1851,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,  2097,     0,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,  2799,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,  2800,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,  2801,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,  2803,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,  3057,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,  3058,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,   922,   301,   302,
     303,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,  3059,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   942,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   889,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,  3058,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,   908,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,   922,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   930,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
    3059,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   942,     0,     0,     0,     0,     0,     0,
     943,   944,     0,     0,     0,     0,     0,   946,     0,   947,
       0,     0,     0,     0,   948,     0,   949,   950,    93,   883,
     582,   884,   885,   886,   887,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   889,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113, -1847,   890,   116,   891,   892,
       0,   119,   120,   121,   122,   123,   124,   893,   894,   125,
     126,   895,   896,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,  3058,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   906,
     907,   170,   908,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   909,   199,   200,
     201,   202,   203,   910,   911,   205,     0,   206,   207,   912,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216, -1847,   218,     0,   219,     0,   913,   914,   222,     0,
     223,   224,   225,   226,   227,   228,   229, -1847,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   915,   916,
       0,   917,     0,   252,     0,     0,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265, -1847,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     920,   295,   921,   297,   298,   299,   300,     0,   301,   302,
       0,   304,   923,   924,   306,   925,   308,   309,   310,     0,
     311,   312,     0,     0,   926,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   929,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   930,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396, -1847,   398,   399,   932,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     934,   935,     0,     0,   429,   430,   936,   432,   937,   938,
     434,   435,   939,   437,   438,  3059,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   941,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483, -1847,     0,
       0,     0,     0,     0,     0,   943,   944,     0,     0,     0,
       0,     0,   946,     0,   947,     0,     0,     0,     0,   948,
       0,   949,   950,    93,   883,   582,   884,   885,   886,   887,
     888,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   890,   116,   891,   892,     0,   119,   120,   121,   122,
     123,   124,   893,   894,   125,   126,   895,   896,   129,     0,
     130,   131,   132,   133,   897,     0,   898,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     899,   900,   901,   902,   903,   904,   905,   161,   162,   163,
     164,   165,   166,   167,   906,   907,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   909,   199,   200,   201,   202,   203,   910,   911,
     205,     0,   206,   207,   912,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   913,   914,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   915,   916,     0,   917,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   918,
     919,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   920,   295,   921,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   923,   924,   306,
     925,   308,   309,   310,     0,   311,   312,     0,     0,   926,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   927,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   928,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   929,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   931,   392,   393,   394,   395,
     396,   397,   398,   399,   932,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   933,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   934,   935,     0,     0,   429,
     430,   936,   432,   937,   938,   434,   435,   939,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     940,     0,   448,   449,   450,   451,   452,   453,   941,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
    1709,  1710,     0,     0,    93,   883,   582,   884,   885,  1711,
     887,   888,     0,     0,     0,     0,   949,   950,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,   114,   890,   116,   891,   892,     0,   119,   120,   121,
     122,   123,   124,   893,   894,   125,   126,   895,   896,   129,
       0,   130,   131,   132,   133,   897,     0,   898,     0,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   899,   900,   901,   902,   903,   904,   905,   161,   162,
     163,   164,   165,   166,   167,   906,   907,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   712,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   909,   199,   200,   201,   202,   203,   910,
     911,   205,     0,   206,   207,   912,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,   217,   218,     0,
     219,     0,   913,   914,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   915,   916,     0,   917,     0,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
       0,     0,   263,   264,   265,   266,     0,   267,   268,   269,
     918,   919,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   920,   295,   921,   297,
     298,   299,   300,     0,   301,   302,   303,   304,   923,   924,
     306,   925,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,   318,   319,   320,
     927,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   928,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   929,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,   370,   371,   372,   373,  1837,  1838,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   931,   392,   393,   394,
     395,   396,   397,   398,   399,   932,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   933,   417,     0,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,     0,   934,   935,     0,     0,
     429,   430,   936,   432,   937,   938,   434,   435,   939,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,   940,     0,   448,   449,   450,   451,   452,   453,   941,
       0,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
       0,  1839,  1840,     0,     0,     0,     0,     0,     0,     0,
    1711,     0,     0,     0,     0,     0,     0,   949,   950,    93,
     883,   582,   884,   885,   886,   887,   888,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   890,   116,   891,
     892,     0,   119,   120,   121,   122,   123,   124,   893,   894,
     125,   126,   895,   896,   129,     0,   130,   131,   132,   133,
     897,     0,   898,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   899,   900,   901,   902,
     903,   904,   905,   161,   162,   163,   164,   165,   166,   167,
     906,   907,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   712,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   909,   199,
     200,   201,   202,   203,   910,   911,   205,     0,   206,   207,
     912,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   913,   914,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   915,
     916,     0,   917,     0,   252,     0,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   918,   919,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   920,   295,   921,   297,   298,   299,   300,     0,   301,
     302,   303,   304,   923,   924,   306,   925,   308,   309,   310,
       0,   311,   312,     0,     0,   926,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   927,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   928,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   929,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   931,   392,   393,   394,   395,   396,   397,   398,   399,
     932,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   933,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   934,   935,     0,     0,   429,   430,   936,   432,   937,
     938,   434,   435,   939,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   940,     0,   448,   449,
     450,   451,   452,   453,   941,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     0,
       0,     0,     0,     0,     0,     0,  1709,  1710,     0,     0,
       0,     0,     0,     0,     0,  1711,     0,     0,     0,     0,
       0,     0,   949,   950,    93,   883,   582,   884,   885,   886,
     887,   888,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,   889,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,     0,   890,   116,   891,   892,     0,   119,   120,   121,
     122,   123,   124,   893,   894,   125,   126,   895,   896,   129,
       0,   130,   131,   132,   133,   897,     0,   898,     0,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,   153,   154,
     155,   899,   900,   901,   902,   903,   904,   905,   161,   162,
     163,   164,   165,   166,   167,   906,   907,   170,   908,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   712,   186,   187,
       0,   188,   189,   190,     0,   191,     0,   193,     0,   194,
     195,   196,   197,   909,   199,   200,   201,   202,   203,   910,
     911,   205,     0,   206,   207,   912,   209,     0,   210,     0,
     211,   212,     0,   213,   214,   215,   216,     0,   218,     0,
     219,     0,   913,   914,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   242,   243,   244,
     245,   246,   247,   248,   915,   916,     0,   917,     0,   252,
       0,     0,   255,   256,   257,   258,   259,   260,   261,   262,
       0,     0,   263,   264,   265,     0,     0,   267,   268,   269,
     918,   919,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   920,   295,   921,   297,
     298,   299,   300,     0,   301,   302,     0,   304,   923,   924,
     306,   925,   308,   309,   310,     0,   311,   312,     0,     0,
     926,   314,   315,     0,     0,   316,   317,   318,   319,   320,
     927,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   928,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   929,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,   370,   371,   372,   373,   930,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   931,   392,   393,   394,
     395,   396,     0,   398,   399,   932,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   933,   417,     0,   418,   419,     0,   420,   421,
     422,   423,   424,   425,   426,     0,   934,   935,     0,     0,
     429,   430,   936,   432,   937,   938,   434,   435,   939,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,   940,     0,   448,   449,   450,   451,   452,   453,   941,
       0,   455,   456,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     0,     0,     0,     0,     0,     0,
       0,   943,   944,   694,     0,     0,     0,     0,   946,     0,
     947,     0,     0,     0,     0,   948,     0,   949,   950,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   695,   111,   112,   113,
       0,   696,   697,   698,   699,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   700,   701,   129,     0,
     130,   131,   132,   133,     0,     0,   702,     0,   136,   137,
     138,   139,   140,   141,   703,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   704,   153,   154,   155,
     705,   706,   707,   708,     0,     0,   709,   161,   162,   163,
     164,   165,   166,   167,   710,   711,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,     0,   199,   200,   201,   202,   203,     0,     0,
     205,     0,   206,   207,   713,   209,     0,   210,     0,   211,
     714,     0,   715,   214,   215,     0,   716,   218,     0,   219,
       0,     0,     0,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   718,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   719,     0,   244,   245,
     246,   247,   248,   720,   721,     0,   722,     0,   252,   723,
     724,   255,   725,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   726,   265,   727,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   728,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   729,   730,   731,   297,   298,
     299,     0,     0,   301,   302,   732,   304,     0,     0,   306,
     733,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,   734,   319,   735,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,     0,   335,   336,     0,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   736,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   737,   371,   372,   373,   738,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   739,   392,   740,   394,   395,
     396,   741,   398,   399,   742,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   743,
     415,     0,   417,     0,   418,   419,     0,   420,   744,   422,
     423,   424,   425,   426,     0,   745,   746,     0,     0,   429,
     430,     0,   432,     0,     0,   434,   435,   747,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     748,     0,   448,   449,   450,   451,   452,     0,   749,     0,
     455,   750,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,     0,   506,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   480,
     481,   482,   483,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
    -929,     0,     0,  -929,  2403,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,  -276,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,  -276,   214,
     215,   509,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,  -276,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,  -276,   257,
     258,   259,   260,   261,   262,     0,     0,   263,  -276,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   510,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,  -276,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,  -276,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   512,   415,   416,   417,     0,
     418,   419,     0,   420,  -276,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    93,
       0,   507,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1012,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,   894,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     897,     0,   898,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   899,   900,   901,   902,
     903,   904,   905,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   910,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,  2143,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   918,   919,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   304,     0,   924,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   614,   313,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   927,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   928,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   374,  2144,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    26,   386,   387,   388,   389,
     390,   931,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   933,   417,     0,
     418,   419,    31,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   936,   432,   937,
       0,   434,   435,   939,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   940,     0,   448,   449,
     450,   451,   452,   610,   454,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,    34,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     0,
       0,    35,   780,  1302,   582,     0,     0,     0,   887,     0,
       0,     0,     0,     0,     0,  2145,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   781,   111,   112,   113,   782,
     783,   784,   785,   786,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   787,   788,   129,     0,   130,
     131,   132,   133,   789,     0,   790,     0,   136,   137,   138,
     139,   140,   141,   791,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   792,   153,   154,   155,   793,
     794,   795,   796,     0,     0,   797,   161,   162,   163,   164,
     165,   166,   167,   798,   799,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   800,   199,   200,   201,   202,   203,   801,  1303,   205,
       0,   206,   207,   802,   209,     0,   210,     0,   211,   803,
       0,   804,   214,   215,   805,   806,   218,     0,   219,     0,
     807,   808,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   809,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   810,   811,   244,   245,   246,
     247,   248,   812,   813,     0,   814,     0,   252,   815,   816,
     255,   817,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   818,   265,   819,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   820,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   821,   822,   823,   297,   298,   299,
     824,     0,   301,   302,   825,   304,     0,   826,   306,   827,
     308,   309,   310,     0,   311,   312,  1304,     0,   313,   314,
     315,     0,     0,   316,   828,   829,   319,   830,   831,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   832,   335,   336,   833,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     834,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   835,   371,   372,   373,   836,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   837,   392,   838,   394,   395,   396,
     839,   398,   399,   840,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   841,   415,
     842,   417,     0,   418,   419,     0,   420,   843,   422,   423,
     424,   425,   426,     0,   844,   845,     0,     0,   429,   430,
     846,   432,   847,  1305,   434,   435,   848,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   849,
       0,   448,   449,   450,   451,   452,  1197,   851,     0,   455,
     852,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   853,   854,   855,
     856,   857,   858,   859,   860,   861,   862,   863,   480,   481,
     482,   483,    93,     0,   507,     0,     0,     0,     0,  1306,
    1307,  2021,     0,     0,     0,     0,     0,     0,  2022,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,   894,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   897,     0,   898,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   899,
     900,   901,   902,   903,   904,   905,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   910,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,  2143,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   918,   919,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,   304,     0,   924,   306,   307,
     308,   309,   310,     0,   311,   312,     0,   614,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   927,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   928,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,   374,  2144,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   931,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     933,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     936,   432,   937,     0,   434,   435,   939,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   940,
       0,   448,   449,   450,   451,   452,   610,   454,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   780,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2145,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     3,     4,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   781,   111,   112,   113,   782,
     783,   784,   785,   786,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   787,   788,   129,     0,   130,
     131,   132,   133,   789,     0,   790,     0,   136,   137,   138,
     139,   140,   141,   791,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   792,   153,   154,   155,   793,
     794,   795,   796,     0,     0,   797,   161,   162,   163,   164,
     165,   166,   167,   798,   799,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   800,   199,   200,   201,   202,   203,   801,     0,   205,
       0,   206,   207,   802,   209,     0,   210,     0,   211,   803,
       0,   804,   214,   215,   805,   806,   218,     0,   219,     0,
     807,   808,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   809,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   810,   811,   244,   245,   246,
     247,   248,   812,   813,     0,   814,     0,   252,   815,   816,
     255,   817,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   818,   265,   819,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   820,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   821,   822,   823,   297,   298,   299,
     824,     0,   301,   302,   825,   304,     0,   826,   306,   827,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   828,   829,   319,   830,   831,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   832,   335,   336,   833,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     834,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   835,   371,   372,   373,   836,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    26,   386,
     387,   388,   389,   390,   837,   392,   838,   394,   395,   396,
     839,   398,   399,   840,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   841,   415,
     842,   417,     0,   418,   419,    31,   420,   843,   422,   423,
     424,   425,   426,     0,   844,   845,     0,     0,   429,   430,
     846,   432,   847,     0,   434,   435,   848,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   849,
       0,   448,   449,   450,   451,   452,   850,   851,     0,   455,
     852,   457,   458,   459,   460,   461,     0,     0,   462,     0,
      34,   463,   464,   465,   466,   467,   468,   853,   854,   855,
     856,   857,   858,   859,   860,   861,   862,   863,   480,   481,
     482,   483,    93,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,   894,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   897,     0,   898,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   899,
     900,   901,   902,   903,   904,   905,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   910,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   918,   919,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,   304,     0,   924,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   927,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   928,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,   374,  2144,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   931,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     933,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     936,   432,   937,     0,   434,   435,   939,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   940,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    93,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,   894,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   897,     0,   898,     0,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,   153,   154,   155,   899,
     900,   901,   902,   903,   904,   905,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   910,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,   212,
       0,   213,   214,   215,   216,   217,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,     0,
     263,   264,   265,   266,     0,   267,   268,   269,   918,   919,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,     0,   301,   302,   303,   304,     0,   924,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,   318,   319,   320,   927,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   928,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   931,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     933,   417,     0,   418,   419,     0,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     936,   432,   937,     0,   434,   435,   939,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,   940,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
     456,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2821,     0,
      94,    95,    96,    97,    98,    99,   100,   101,   642,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   509,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   510,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    26,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   512,   415,
     416,   417,     0,   418,   419,    31,   420,     0,   422,   423,
     424,   425,   426,     0,   643,   428,     0,     0,   644,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   610,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
      34,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   506,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   509,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   510,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    26,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   512,   415,
     416,   417,     0,   418,   419,    31,   420,     0,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   610,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
      34,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     0,   506,    35,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   991,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2660,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1730,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1875,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,  2508,  1302,   582,     0,     0,
    1690,   887,     0,     0,     0,     0,     0,  1691,     0,  2632,
    1692,  1693,  1694,    94,    95,    96,    97,    98,    99,   100,
     101,  1130,   102,   103,   104,  1131,  1132,  1133,  1134,  1135,
    1136,  1137,   105,   106,  1138,   107,   108,   109,  2509,   111,
     112,   113,     0,   696,  2510,   698,   699,  1139,   119,   120,
     121,   122,   123,   124,  1140,  1141,   125,   126,   700,   701,
     129,  1142,   130,   131,   132,   133,     0,  1143,  2511,  1144,
     136,   137,   138,   139,   140,   141,  2512,   143,   144,   145,
    1145,   146,   147,   148,   149,   150,   151,  1146,  2513,   153,
     154,   155,  2514,  2515,  2516,  2517,  1147,  1148,  2518,   161,
     162,   163,   164,   165,   166,   167,   710,   711,   170,  1149,
     171,  1150,   172,   173,   174,   175,   176,   177,  1151,   178,
     179,   180,   181,   182,  1152,  1153,   183,   184,   712,   186,
     187,  1154,   188,   189,   190,  1155,   191,   192,   193,  1156,
     194,   195,   196,   197,     0,   199,   200,   201,   202,   203,
       0,  1157,   205,  1158,   206,   207,   713,   209,  1159,   210,
    1160,   211,  2519,  1161,  2520,   214,   215,  2521,  2522,   218,
    1162,   219,  1163,     0,     0,   222,  1164,   223,   224,   225,
     226,   227,   228,   229,  2523,   231,   232,   233,   234,  1165,
     235,   236,   237,   238,   239,   240,  1166,   241,  2524,     0,
     244,   245,   246,   247,   248,   720,   721,  1167,   722,  1168,
     252,  2525,  2526,   255,  2527,   257,   258,   259,   260,   261,
     262,  1169,  1170,   263,  2528,   265,  2529,  1171,   267,   268,
     269,  1172,  1173,   270,   271,   272,   273,   274,  2530,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   729,  2531,   731,
     297,   298,   299,  2532,  1174,   301,   302,  2533,   304,  1175,
       0,   306,   733,   308,   309,   310,  1176,   311,   312,  1177,
    1178,  2534,   314,   315,  1179,  1180,   316,     0,  2535,   319,
    2536,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,  1181,   332,   333,     0,   335,   336,     0,   338,
     339,   340,  1182,   341,   342,   343,   344,   345,   346,  1183,
     347,   348,   349,   736,   351,   352,   353,   354,  1184,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,  1185,   368,   369,  2537,   371,   372,   373,   738,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,  1186,   386,   387,   388,   389,   390,  2538,   392,  2539,
     394,   395,   396,  2540,   398,   399,   742,   401,  1187,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  2541,   415,     0,   417,  1188,   418,   419,  1189,   420,
    2542,   422,   423,   424,   425,   426,  1190,   745,   746,  1191,
    1192,   429,   430,     0,   432,     0,  1193,   434,   435,  2543,
     437,   438,   439,   440,   441,  1194,  1195,   442,   443,   444,
     445,   446,  2544,  1196,   448,   449,   450,   451,   452,     0,
     749,  1198,   455,  2545,   457,   458,   459,   460,   461,  1199,
    1200,   462,  1201,  1202,   463,   464,   465,   466,   467,   468,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   480,   481,   482,   483,     0,   506,     0,  1695,  1696,
    1697,  1690,  2546,  2547,  1700,  1701,  1702,  1703,  1691,     0,
       0,  1692,  1693,  1694,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
     128,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   509,     0,
     218,     0,   219,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,   262,     0,     0,   263,     0,   265,     0,     0,   267,
     268,   269,     0,     0,   270,   271,   272,   273,   274,   510,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,     0,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   512,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     0,     0,     0,  1695,
    1696,  1697,     0,  1698,  1699,  1700,  1701,  1702,  1703,  1379,
       0,     0,  1380,     0,     0,     0,  1381,  1382,  1383,  1384,
    1385,  1386,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1387,     0,  1379,     0,
       0,  1380,     0,     0,  1389,  1381,  1382,  1383,  1384,  1385,
    1386,  1390,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1387,     0,     0,     0,     0,
       0,     0,     0,  1389,  1379,     0,  1391,  1380,     0,     0,
    1390,  1381,  1382,  1383,  1384,  1385,  1386,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1387,     0,  1379,     0,  1391,  1380,     0,     0,  1389,
    1381,  1382,  1383,  1384,  1385,  1386,  1390,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1387,     0,     0,     0,     0,     0,     0,     0,  1389,     0,
       0,  1391,     0,     0,     0,  1390,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1391,     0,     0,     0,     0,     0,     0,  1392,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1393,     0,     0,     0,     0,  1394,     0,
       0,  1379,     0,     0,  1380,     0,  1392,     0,  1381,  1382,
    1383,  1384,  1385,  1386,     0,     0,     0,     0,     0,     0,
    1395,  1396,  1393,     0,     0,     0,     0,  1394,  1387,     0,
       0,     0,     0,     0,     0,  1397,  1389,     0,     0,     0,
       0,     0,  1392,  1390,     0,     0,     0,     0,     0,  1395,
    1396,     0,     0,     0,     0,     0,     0,     0,  1393,     0,
       0,     0,     0,  1394,  1397,     0,     0,     0,  1391,     0,
       0,  1392,     0,  1398,     0,     0,  1399,     0,     0,     0,
       0,     0,     0,     0,     0,  1395,  1396,  1393,     0,     0,
    1400,     0,  1394,  1401,     0,     0,     0,     0,     0,     0,
    1397,     0,  1398,     0,     0,  1399,     0,     0,     0,     0,
       0,     0,     0,     0,  1395,  1396,     0,     0,     0,  1400,
       0,     0,  1401,     0,     0,     0,     0,     0,     0,  1397,
       0,     0,     0,     0,     0,     0,     0,     0,  1398,     0,
       0,  1399,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1400,     0,     0,  1401,     0,
       0,     0,     0,     0,     0,     0,     0,  1398,     0,  1392,
    1399,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1402,     0,  1400,  1393,     0,  1401,     0,     0,
    1394,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1402,  1395,  1396,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1397,     0,     0,
       0,  1379,     0,     0,  1380,     0,     0,     0,  1381,  1382,
    1383,  1384,  1385,  1386,     0,     0,     0,  1402,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1387,     0,
       0,     0,     0,     0,     0,  1398,  1389,     0,  1399,     0,
       0,     0,     0,  1390,     0,     0,  1402,     0,     0,     0,
       0,     0,  1400,     0,  1403,  1401,     0,  1404,  1405,  1406,
       0,  1407,  1408,  1409,  1410,  1411,  1412,     0,  1391,     0,
       0,  2454,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1403,     0,     0,  1404,  1405,  1406,     0,
    1407,  1408,  1409,  1410,  1411,  1412,     0,     0,     0,     0,
    2606,     0,     0,     0,     0,  1379,     0,     0,  1380,     0,
       0,     0,  1381,  1382,  1383,  1384,  1385,  1386,     0,  1403,
       0,     0,  1404,  1405,  1406,     0,  1407,  1408,  1409,  1410,
    1411,  1412,  1387,     0,     0,     0,  2628,     0,  1379,     0,
    1389,  1380,     0,     0,  1402,  1381,     0,  1390,  1403,     0,
       0,  1404,  1405,  1406,     0,  1407,  1408,  1409,  1410,  1411,
    1412,     0,     0,     0,     0,  2631,     0,  1379,     0,  1392,
    1380,     0,  1391,  1389,  1381,  1382,  1383,  1384,  1385,  1386,
   -1847,     0,     0,     0,     0,  1393,     0,     0,     0,     0,
    1394,     0,     0,     0,  1387,     0,     0,     0,     0,     0,
       0,     0,  1389,     0,     0,  1391,     0,     0,     0,  1390,
       0,     0,  1395,  1396,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1397,     0,     0,
       0,     0,  1379,     0,  1391,  1380,     0,     0,     0,  1381,
    1382,  1383,  1384,  1385,  1386,     0,  1403,     0,     0,  1404,
    1405,  1406,     0,  1407,  1408,  1409,  1410,  1411,  1412,  1387,
       0,     0,     0,  2770,     0,  1398,     0,  1389,  1399,     0,
       0,     0,     0,  1392,  1390,  2627,     0,     0,     0,     0,
       0,     0,  1400,     0,     0,  1401,     0,     0,     0,  1393,
       0,     0,     0,     0,  1394,     0,     0,     0,     0,  1391,
       0,     0,     0,     0,     0,     0, -1847,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1395,  1396,     0,     0,
       0,     0, -1847,     0,     0,     0,     0, -1847,     0,     0,
       0,  1397,     0,     0,     0,  1392,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1379,  1393,     0,  1380,     0,     0,  1394,  1381,  1382,  1383,
    1384,  1385,  1386,     0, -1847,     0,     0,     0,     0,  1398,
       0,     0,  1399,     0,  1402,     0,     0,  1387,  1395,  1396,
       0,     0,     0,     0,     0,  1389,  1400,     0,     0,  1401,
       0,     0,  1390,  1397,     0,     0,     0,     0,     0,     0,
    1392,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1393,  1391,     0,  1400,
       0,  1394,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1398,     0,     0,  1399,     0,     0,     0,     0,     0,
       0,     0,     0,  1395,  1396,     0,     0,     0,  1400,     0,
       0,  1401,     0,     0,     0,     0,     0,     0,  1397,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1403,     0,  1402,  1404,
    1405,  1406,     0,  1407,  1408,  1409,  1410,  1411,  1412,     0,
       0,     0,     0,  2833,     0,     0,  1398,     0,     0,  1399,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1847,     0,  1400,     0,     0,  1401,     0,  1392,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1393,     0,     0,     0,     0,  1394,
    1402,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1395,  1396,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1397,     0,     0,     0,
    1403,     0,     0,  1404,  1405,  1406,     0,  1407,  1408,  1409,
    1410,  1411,  1412,     0,     0,     0,     0,  2940,     0,     0,
       0,     0,     0,     0,     0,  1402,     0,     0,     0,     0,
       0,     0,     0, -1847,  1398,     0,     0,  1399,     0,     0,
    1407,  1408,  1409,  1410,  1411,  1412,     0,     0,     0,     0,
       0,  1400,     0,     0,  1401,     0,     0,     0,     0,     0,
       0,     0,  1403,     0,     0,  1404,  1405,  1406,     0,  1407,
    1408,  1409,  1410,  1411,  1412,     0,     0,     0,     0,  2988,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1403,     0,     0,
    1404,  1405,  1406,     0,  1407,  1408,  1409,  1410,  1411,  1412,
       0,     0,     0,  1402,  3001,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1129,     0,  1403,     0,     0,  1404,  1405,
    1406,     0,  1407,  1408,  1409,  1410,  1411,  1412,     0,     0,
    1566,    94,    95,    96,    97,    98,    99,   100,   101,  1130,
     102,   103,   104,  1131,  1132,  1133,  1134,  1135,  1136,  1137,
     105,   106,  1138,   107,   108,   109,   781,   111,   112,   113,
     782,   783,   784,   785,   786,  1139,   119,   120,   121,   122,
     123,   124,  1140,  1141,   125,   126,   787,   788,   129,  1142,
     130,   131,   132,   133,   789,  1143,   790,  1144,   136,   137,
     138,   139,   140,   141,   791,   143,   144,   145,  1145,   146,
     147,   148,   149,   150,   151,  1146,   792,   153,   154,   155,
     793,   794,   795,   796,  1147,  1148,   797,   161,   162,   163,
     164,   165,   166,   167,   798,   799,   170,  1149,   171,  1150,
     172,   173,   174,   175,   176,   177,  1151,   178,   179,   180,
     181,   182,  1152,  1153,   183,   184,   185,   186,   187,  1154,
     188,   189,   190,  1155,   191,   192,   193,  1156,   194,   195,
     196,   197,   800,   199,   200,   201,   202,   203,   801,  1157,
     205,  1158,   206,   207,   802,   209,  1159,   210,  1160,   211,
     803,  1161,   804,   214,   215,   805,   806,   218,  1162,   219,
    1163,   807,   808,   222,  1164,   223,   224,   225,   226,   227,
     228,   229,   809,   231,   232,   233,   234,  1165,   235,   236,
     237,   238,   239,   240,  1166,   241,   810,   811,   244,   245,
     246,   247,   248,   812,   813,  1167,   814,  1168,   252,   815,
     816,   255,   817,   257,   258,   259,   260,   261,   262,  1169,
    1170,   263,   818,   265,   819,  1171,   267,   268,   269,  1172,
    1173,   270,   271,   272,   273,   274,   820,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   821,   822,   823,   297,   298,
     299,   824,  1174,   301,   302,   825,   304,  1175,   826,   306,
     827,   308,   309,   310,  1176,   311,   312,  1177,  1178,   313,
     314,   315,  1179,  1180,   316,   828,   829,   319,   830,   831,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1181,   332,   333,   832,   335,   336,   833,   338,   339,   340,
    1182,   341,   342,   343,   344,   345,   346,  1183,   347,   348,
     349,   834,   351,   352,   353,   354,  1184,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
    1185,   368,   369,   835,   371,   372,   373,   836,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,  1186,
     386,   387,   388,   389,   390,   837,   392,   838,   394,   395,
     396,   839,   398,   399,   840,   401,  1187,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   841,
     415,   842,   417,  1188,   418,   419,  1189,   420,   843,   422,
     423,   424,   425,   426,  1190,   844,   845,  1191,  1192,   429,
     430,   846,   432,   847,  1193,   434,   435,   848,   437,   438,
     439,   440,   441,  1194,  1195,   442,   443,   444,   445,   446,
     849,  1196,   448,   449,   450,   451,   452,  1197,   851,  1198,
     455,   852,   457,   458,   459,   460,   461,  1199,  1200,   462,
    1201,  1202,   463,   464,   465,   466,   467,   468,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   480,
     481,   482,   483,   506,     0,     0,     0,     0,     0,     0,
       0,     0,  1815,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   780,  1302,   582,     0,     0,     0,   887,
       0,     0,  2315,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   781,   111,   112,   113,
     782,   783,   784,   785,   786,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   787,   788,   129,     0,
     130,   131,   132,   133,   789,     0,   790,     0,   136,   137,
     138,   139,   140,   141,   791,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   792,   153,   154,   155,
     793,   794,   795,   796,     0,     0,   797,   161,   162,   163,
     164,   165,   166,   167,   798,   799,   170,  1439,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   800,   199,   200,   201,   202,   203,   801,  1303,
     205,     0,   206,   207,   802,   209,     0,   210,     0,   211,
     803,     0,   804,   214,   215,   805,   806,   218,     0,   219,
       0,   807,   808,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   809,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   810,   811,   244,   245,
     246,   247,   248,   812,   813,     0,   814,     0,   252,   815,
     816,   255,   817,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   818,   265,   819,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   820,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   821,   822,   823,   297,   298,
     299,   824,     0,   301,   302,   825,   304,     0,   826,   306,
     827,   308,   309,   310,     0,   311,   312,  1304,     0,   313,
     314,   315,     0,     0,   316,   828,   829,   319,   830,   831,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   832,   335,   336,   833,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   834,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   835,   371,   372,   373,   836,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   837,   392,   838,   394,   395,
     396,   839,   398,   399,   840,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   841,
     415,   842,   417,     0,   418,   419,     0,   420,   843,   422,
     423,   424,   425,   426,     0,   844,   845,     0,     0,   429,
     430,   846,   432,   847,  1305,   434,   435,   848,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     849,     0,   448,   449,   450,   451,   452,  1197,   851,     0,
     455,   852,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   480,
     481,   482,   483,   780,  1302,   582,     0,     0,     0,   887,
    1306,  1307,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   781,   111,   112,   113,
     782,   783,   784,   785,   786,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   787,   788,   129,     0,
     130,   131,   132,   133,   789,     0,   790,     0,   136,   137,
     138,   139,   140,   141,   791,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   792,   153,   154,   155,
     793,   794,   795,   796,     0,     0,   797,   161,   162,   163,
     164,   165,   166,   167,   798,   799,   170,  1441,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   800,   199,   200,   201,   202,   203,   801,  1303,
     205,     0,   206,   207,   802,   209,     0,   210,     0,   211,
     803,     0,   804,   214,   215,   805,   806,   218,     0,   219,
       0,   807,   808,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   809,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   810,   811,   244,   245,
     246,   247,   248,   812,   813,     0,   814,     0,   252,   815,
     816,   255,   817,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   818,   265,   819,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   820,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   821,   822,   823,   297,   298,
     299,   824,     0,   301,   302,   825,   304,     0,   826,   306,
     827,   308,   309,   310,     0,   311,   312,  1304,     0,   313,
     314,   315,     0,     0,   316,   828,   829,   319,   830,   831,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   832,   335,   336,   833,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   834,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   835,   371,   372,   373,   836,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   837,   392,   838,   394,   395,
     396,   839,   398,   399,   840,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   841,
     415,   842,   417,     0,   418,   419,     0,   420,   843,   422,
     423,   424,   425,   426,     0,   844,   845,     0,     0,   429,
     430,   846,   432,   847,  1305,   434,   435,   848,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     849,     0,   448,   449,   450,   451,   452,  1197,   851,     0,
     455,   852,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   480,
     481,   482,   483,   780,  1302,   582,     0,     0,     0,   887,
    1306,  1307,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   781,   111,   112,   113,
     782,   783,   784,   785,   786,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   787,   788,   129,     0,
     130,   131,   132,   133,   789,     0,   790,     0,   136,   137,
     138,   139,   140,   141,   791,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   792,   153,   154,   155,
     793,   794,   795,   796,     0,     0,   797,   161,   162,   163,
     164,   165,   166,   167,   798,   799,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   800,   199,   200,   201,   202,   203,   801,  1303,
     205,     0,   206,   207,   802,   209,     0,   210,     0,   211,
     803,     0,   804,   214,   215,   805,   806,   218,     0,   219,
       0,   807,   808,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   809,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   810,   811,   244,   245,
     246,   247,   248,   812,   813,     0,   814,     0,   252,   815,
     816,   255,   817,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   818,   265,   819,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   820,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   821,   822,   823,   297,   298,
     299,   824,     0,   301,   302,   825,   304,     0,   826,   306,
     827,   308,   309,   310,     0,   311,   312,  1304,     0,   313,
     314,   315,     0,     0,   316,   828,   829,   319,   830,   831,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   832,   335,   336,   833,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   834,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   835,   371,   372,   373,   836,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   837,   392,   838,   394,   395,
     396,   839,   398,   399,   840,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   841,
     415,   842,   417,     0,   418,   419,     0,   420,   843,   422,
     423,   424,   425,   426,     0,   844,   845,     0,     0,   429,
     430,   846,   432,   847,  1305,   434,   435,   848,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     849,     0,   448,   449,   450,   451,   452,  1197,   851,     0,
     455,   852,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   480,
     481,   482,   483,     0,     0,  1379,     0,     0,  1380,     0,
    1306,  1307,  1381,  1382,  1383,  1384,  1385,  1386,  1379,     0,
       0,  1380,     0,     0,     0,  1381,  1382,  1383,  1384,  1385,
    1386,     0,  1387,     0,     0,     0,  1828,     0,     0,     0,
    1389,     0,     0,     0,     0,  1387,     0,  1390,     0,     0,
       0,     0,     0,  1389,  1379,     0,     0,  1380,     0,     0,
    1390,  1381,  1382,  1383,  1384,  1385,  1386,  1379,     0,     0,
    1380,     0,  1391,     0,  1381,  1382,  1383,  1384,  1385,  1386,
       0,  1387,     0,     0,     0,  1391,     0,     0,     0,  1389,
       0,     0,     0,     0,  1387,     0,  1390,  2043,     0,     0,
       0,     0,  1389,  1379,     0,     0,  1380,     0,     0,  1390,
    1381,  1382,  1383,  1384,  1385,  1386,     0,     0,     0,     0,
       0,  1391,     0,  1829,     0,     0,     0,     0,     0,     0,
    1387,     0,     0,     0,  1391,     0,     0,     0,  1389,     0,
       0,     0,     0,     0,     0,  1390,     0,     0,  1379,     0,
       0,  1380,     0,     0,     0,  1381,  1382,  1383,  1384,  1385,
    1386,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1391,     0,     0,  1392,     0,  1387,  2082,     0,  2088,     0,
       0,  2083,     0,  1389,     0,     0,  1392,     0,     0,  1393,
    1390,     0,     0,     0,  1394,     0,     0,     0,     0,     0,
       0,     0,  1393,     0,     0,     0,     0,  1394,     0,     0,
       0,  3088,     0,     0,     0,  1391,  1395,  1396,     0,     0,
       0,     0,  1392,     0,     0,     0,     0,     0,     0,  1395,
    1396,  1397,     0,     0,     0,  1392,     0,     0,  1393,     0,
       0,     0,     0,  1394,  1397,     0,     0,     0,     0,     0,
       0,  1393,     0,     0,     0,     0,  1394,     0,     0,     0,
       0,     0,     0,     0,     0,  1395,  1396,     0,     0,  1398,
       0,  1392,  1399,     0,     0,     0,     0,     0,  1395,  1396,
    1397,     0,  1398,     0,     0,  1399,  1400,  1393,     0,  1401,
       0,     0,  1394,  1397,     0,     0,     0,     0,     0,  1400,
       0,     0,  1401,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1395,  1396,  1392,     0,  1398,     0,
       0,  1399,     0,     0,     0,     0,     0,     0,     0,  1397,
       0,  1398,  1393,     0,  1399,  1400,     0,  1394,  1401,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1400,     0,
       0,  1401,     0,     0,     0,     0,     0,     0,     0,  1395,
    1396,  3089,     0,     0,     0,     0,     0,  1398,     0,     0,
    1399,     0,     0,     0,  1397,     0,     0,     0,  1402,     0,
       0,     0,     0,     0,  1400,     0,     0,  1401,     0,     0,
       0,  1402,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2055,     0,     0,     0,     0,
       0,     0,  1398,     0,     0,  1399,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1402,     0,  1400,
       0,     0,  1401,     0,     0,     0,     0,     0,  1833,     0,
    1402,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1402,     0,     0,     0,
    1403,     0,     0,  1404,  1405,  1406,     0,  1407,  1408,  1409,
    1410,  1411,  1412,  1403,     0,     0,  1404,  1405,  1406,     0,
    1407,  1408,  1409,  1410,  1411,  1412,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1402,     0,     0,     0,     0,     0,     0,     0,  1403,
       0,     0,  1404,  1405,  1406,     0,  1407,  1408,  1409,  1410,
    1411,  1412,  1403,     0,     0,  1404,  1405,  1406,     0,  1407,
    1408,  1409,  1410,  1411,  1412,     0,     0,  1379,     0,     0,
    1380,     0,     0,     0,  1381,  1382,  1383,  1384,  1385,  1386,
       0,     0,     0,     0,     0,     0,     0,     0,  1403,     0,
       0,  1404,  1405,  1406,  1387,  1407,  1408,  1409,  1410,  1411,
    1412,     0,  1389,     0,     0,     0,     0,     0,     0,  1390,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1403,  1391,     0,  1404,  1405,  1406,     0,
    1407,  1408,  1409,  1410,  1411,  1412,  1379,     0,     0,  1380,
       0,     0,     0,  1381,  1382,  1383,  1384,  1385,  1386,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1387,     0,  1379,  2095,     0,  1380,     0,
       0,  1389,  1381,  1382,  1383,  1384,  1385,  1386,  1390,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1387,     0,     0,     0,     0,     0,     0,     0,
    1389,     0,     0,  1391,     0,     0,     0,  1390,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2093,     0,     0,     0,     0,  1392,     0,     0,     0,     0,
       0,     0,  1391,     0,     0,     0,     0,     0,     0,     0,
       0,  1393,     0,     0,  1379,     0,  1394,  1380,     0,     0,
       0,  1381,  1382,  1383,  1384,  1385,  1386,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1395,  1396,
       0,  1387,     0,     0,  2363,     0,     0,     0,     0,  1389,
       0,     0,     0,  1397,     0,     0,  1390,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1392,     0,     0,     0,     0,     0,
       0,  1391,     0,     0,     0,     0,     0,     0,     0,     0,
    1393,  1398,     0,     0,  1399,  1394,     0,     0,     0,     0,
       0,     0,     0,  1392,     0,     0,     0,     0,  1400,     0,
       0,  1401,     0,     0,     0,     0,     0,  1395,  1396,  1393,
       0,     0,     0,     0,  1394,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1395,  1396,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1397,     0,     0,     0,     0,     0,     0,     0,     0,
    1398,     0,     0,  1399,     0,     0,     0,     0,     0,     0,
       0,     0,  1392,     0,     0,  1379,     0,  1400,  1380,     0,
    1401,     0,  1381,  1382,  1383,  1384,  1385,  1386,  1393,  1398,
    1402,     0,  1399,  1394,     0,     0,     0,     0,     0,     0,
       0,     0,  1387,     0,     0,     0,  1400,     0,     0,  1401,
    1389,     0,     0,     0,     0,  1395,  1396,  1390,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1397,     0,     0,     0,     0,     0,     0,     0,  1379,     0,
       0,  1380,  1391,     0,     0,  1381,  1382,  1383,  1384,  1385,
    1386,  1379,     0,     0,  1380,     0,     0,     0,  1381,     0,
       0,  1384,  1385,  1386,     0,  1387,     0,     0,  1398,  1402,
       0,  1399,     0,  1389,     0,     0,     0,     0,  1387,     0,
    1390,     0,     0,     0,     0,  1400,  1389,     0,  1401,     0,
       0,     0,  1403,  1390,     0,  1404,  1405,  1406,  1402,  1407,
    1408,  1409,  1410,  1411,  1412,  1391,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1391,     0,
       0,     0,     0,     0,     0,  1379,     0,     0,  1380,     0,
       0,  2319,  1381,     0,     0,  1384,  1385,  1386,     0,     0,
       0,     0,     0,  1392,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1393,
    1389,     0,     0,     0,  1394,     0,     0,  1390,     0,     0,
       0,  1403,     0,     0,  1404,  1405,  1406,  1402,  1407,  1408,
    1409,  1410,  1411,  1412,     0,     0,  1395,  1396,     0,     0,
       0,     0,  1391,     0,     0,     0,     0,     0,     0,     0,
    1403,  1397,     0,  1404,  1405,  1406,  1392,  1407,  1408,  1409,
    1410,  1411,  1412,     0,     0,     0,     0,     0,  1379,  1392,
       0,  1380,  1393,     0,     0,  1381,     0,  1394,  1384,  1385,
    1386,     0,     0,     0,     0,  1393,     0,     0,     0,  1398,
    1394,     0,  1399,     0,     0,     0,     0,     0,     0,  1395,
    1396,     0,     0,  1389,     0,     0,  1400,     0,     0,  1401,
    1390,     0,  1395,  1396,  1397,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1397,     0,  1403,
       0,     0,  1404,  1405,  1406,  1391,  1407,  1408,  1409,  1410,
    1411,  1412,     0,  1392,     0,     0,     0,     0,     0,     0,
       0,     0,  1398,     0,     0,  1399,     0,     0,     0,  1393,
       0,     0,     0,     0,  1394,  1398,     0,     0,  1399,  1400,
       0,     0,  1401,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1400,     0,     0,     0,  1395,  1396,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1402,     0,
       0,  1397,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1392,     0,     0,  1398,
       0,     0,  1399,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1393,     0,     0,     0,  1400,  1394,     0,     0,
       0,  1402,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1402,     0,     0,     0,     0, -1847,
   -1847,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1397,     0,     0,     0,     0,     0,
    1403,     0,     0,  1404,  1405,  1406,     0,  1407,  1408,  1409,
    1410,  1411,  1412,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1847,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1402,  1400,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1403,     0,     0,  1404,  1405,  1406,     0,
    1407,  1408,  1409,  1410,  1850,  1412,  1403,     0,     0,  1404,
    1405,  1406,     0,  1407,  1408,  1409,  1410,  1411,  1412,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1402,     0,     0,     0,     0,     0,     0,     0,     0,
    1403,     0,     0,  1404,  1405,  1406,     0,  1407,  1408,  1409,
    1410,  1411,  1412,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1129,     0,
    1752,     0,     0,  1403,     0,     0,  1404,  1405,  1406,     0,
    1407,  1408,  1409,  1410,  1411,  1412,    94,    95,    96,    97,
      98,    99,   100,   101,  1130,   102,   103,   104,  1131,  1132,
    1133,  1134,  1135,  1136,  1137,   105,   106,  1138,   107,   108,
     109,   781,   111,   112,   113,   782,   783,   784,   785,   786,
    1139,   119,   120,   121,   122,   123,   124,  1140,  1141,   125,
     126,   787,   788,   129,  1142,   130,   131,   132,   133,   789,
    1143,   790,  1144,   136,   137,   138,   139,   140,   141,   791,
     143,   144,   145,  1145,   146,   147,   148,   149,   150,   151,
    1146,   792,   153,   154,   155,   793,   794,   795,   796,  1147,
    1148,   797,   161,   162,   163,   164,   165,   166,   167,   798,
     799,   170,  1149,   171,  1150,   172,   173,   174,   175,   176,
     177,  1151,   178,   179,   180,   181,   182,  1152,  1153,   183,
     184,   185,   186,   187,  1154,   188,   189,   190,  1155,   191,
     192,   193,  1156,   194,   195,   196,   197,   800,   199,   200,
     201,   202,   203,   801,  1157,   205,  1158,   206,   207,   802,
     209,  1159,   210,  1160,   211,   803,  1161,   804,   214,   215,
     805,   806,   218,  1162,   219,  1163,   807,   808,   222,  1164,
     223,   224,   225,   226,   227,   228,   229,   809,   231,   232,
     233,   234,  1165,   235,   236,   237,   238,   239,   240,  1166,
     241,   810,   811,   244,   245,   246,   247,   248,   812,   813,
    1167,   814,  1168,   252,   815,   816,   255,   817,   257,   258,
     259,   260,   261,   262,  1169,  1170,   263,   818,   265,   819,
    1171,   267,   268,   269,  1172,  1173,   270,   271,   272,   273,
     274,   820,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     821,   822,   823,   297,   298,   299,   824,  1174,   301,   302,
     825,   304,  1175,   826,   306,   827,   308,   309,   310,  1176,
     311,   312,  1177,  1178,   313,   314,   315,  1179,  1180,   316,
     828,   829,   319,   830,   831,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,  1181,   332,   333,   832,   335,
     336,   833,   338,   339,   340,  1182,   341,   342,   343,   344,
     345,   346,  1183,   347,   348,   349,   834,   351,   352,   353,
     354,  1184,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,  1185,   368,   369,   835,   371,
     372,   373,   836,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,  1186,   386,   387,   388,   389,   390,
     837,   392,   838,   394,   395,   396,   839,   398,   399,   840,
     401,  1187,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   841,   415,   842,   417,  1188,   418,
     419,  1189,   420,   843,   422,   423,   424,   425,   426,  1190,
     844,   845,  1191,  1192,   429,   430,   846,   432,   847,  1193,
     434,   435,   848,   437,   438,   439,   440,   441,  1194,  1195,
     442,   443,   444,   445,   446,   849,  1196,   448,   449,   450,
     451,   452,  1197,   851,  1198,   455,   852,   457,   458,   459,
     460,   461,  1199,  1200,   462,  1201,  1202,   463,   464,   465,
     466,   467,   468,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   863,   480,   481,   482,   483,  1129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,  1130,   102,   103,   104,  1131,  1132,
    1133,  1134,  1135,  1136,  1137,   105,   106,  1138,   107,   108,
     109,   781,   111,   112,   113,   782,   783,   784,   785,   786,
    1139,   119,   120,   121,   122,   123,   124,  1140,  1141,   125,
     126,   787,   788,   129,  1142,   130,   131,   132,   133,   789,
    1143,   790,  1144,   136,   137,   138,   139,   140,   141,   791,
     143,   144,   145,  1145,   146,   147,   148,   149,   150,   151,
    1146,   792,   153,   154,   155,   793,   794,   795,   796,  1147,
    1148,   797,   161,   162,   163,   164,   165,   166,   167,   798,
     799,   170,  1149,   171,  1150,   172,   173,   174,   175,   176,
     177,  1151,   178,   179,   180,   181,   182,  1152,  1153,   183,
     184,   185,   186,   187,  1154,   188,   189,   190,  1155,   191,
     192,   193,  1156,   194,   195,   196,   197,   800,   199,   200,
     201,   202,   203,   801,  1157,   205,  1158,   206,   207,   802,
     209,  1159,   210,  1160,   211,   803,  1161,   804,   214,   215,
     805,   806,   218,  1162,   219,  1163,   807,   808,   222,  1164,
     223,   224,   225,   226,   227,   228,   229,   809,   231,   232,
     233,   234,  1165,   235,   236,   237,   238,   239,   240,  1166,
     241,   810,   811,   244,   245,   246,   247,   248,   812,   813,
    1167,   814,  1168,   252,   815,   816,   255,   817,   257,   258,
     259,   260,   261,   262,  1169,  1170,   263,   818,   265,   819,
    1171,   267,   268,   269,  1172,  1173,   270,   271,   272,   273,
     274,   820,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     821,   822,   823,   297,   298,   299,   824,  1174,   301,   302,
     825,   304,  1175,   826,   306,   827,   308,   309,   310,  1176,
     311,   312,  1177,  1178,   313,   314,   315,  1179,  1180,   316,
     828,   829,   319,   830,   831,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,  1181,   332,   333,   832,   335,
     336,   833,   338,   339,   340,  1182,   341,   342,   343,   344,
     345,   346,  1183,   347,   348,   349,   834,   351,   352,   353,
     354,  1184,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,  1185,   368,   369,   835,   371,
     372,   373,   836,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,  1186,   386,   387,   388,   389,   390,
     837,   392,   838,   394,   395,   396,   839,   398,   399,   840,
     401,  1187,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   841,   415,   842,   417,  1188,   418,
     419,  1189,   420,   843,   422,   423,   424,   425,   426,  1190,
     844,   845,  1191,  1192,   429,   430,   846,   432,   847,  1193,
     434,   435,   848,   437,   438,   439,   440,   441,  1194,  1195,
     442,   443,   444,   445,   446,   849,  1196,   448,   449,   450,
     451,   452,  1197,   851,  1198,   455,   852,   457,   458,   459,
     460,   461,  1199,  1200,   462,  1201,  1202,   463,   464,   465,
     466,   467,   468,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   863,   480,   481,   482,   483,  1129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
    1901,    99,   100,   101,  1130,   102,   103,   104,  1131,  1132,
    1133,  1134,  1135,  1136,  1137,   105,   106,  1138,   107,   108,
     109,   781,   111,   112,   113,   782,   783,   784,   785,   786,
    1139,   119,   120,   121,   122,   123,   124,  1140,  1141,   125,
     126,   787,   788,   129,  1142,   130,   131,   132,   133,   789,
    1143,   790,  1144,   136,   137,   138,   139,   140,   141,   791,
     143,   144,   145,  1145,   146,   147,   148,   149,   150,   151,
    1146,   792,   153,   154,   155,   793,   794,   795,   796,  1147,
    1148,   797,   161,   162,   163,   164,   165,   166,   167,   798,
     799,   170,  1149,   171,  1150,   172,   173,   174,   175,   176,
     177,  1151,   178,   179,   180,   181,   182,  1152,  1153,   183,
     184,   185,  1902,   187,  1154,   188,   189,   190,  1155,   191,
     192,   193,  1156,   194,   195,   196,   197,   800,   199,   200,
     201,   202,   203,   801,  1157,   205,  1158,   206,   207,   802,
     209,  1159,   210,  1160,   211,   803,  1161,   804,   214,   215,
     805,   806,   218,  1162,   219,  1163,   807,   808,   222,  1164,
     223,   224,   225,   226,   227,   228,   229,   809,   231,   232,
     233,   234,  1165,   235,   236,   237,   238,   239,   240,  1166,
     241,   810,   811,   244,   245,   246,   247,   248,   812,   813,
    1167,   814,  1168,   252,   815,   816,   255,   817,   257,   258,
     259,   260,   261,   262,  1169,  1170,   263,   818,   265,   819,
    1171,   267,   268,   269,  1172,  1173,   270,   271,   272,   273,
     274,   820,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     821,   822,   823,   297,   298,   299,   824,  1174,   301,   302,
     825,   304,  1175,   826,   306,   827,   308,   309,   310,  1176,
     311,   312,  1177,  1178,   313,   314,   315,  1179,  1180,   316,
     828,   829,   319,   830,   831,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,  1181,   332,   333,   832,   335,
     336,   833,   338,   339,   340,  1182,   341,   342,   343,   344,
     345,   346,  1183,   347,   348,   349,   834,   351,   352,   353,
     354,  1184,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,  1185,   368,   369,   835,   371,
     372,   373,   836,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,  1186,   386,   387,   388,   389,   390,
     837,  1903,   838,   394,   395,   396,   839,   398,   399,   840,
     401,  1187,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   841,   415,   842,   417,  1188,   418,
     419,  1189,   420,   843,   422,   423,   424,   425,   426,  1190,
     844,   845,  1191,  1192,   429,   430,   846,   432,   847,  1193,
     434,   435,   848,   437,   438,   439,   440,   441,  1194,  1195,
     442,   443,   444,   445,   446,   849,  1196,   448,   449,   450,
     451,   452,  1197,   851,  1198,   455,   852,   457,   458,   459,
     460,   461,  1199,  1200,   462,  1201,  1202,   463,   464,   465,
     466,   467,   468,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   863,   480,   481,   482,   483,    93,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,   894,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   897,
       0,   898,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   899,   900,   901,   902,   903,
     904,   905,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   910,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   918,   919,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,     0,   301,   302,
     303,   304,     0,   924,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   927,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   928,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     931,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   933,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   936,   432,   937,     0,
     434,   435,   939,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   940,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   780,     0,
     582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   781,   111,   112,   113,   782,   783,   784,   785,   786,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   787,   788,   129,     0,   130,   131,   132,   133,   789,
       0,   790,     0,   136,   137,   138,   139,   140,   141,   791,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   792,   153,   154,   155,   793,   794,   795,   796,     0,
       0,   797,   161,   162,   163,   164,   165,   166,   167,   798,
     799,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   800,   199,   200,
     201,   202,   203,   801,  1303,   205,     0,   206,   207,   802,
     209,     0,   210,     0,   211,   803,     0,   804,   214,   215,
     805,   806,   218,     0,   219,     0,   807,   808,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   809,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   810,   811,   244,   245,   246,   247,   248,   812,   813,
       0,   814,     0,   252,   815,   816,   255,   817,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   818,   265,   819,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   820,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     821,   822,   823,   297,   298,   299,   824,     0,   301,   302,
     825,   304,     0,   826,   306,   827,   308,   309,   310,     0,
     311,   312,  1304,     0,   313,   314,   315,     0,     0,   316,
     828,   829,   319,   830,   831,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   832,   335,
     336,   833,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   834,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   835,   371,
     372,   373,   836,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     837,   392,   838,   394,   395,   396,   839,   398,   399,   840,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   841,   415,   842,   417,     0,   418,
     419,     0,   420,   843,   422,   423,   424,   425,   426,     0,
     844,   845,     0,     0,   429,   430,   846,   432,   847,  1305,
     434,   435,   848,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   849,     0,   448,   449,   450,
     451,   452,  1197,   851,     0,   455,   852,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   863,   480,   481,   482,   483,   780,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     3,     4,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   781,   111,   112,   113,   782,   783,   784,   785,   786,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   787,   788,   129,     0,   130,   131,   132,   133,   789,
       0,   790,     0,   136,   137,   138,   139,   140,   141,   791,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   792,   153,   154,   155,   793,   794,   795,   796,     0,
       0,   797,   161,   162,   163,   164,   165,   166,   167,   798,
     799,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   800,   199,   200,
     201,   202,   203,   801,     0,   205,     0,   206,   207,   802,
     209,     0,   210,     0,   211,   803,     0,   804,   214,   215,
     805,   806,   218,     0,   219,     0,   807,   808,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   809,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   810,   811,   244,   245,   246,   247,   248,   812,   813,
       0,   814,     0,   252,   815,   816,   255,   817,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   818,   265,   819,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   820,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     821,   822,   823,   297,   298,   299,   824,     0,   301,   302,
     825,   304,     0,   826,   306,   827,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     828,   829,   319,   830,   831,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   832,   335,
     336,   833,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   834,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   835,   371,
     372,   373,   836,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     837,   392,   838,   394,   395,   396,   839,   398,   399,   840,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   841,   415,   842,   417,     0,   418,
     419,     0,   420,   843,   422,   423,   424,   425,   426,     0,
     844,   845,     0,     0,   429,   430,   846,   432,   847,     0,
     434,   435,   848,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   849,     0,   448,   449,   450,
     451,   452,  1197,   851,     0,   455,   852,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   863,   480,   481,   482,   483,    93,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
       0,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,     0,   301,   302,
     303,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,  1504,   130,   131,   132,   133,   134,
       0,     0,  1505,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,  1506,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,  1507,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,  1508,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,  1509,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,  1510,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,  1504,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,  1506,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,  1507,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,  1970,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,  1509,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,  1510,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     3,     4,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,   508,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   511,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   614,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   657,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   614,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,   685,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,  1804,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,  1805,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,  1806,   420,     0,   422,  1807,   424,  1808,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,  1809,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,  2778,
       0,     0,     0,     0,  2779,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,   589,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     590,   428,     0,     0,   591,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   623,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   652,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   655,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   659,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   694,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   695,   111,   112,   113,     0,   696,   697,   698,   699,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   700,   701,   129,     0,   130,   131,   132,   133,     0,
       0,   702,     0,   136,   137,   138,   139,   140,   141,   703,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   704,   153,   154,   155,   705,   706,   707,   708,     0,
       0,   709,   161,   162,   163,   164,   165,   166,   167,   710,
     711,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,     0,   199,   200,
     201,   202,   203,     0,     0,   205,     0,   206,   207,   713,
     209,     0,   210,     0,   211,   714,     0,   715,   214,   215,
       0,   716,   218,     0,   219,     0,     0,     0,   222,     0,
     223,   224,   225,   226,   227,   717,   229,   718,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   719,     0,   244,   245,   246,   247,   248,   720,   721,
       0,   722,     0,   252,   723,   724,   255,   725,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   726,   265,   727,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   728,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     729,   730,   731,   297,   298,   299,     0,     0,   301,   302,
     732,   304,     0,     0,   306,   733,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,   734,   319,   735,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,     0,   335,
     336,     0,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   736,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   737,   371,
     372,   373,   738,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     739,   392,   740,   394,   395,   396,   741,   398,   399,   742,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   743,   415,     0,   417,     0,   418,
     419,     0,   420,   744,   422,   423,   424,   425,   426,     0,
     745,   746,     0,     0,   429,   430,     0,   432,     0,     0,
     434,   435,   747,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   748,     0,   448,   449,   450,
     451,   452,     0,   749,     0,   455,   750,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   506,     0,   507,     0,     0,     0,     0,
       0,     0,     0,     0,   480,   481,   482,   483,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     772,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     775,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
    1219,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,   507,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   509,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
    1221,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   510,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   512,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   694,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   695,   111,   112,   113,
       0,   696,   697,   698,   699,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   700,   701,   129,     0,
     130,   131,   132,   133,     0,     0,   702,     0,   136,   137,
     138,   139,   140,   141,   703,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   704,   153,   154,   155,
     705,   706,   707,   708,     0,     0,   709,   161,   162,   163,
     164,   165,   166,   167,   710,   711,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,     0,   199,   200,   201,   202,   203,     0,     0,
     205,     0,   206,   207,   713,   209,     0,   210,     0,   211,
     714,     0,   715,   214,   215,     0,   716,   218,     0,   219,
       0,     0,     0,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   718,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   719,     0,   244,   245,
     246,   247,   248,   720,   721,     0,   722,     0,   252,   723,
     724,   255,   725,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   726,   265,   727,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   728,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   729,   730,   731,   297,   298,
     299,     0,     0,   301,   302,   732,   304,     0,     0,   306,
     733,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,   734,   319,   735,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,     0,   335,   336,     0,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   736,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   737,   371,   372,   373,   738,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   739,   392,   740,   394,   395,
     396,   741,   398,   399,   742,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   743,
     415,     0,   417,     0,   418,   419,     0,   420,   744,   422,
     423,   424,   425,   426,     0,   745,   746,     0,     0,   429,
     430,     0,   432,     0,     0,   434,   435,   747,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     748,     0,   448,   449,   450,   451,   452,     0,   749,     0,
     455,   750,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,   480,
     481,   482,   483,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,  1897,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,  2403,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,  2418,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,  2580,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   601,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   602,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   603,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   604,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     605,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   673,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   769,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   603,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     605,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,  1500,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,     0,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,  1598,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,  1884,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,  1899,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,  2508,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,  2509,   111,   112,   113,     0,   696,  2510,   698,   699,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   700,   701,   129,     0,   130,   131,   132,   133,     0,
       0,  2511,     0,   136,   137,   138,   139,   140,   141,  2512,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,  2513,   153,   154,   155,  2514,  2515,  2516,  2517,     0,
       0,  2518,   161,   162,   163,   164,   165,   166,   167,   710,
     711,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   712,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,     0,   199,   200,
     201,   202,   203,     0,     0,   205,     0,   206,   207,   713,
     209,     0,   210,     0,   211,  2519,     0,  2520,   214,   215,
    2521,  2522,   218,     0,   219,     0,     0,     0,   222,     0,
     223,   224,   225,   226,   227,   228,   229,  2523,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,  2524,     0,   244,   245,   246,   247,   248,   720,   721,
       0,   722,     0,   252,  2525,  2526,   255,  2527,   257,   258,
     259,   260,   261,   262,     0,     0,   263,  2528,   265,  2529,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,  2723,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     729,  2531,   731,   297,   298,   299,     0,     0,   301,   302,
    2533,   304,     0,     0,   306,   733,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,  2535,   319,  2536,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,     0,   335,
     336,     0,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   736,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,  2537,   371,
     372,   373,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
    2538,   392,     0,   394,   395,   396,  2540,   398,   399,   742,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  2724,   415,     0,   417,     0,   418,
     419,     0,   420,  2542,   422,   423,   424,   425,   426,     0,
     745,   746,     0,     0,   429,   430,     0,   432,     0,     0,
     434,   435,  2543,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,  2544,     0,   448,   449,   450,
     451,   452,     0,   749,     0,   455,  2545,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   694,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   480,   481,   482,   483,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   695,   111,   112,   113,
       0,   696,   697,   698,   699,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   700,   701,   129,     0,
     130,   131,   132,   133,     0,     0,   702,     0,   136,   137,
     138,   139,   140,   141,   703,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   704,   153,   154,   155,
     705,   706,   707,   708,     0,     0,   709,   161,   162,   163,
     164,   165,   166,   167,   710,   711,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   712,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,     0,   199,   200,   201,   202,   203,     0,     0,
     205,     0,   206,   207,   713,   209,     0,   210,     0,   211,
     714,     0,   715,   214,   215,     0,   716,   218,     0,   219,
       0,     0,     0,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   718,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   719,     0,   244,   245,
     246,   247,   248,   720,   721,     0,   722,     0,   252,   723,
     724,   255,   725,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   726,   265,   727,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   729,   730,   731,   297,   298,
     299,     0,     0,   301,   302,   732,   304,     0,     0,   306,
     733,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,     0,   734,   319,   735,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,     0,   335,   336,     0,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   736,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   737,   371,   372,   373,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   739,   392,     0,   394,   395,
     396,   741,   398,   399,   742,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     415,     0,   417,     0,   418,   419,     0,   420,   744,   422,
     423,   424,   425,   426,     0,   745,   746,     0,     0,   429,
     430,     0,   432,     0,     0,   434,   435,   747,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     748,     0,   448,   449,   450,   451,   452,     0,   749,     0,
     455,   750,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   480,
     481,   482,   483,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     509,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   510,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,     0,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,     0,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,     0,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   512,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     1,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     2,
       3,     4,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     5,     5,     0,     0,
       0,     0,     0,     0,     0,     6,     6,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     7,     7,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     8,     8,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       9,     9,    10,    10,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      11,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,    12,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    13,     0,     0,     0,     0,
      14,    14,     0,     0,     0,     0,     0,     0,    15,    15,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    18,    18,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,    20,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    21,    21,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    22,    22,     0,    23,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,    24,     0,     0,     0,     0,     0,
       0,     0,    25,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    26,     0,     0,
       0,     0,     0,    27,    27,     0,     0,    28,    28,     0,
       0,     0,     0,     0,     0,     0,     0,    29,    29,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
      30,     0,     0,    31,    31,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
      32,     0,     0,     0,    33,    33,     0,     0,   544,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   545,    36
};

static const yytype_int16 yycheck[] =
{
       6,    36,   656,   501,     0,   667,   639,     0,   622,     0,
      46,   537,     6,     0,     0,  1069,   545,   868,   947,  1422,
     740,  1456,  1010,     0,  1459,   868,  1068,   663,     0,     0,
       0,  1048,    16,   665,   617,    48,   746,    30,  1347,    16,
      48,   539,   672,  1043,  1816,  1244,   771,  1831,   773,   950,
    1834,    31,  1812,  1895,  2271,  1037,  1116,   544,   656,  2240,
     658,    54,   660,  2240,  1045,   966,   545,   540,   876,  1774,
    1376,  1377,  1249,  2269,     0,     6,  1891,  2145,   979,  1939,
    1940,  1941,     0,     0,     0,    35,  2280,    21,     0,     0,
    1709,  1710,  1073,  1875,     0,  1714,  2287,     0,     0,  1430,
       0,     0,     0,  2097,  1812,    52,  1866,     0,  1954,   559,
      90,     5,     9,   636,     5,     5,     0,     0,   636,     0,
       0,    60,     0,     0,     0,     0,     0,     0,     0,    11,
     700,   701,    60,    15,    75,   868,   987,  2147,  1757,  1758,
       5,    60,   875,  2153,  1575,  1024,  1215,     5,    13,    14,
     117,   119,  1967,     5,   139,     5,     5,     9,  1866,     9,
    2587,   731,  1477,   777,    13,    14,    20,    21,     5,     5,
     172,     5,    13,    14,     5,     5,    13,    14,     5,    13,
      14,  2663,    13,    14,     5,     5,    13,    14,     5,     5,
       5,     5,     5,    13,    14,     5,    13,    14,    13,    14,
      13,    14,    42,    13,    14,   109,  1057,     5,     5,  1060,
    1061,  2577,     5,     5,     5,     5,  2031,  2032,    69,    85,
      13,    14,    95,    95,  2590,   935,    11,     5,    29,   962,
      15,    56,   124,  1479,   122,    36,    42,   122,    60,  2641,
    1342,     5,   200,     5,     3,    29,   171,     5,  1342,  2759,
    2195,   309,    36,   293,   987,  2573,   989,   990,    43,   285,
     189,  1342,   287,   129,  2483,   109,  2727,     5,     5,   293,
       5,     5,   117,  1081,    33,    34,  2678,  2823,    77,   122,
       3,     4,     5,     4,  1092,   147,     9,    61,     9,    88,
      75,   119,    11,  2152,   137,    69,    15,  2084,  2856,     8,
    2160,   276,    11,   163,   161,   309,    15,  2210,   378,    18,
      19,    20,   191,  2795,    29,  2551,    29,   168,    11,   273,
     357,     9,   210,    29,  1057,   895,   896,  1060,  1061,   161,
      36,    11,   946,   300,   163,  2056,  1056,    77,    39,   868,
    2408,   108,   441,    11,  2412,  3057,   875,    15,    88,  2054,
     120,   921,   463,   215,   358,     4,  2923,  2759,  2539,   461,
       9,   499,   994,    43,  2085,  2582,    70,  2209,   951,    11,
       0,  1237,   132,    15,   485,    43,   441,   329,   235,  2745,
      13,    14,    75,   485,   871,  2145,  3098,  2397,  2584,  2173,
    2400,  2206,  2295,  2208,   117,    75,   419,   980,  2956,   228,
     499,    43,   369,   235,   362,   110,   358,    75,   383,   269,
     349,   170,   370,   172,   287,   287,   165,   132,    38,   132,
    1034,   349,  1351,   193,  1007,   126,   270,   284,  2855,   499,
     349,   293,   277,    75,   499,  2143,   494,  2145,   304,   406,
     244,   464,  2988,  2062,  2063,  2064,  2065,  2066,   406,   277,
    2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,
     989,   990,   499,   503,   238,  1774,  1332,  2686,   347,   320,
    1349,  3038,   457,   499,   499,   443,   319,   350,   350,   503,
     447,  1808,  1809,   250,  2886,   439,  2705,  2969,  1121,  2725,
     494,   258,   417,   216,   461,   453,  3054,   499,  2313,   120,
     493,  1561,   406,  2122,  2123,  1505,  2451,   211,  1241,  1032,
     545,  3021,  1818,    11,  1032,   238,  1585,    15,   485,  1252,
    1622,  1254,   282,  2925,  1833,  1840,  1259,   349,  1622,  1623,
    2957,   537,   499,   166,  2852,  1589,  2997,  2396,  1969,   545,
    1621,  2328,  2736,  1276,   369,   411,  2727,   110,  1879,   441,
    2727,   439,   499,  1003,   439,   175,   497,    77,   171,   450,
     501,   545,  1224,   403,   503,   149,   315,   544,    88,   463,
     499,   433,   193,  1306,  1307,   503,    32,   393,   394,  1215,
     289,   406,  2650,   434,   503,   386,  1465,  2655,   461,   461,
    2658,   485,  2958,   599,   600,  1841,  1656,   403,   348,   612,
      56,   498,   386,   639,   612,   499,  1339,  1340,   499,   499,
    1343,  1344,  2454,   495,   198,  2461,   622,  1425,   417,  3021,
    2614,   200,   447,  1237,    66,    67,   376,   500,   500,   502,
     502,   396,  2642,   437,   499,   631,   620,  2854,   631,   497,
     631,   499,   463,   501,   631,   631,   580,   499,  2408,   499,
     499,   497,  2412,   499,   631,   661,   662,   663,   499,   631,
     631,   631,   499,   499,   485,   499,  2860,  2449,   499,   499,
    2861,   651,   499,   623,   499,  1245,  1246,   417,   499,   499,
     386,  1317,   499,  1534,   499,   499,   499,    60,   244,   499,
     455,  1217,   451,  1544,   173,   499,  1547,   132,   503,  1331,
    2408,   499,   499,    25,  2412,   631,   499,   499,   499,   499,
     495,   499,  2572,   631,   631,   631,  1330,  1243,  1332,   631,
     631,   499,  2790,  1337,   578,   631,   580,   581,   631,   631,
    2435,   631,   631,   631,   740,   499,  1350,   499,   631,  1371,
    1372,   499,  1730,  1476,  1477,  2054,  2963,   631,   631,   603,
     631,   631,  1388,   631,   631,   631,   631,   631,  2954,  1373,
    2575,   499,   499,  1289,   499,   499,   245,   490,   491,   490,
     491,   777,  1301,   492,   493,   494,   495,   486,   487,   488,
    1363,   490,   491,   492,   493,   494,   495,  1419,  1596,   451,
    1641,  1342,  1428,  1291,  1292,  1427,   463,  1429,  1641,  2105,
    1298,  1534,   490,   491,   417,   502,   362,  2134,  2135,  2136,
    2137,  1544,   461,  1300,  1547,   137,  2997,  1994,   485,  3015,
    2997,  1294,  1301,  2000,   492,   493,   494,   495,     4,   172,
    1709,  1710,   499,     9,  1735,  1714,   485,   272,  1820,   244,
     272,   490,   491,   177,    38,   277,  2688,   282,   490,   491,
     492,   493,   494,   495,  1380,   334,   344,  2476,   494,   244,
     488,    25,   868,    29,  1918,   501,  3083,    31,   244,   875,
     876,   877,  1801,   501,   251,   488,  1530,   463,  1757,  1758,
    1605,   437,  1942,   224,  1617,  1618,  1522,   893,   501,    96,
    2650,   370,   422,  1391,   871,  2655,   328,   270,  2658,   485,
     117,  1626,  2488,  1628,   238,  1503,  1631,   177,  1641,    38,
    2496,   488,   947,   499,    80,   406,   922,   711,   132,  2118,
      50,  1654,   499,    89,  1557,  1558,  1559,   406,    57,   270,
     200,  2240,  1530,  2641,   119,   453,   942,   943,   944,   733,
     946,   947,  2650,   499,   365,   159,  1927,  2655,  1578,  1585,
    2658,  1549,   118,     4,    25,   132,  1554,   362,     9,   499,
      31,  1978,   305,    69,   970,   172,  1983,   405,   238,   291,
    2678,   765,   189,   137,   453,  1876,   349,   362,   499,   108,
      77,   175,   159,   989,   990,  1511,   362,  2829,  1602,  2608,
     224,    88,   490,   491,   492,   493,   494,   495,   410,   206,
     412,   494,   440,   376,  1017,  1018,   482,  1020,   501,  1017,
    1018,   117,  1020,  1019,   868,   222,   497,  1023,  1024,   204,
     501,   875,   292,   189,   346,   232,   348,    24,  1034,     4,
    2790,   244,   437,    30,     9,   201,   270,   500,   379,   382,
     503,    11,  1540,    25,   334,    15,   176,  1545,     5,    31,
    1056,  2759,   437,    23,   376,   272,   497,    54,  1038,   266,
     501,   437,   192,   277,    34,    35,   137,   197,   282,     4,
     199,  1622,  1623,  1624,     9,  1081,   410,   410,   412,   412,
     287,   334,  2790,   244,  1817,   270,  1092,   272,   501,   497,
    1616,   499,  1072,   501,   499,   272,   330,   221,   439,   953,
     277,    13,    14,   437,   234,   282,  1839,  1840,   962,  1723,
    1116,   482,  1641,   907,   499,   287,   406,   370,    88,   187,
     188,   250,   976,   499,  1646,  1654,  2435,   291,  1650,   258,
    1652,   925,  1658,   987,   161,   989,   990,    13,    14,   166,
     410,   270,   412,  2762,   334,   379,   353,     8,  1762,   362,
      11,   161,  2924,   406,    15,   137,   166,    18,    19,    20,
      13,    14,   500,   453,   434,   503,   272,   437,  2097,  2223,
      25,   277,   301,  1898,  2373,  1900,    31,   492,  2886,  2022,
    2222,  1814,   346,  2062,  2063,  2064,  2065,  2066,   256,   257,
    2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,
     453,   362,   151,   170,  2221,   439,  2223,  2207,   235,  1215,
     424,  1217,   376,   461,   320,   463,   406,  2925,  1214,   348,
     291,   435,  2264,  1214,   437,   235,   392,  1214,  1214,   395,
     336,  1237,  2407,  3075,   441,   503,   369,  1243,  1244,    13,
      14,   370,  2417,  2122,  2123,  2420,  1722,   424,  1724,  1725,
    3022,   381,   256,   257,   499,  3039,  3040,   284,   435,    13,
      14,   390,  1995,   453,   601,   602,   410,   604,   412,  3041,
     500,   342,   172,   406,   284,   346,   437,   633,   500,   635,
     444,   503,   137,  1289,   500,   500,   499,   503,  1998,  1999,
    2191,   500,    13,    14,   503,  1301,    13,    14,   366,   367,
    1962,   500,    13,    14,   503,   376,   206,   500,  3092,   291,
     503,  1317,   500,  3021,   447,   503,   500,  1301,   500,   503,
      56,   503,   222,  1300,  1330,  3097,  1332,   410,   434,   412,
    1336,  1337,   232,   221,  1327,   441,   197,  2413,   499,  2415,
    1346,   499,  1348,  1349,  1350,  1351,  1352,  1353,  1354,   500,
    1327,   500,   503,   171,   503,  1327,  1327,  1327,   219,  1901,
     342,  1903,   366,   367,   346,   500,   499,  1373,   503,  1375,
    2206,   500,  2208,   444,  1380,  1381,  1382,  1383,  1384,  1385,
    1386,  1387,  1388,   482,  2020,   500,  1392,  1393,   503,  2240,
     500,  1397,   217,   503,   376,  1401,    13,    14,  1404,  1405,
    1406,  1407,  1408,  1409,  1410,  1411,  1412,   500,   500,  1415,
     503,   503,  2611,   152,     5,  2818,  1422,     8,  2727,  1425,
     369,    25,  1428,    14,    13,    14,   500,    31,   289,   503,
       8,    13,    14,    11,    25,   342,   291,    15,    29,   500,
       8,  1447,   503,    11,   152,  1971,   500,    15,  2502,  1462,
      18,    19,    20,   353,  1462,  2455,   152,   406,   152,  1465,
     500,  1445,   444,   503,   499,    43,   500,    35,  2100,   503,
    1476,  1477,    50,     8,   272,   147,    11,    96,   501,  2093,
      15,    16,    17,    18,    19,    20,    38,   342,  1342,   161,
     453,   346,   500,  2022,   166,   503,    84,    75,   447,   500,
      35,   500,   503,   465,   503,  1511,  1499,  2240,    43,   450,
     500,   499,   461,   503,  1520,    50,  1522,  2043,   499,  2017,
       8,   376,   500,    11,   316,   503,   500,    15,    25,   503,
      18,    19,    20,   137,    31,  2061,   485,    13,    14,   500,
      75,   511,   503,   215,   152,   500,   500,    35,   503,   503,
     499,    13,    14,   172,   499,  1561,  2991,  2992,  1564,  1565,
     499,  1567,  2088,   235,  2763,    37,  2198,   145,   499,  2095,
     499,   541,    13,    14,  2157,    13,    14,    13,    14,  1585,
    1434,  2306,    13,    14,    13,    14,   152,   206,   152,   444,
    1596,    13,    14,   152,   300,   287,  1602,  2476,   176,    13,
      14,  1594,   233,   222,    38,  2241,   499,  2243,    13,    14,
    1616,     5,   284,   232,   192,     5,    25,    13,    14,   197,
     499,   293,    31,   166,  2257,   486,   487,   488,   499,   490,
     491,   492,   493,   494,   495,  1641,  3071,    13,    14,   499,
     137,   176,  2493,  2273,   357,   358,     5,   266,  1654,   499,
    1656,   219,  1658,   623,   357,   358,   234,   192,   260,   261,
     499,  1667,   197,   369,   499,     6,  1672,   366,   367,   499,
      11,   357,   358,   499,    15,     5,  1711,   357,   358,    20,
      21,    22,    23,    24,   219,   220,    27,   291,  2997,    30,
      31,  2733,   499,    34,    35,   499,   147,   989,   990,   234,
     406,     5,   499,  1709,  1710,  1711,   499,   369,  1714,   499,
     161,   289,   499,    54,  2240,   166,  1722,  1723,  1724,  1725,
     499,   289,     5,   499,   499,   148,  1732,  1762,   137,  2608,
    1736,   219,   499,  1739,   353,   499,     9,   272,   342,   499,
     275,   447,   346,   462,   406,   298,    87,    88,    89,    90,
      91,  1757,  1758,   503,   289,   461,  1762,   292,   217,  2602,
    2493,   433,    99,   503,   215,  2498,   500,    38,   166,   284,
    1776,   166,   376,  1779,   282,  1781,   233,  2303,   376,   485,
    2505,  2506,   417,   499,   235,   447,    88,  1641,   503,  2777,
     499,  1645,  2424,   499,   291,  1801,   417,    56,    56,   461,
    1654,   289,   417,   381,   417,   263,  1812,  2795,   508,   500,
     417,  2443,   461,  2546,  2547,    95,   152,   501,  1812,  2539,
     272,   499,   272,   485,   151,   497,  1832,    38,   500,   501,
     499,   499,     9,   284,  1827,    37,  1871,   499,   415,   415,
     444,   497,   293,  1849,  1850,   342,   381,   497,   417,   346,
    1827,     8,   417,   500,     0,  1827,  1827,  1827,    15,   417,
    1866,    18,    19,    20,   503,   457,   417,   499,    11,   344,
      16,   498,  1866,   503,  2803,   503,  2727,  1883,   415,   376,
      69,  1812,   291,  2762,    30,   505,    75,   499,   277,   499,
      36,   417,   508,   180,   162,  1901,  1902,  1903,   503,    88,
     500,   171,    48,   500,   499,   483,   215,   503,    54,   263,
     379,  2899,   490,   491,   492,   493,   494,   495,   486,   487,
     488,   224,   490,   491,   492,   493,   494,   495,   117,   309,
     119,   288,   309,   342,   441,  1866,  1942,   346,   500,    38,
     503,   272,   499,   224,   293,   224,  3000,   444,   483,   453,
     325,   486,   487,   488,   499,   490,   491,   492,   493,   494,
     495,   285,   152,   461,    38,  1971,   152,   376,   503,   287,
     500,   272,   500,   497,   287,   500,  2474,   482,  2504,   482,
     500,  1987,   433,  2716,  2717,    38,   500,   500,   500,   177,
     500,   500,   498,   171,  2727,   171,   482,   499,   486,   487,
     488,   500,   490,   491,   492,   493,   494,   495,   500,   500,
     500,   500,   200,   500,  2020,   204,  2022,   501,   500,   500,
     503,     8,   500,   500,    11,   417,   500,   155,    15,   499,
     458,    18,    19,    20,  2040,   444,  2965,  2043,   499,  1009,
     484,   288,   369,  2049,  2706,   499,  2052,   288,    35,  2055,
     238,   288,  1906,   439,   503,  2061,  2062,  2063,  2064,  2065,
    2066,   243,  2097,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2602,   458,   447,  2082,  2083,   287,   406,
    2086,   488,  2088,   272,   503,   417,   499,  2093,   277,  2095,
     152,  2097,   272,  2128,  2130,   200,   152,   152,  1952,   500,
    2106,   417,   417,  2109,   292,  2111,   417,   417,   279,   279,
    2145,   498,  2118,  2119,   499,    38,  2122,  2123,   344,   500,
     447,  2127,  2128,   285,   503,  2131,   287,   461,    38,   152,
     500,   320,   289,   498,   461,   498,   277,  2143,   143,  2145,
     171,    11,   166,   171,   500,   500,  2997,   336,   500,  2143,
     500,  2145,  2158,   494,   500,   499,   406,   498,   485,   297,
     501,   500,   171,   503,   485,   180,   288,   500,  2022,   350,
     511,   500,   499,  2027,   362,  2029,    52,   499,  2184,  2033,
    2034,   446,    86,    38,   152,   499,   503,   175,   500,   428,
      38,   499,    38,   500,  2830,  2201,    81,   441,   539,   540,
     541,  2727,    57,   500,   500,   499,   498,   500,   503,   171,
     499,    57,  2143,   503,  2145,   500,   500,   408,   500,   222,
     296,    97,   410,   500,   412,   499,   222,   294,   500,    56,
     499,   184,   219,  2239,  2240,  2241,   499,  2243,   500,   580,
     428,   461,   488,   500,   500,   434,   434,   123,   202,   437,
     117,  2884,   441,   108,    38,   224,   499,    83,   599,   600,
     601,   602,   108,   604,  2997,   141,  2928,   277,  2794,   145,
     190,  2797,   501,   614,   501,   277,  2272,  2270,   501,   501,
     501,  2272,   623,  2937,   501,  2272,  2272,   501,   501,   501,
     417,   167,   417,  2907,   170,  2909,   501,  2303,  2291,   500,
    2293,   501,   289,   501,   501,   501,   501,   648,   501,   185,
     651,    38,   272,  2319,   501,   109,   501,   501,   501,   461,
     175,   488,   501,   287,   171,  1295,   501,  1297,   501,   486,
     487,   488,   501,   490,   491,   492,   493,   494,   495,   680,
     681,   682,   683,   501,   199,   501,  2844,   493,   501,   501,
     501,   501,   501,   199,   501,   503,   501,   501,   222,   499,
     499,  2367,  2368,  2999,   499,   499,  2372,  2373,   499,   460,
     500,  2377,    88,   133,  2380,  2381,   499,   336,    38,  2385,
     152,    75,   500,   124,   152,    38,  2240,    87,     3,    89,
       5,    91,   500,   358,   306,   250,    38,   358,   544,   545,
     500,   277,  2408,   258,   250,   499,  2412,   499,   503,   285,
     499,   499,   258,  2267,  2408,   270,   499,   446,  2412,   327,
      75,   499,   189,  2921,   270,   277,   248,   441,   428,   499,
      69,   290,    69,    56,  2440,   499,    38,   500,   499,   376,
     441,   488,   270,   503,   287,   428,   301,    38,   499,  2442,
     290,  2444,   328,   290,   499,   301,   500,   500,   500,   500,
     499,   360,  2468,   202,   287,   500,   612,   287,    11,     9,
    2476,  2997,    15,   500,   343,   122,   439,  2408,   357,   500,
      23,  2412,   499,    24,    35,   631,     9,   500,  1958,  2495,
    2602,    34,    35,   348,   631,  2020,   111,   112,  2504,   486,
     487,   488,   348,   490,   491,   492,   493,   494,   495,  1009,
    2267,  1832,  2896,   981,  1493,   370,  1027,  2917,  3037,  1849,
    2978,  1465,  2162,  2911,   370,  1026,  2816,  1492,  2145,     0,
    1866,  2791,  2143,  2539,  2430,   390,  1506,  2886,  2397,  2885,
     881,  2903,  1342,  2414,   390,    88,  1516,  2904,  1518,  1029,
    2669,  1521,  2981,  1342,  1342,  2982,  1342,  1527,   537,  1529,
    3025,  1420,  1737,  1668,  1833,  1567,  1777,   600,  1780,  1815,
    2440,  1541,   187,   188,  2161,  2498,  1546,  2431,  2943,  3049,
    1550,  1551,  1552,  1553,  2699,  1555,  1556,     8,  3001,  3010,
      11,  3042,  2585,  2747,    15,  1043,  2602,    18,    19,    20,
    1889,  1902,  2608,  2281,  2999,  2611,  2216,   948,  2614,  3008,
    1886,  2243,  1963,  2996,    35,  1291,  1301,  2623,  2624,  1243,
     537,  2627,  2224,  1528,    95,  2239,  1827,  2878,  1445,  1896,
    1038,  2200,  1654,  2276,  2445,  2641,  2925,   252,   253,   254,
     255,   256,   257,  2674,  2650,   260,   261,  2641,  2199,  2655,
     991,  2995,  2658,    -1,    -1,  1446,  2650,    -1,    -1,  2665,
    2666,  2655,    -1,    -1,  2658,    -1,    -1,    -1,  1009,  1010,
      -1,    -1,  2678,    -1,  2680,    -1,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2678,    -1,    -1,    -1,    -1,    -1,
     161,  2697,    -1,    -1,    -1,   166,    -1,  1038,  1039,  1040,
     171,  1042,  1043,    -1,    -1,    -1,    -1,    -1,    -1,   180,
    2641,    -1,    -1,   184,  1055,    -1,    -1,    -1,    -1,  2650,
      -1,  2727,    -1,    -1,  2655,   871,    -1,  2658,    -1,    -1,
      -1,  1072,    -1,    -1,    -1,  1076,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   889,   215,  2738,    -1,  2678,  2602,    -1,
      -1,   366,   367,  2759,    -1,    -1,  2762,  2763,    -1,    -1,
      -1,   740,    -1,   909,   235,  2759,    -1,    -1,  2803,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2786,    -1,    -1,    -1,  2790,    -1,    -1,    -1,  2794,    -1,
      -1,  2797,    -1,    -1,   494,    -1,  2790,  2803,   219,    -1,
      -1,   947,   537,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2818,   284,  2668,  2821,   287,    -1,    -1,    -1,
      -1,    -1,   293,   740,  2830,    -1,    -1,    -1,  2759,  2835,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1825,   327,    -1,    -1,  2790,
      -1,    -1,    -1,    -1,   479,   480,  2859,    -1,   289,  1210,
      -1,  1017,  1018,  2727,  1020,    -1,    -1,  1218,    -1,   350,
    2886,    -1,    -1,    -1,    -1,    -1,  1227,    -1,    -1,    -1,
      -1,    -1,  2886,    -1,    -1,    -1,    -1,    -1,   877,    -1,
      -1,  2907,    -1,  2909,    -1,  2911,    -1,    -1,    -1,  2915,
      -1,    -1,    -1,    -1,   614,  1256,    -1,    -1,    -1,  2925,
      -1,    -1,    -1,    -1,    -1,  2918,    -1,    -1,    -1,    -1,
      -1,  2925,    -1,    -1,    -1,   406,    -1,    -1,    -1,  2945,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   648,    -1,
    1291,  1292,    -1,  1294,  1295,  2886,  1297,  1298,    -1,  2965,
     877,    -1,   433,    -1,    -1,    -1,    -1,    -1,   511,    -1,
     441,    -1,  2978,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     680,   681,   682,   683,    -1,    -1,    -1,   458,    -1,   460,
     461,  2997,    -1,  2999,  2925,    -1,    -1,   540,   541,  2853,
      -1,    -1,    -1,    -1,    -1,   740,  1347,    -1,   987,    -1,
      -1,  1981,    -1,    -1,    -1,  3021,    -1,  1358,  3024,  3025,
      -1,  3014,    -1,    -1,    -1,    -1,   497,  3021,    25,   500,
     501,   502,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    38,   740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1391,  3057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,  1056,    -1,    -1,
     623,  1422,  1423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3021,    -1,  3098,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,  1444,    15,  1446,    -1,    18,    19,    20,
      -1,   108,    -1,     3,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1056,
     137,    -1,   877,  2997,    -1,    35,    -1,    -1,    38,  1490,
      -1,    -1,    -1,    43,  1300,    -1,    -1,    -1,    -1,  1500,
      50,  1502,    -1,    -1,  1505,  1506,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1516,  1517,  1518,  1519,   877,
    1521,  1327,    -1,    -1,    -1,    75,  1527,    -1,  1529,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1540,
    1541,    -1,   199,    -1,  1545,  1546,    -1,    -1,    -1,  1550,
    1551,  1552,  1553,    -1,  1555,  1556,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    -1,    -1,    18,    19,
      20,    -1,  2202,    -1,  1575,  1576,  1577,    -1,  1217,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1394,   537,
      -1,  1592,    -1,   250,    -1,    -1,    -1,    -1,    -1,  2229,
      -1,   258,    -1,    -1,  1243,  1244,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   270,  2244,  2245,  2246,  2247,  2248,  2249,
    2250,  2251,  2252,  2253,    -1,    -1,   176,    -1,    -1,    -1,
      -1,   991,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,
    1217,    -1,   192,    -1,   301,    -1,    -1,   197,   219,    -1,
    1289,    -1,    -1,   537,    -1,    -1,  1462,    -1,    -1,    -1,
      -1,  1056,     0,    -1,    -1,    -1,  1243,  1244,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1039,
      -1,    -1,  1042,    -1,   234,   342,    -1,    -1,    -1,   346,
      -1,   348,    -1,  1499,    -1,  1055,    -1,    -1,  1056,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      -1,    -1,  1289,   370,    -1,    -1,  1076,    -1,   289,   376,
      -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,  1730,
      -1,    -1,    -1,   390,    -1,    -1,  1737,    -1,    -1,   289,
      -1,  1380,   292,    -1,    -1,   948,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
      -1,    -1,    -1,  1774,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   444,  1594,    -1,
      -1,    -1,   740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1380,    -1,  1806,  1009,  1010,    -1,   147,
      -1,  1812,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1217,   161,  1825,    -1,    -1,    -1,   166,    -1,
      -1,   381,    -1,   171,    -1,    -1,    -1,    -1,    -1,   289,
      -1,    -1,   180,    -1,    -1,  2475,   184,    -1,  1243,  1244,
      -1,    -1,    -1,    -1,    -1,    -1,   740,    -1,  1218,  1217,
      -1,    -1,    -1,    -1,    -1,  1866,    -1,  1868,    -1,    -1,
    1871,    -1,  1511,    -1,  1875,    -1,    -1,   215,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1243,  1244,    -1,    -1,    -1,
    1891,    -1,    -1,     8,  1289,    -1,    11,   235,    -1,    -1,
      15,    -1,    -1,    -1,    -1,  1711,    -1,    -1,    -1,    -1,
     740,    -1,    -1,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    43,   877,
      -1,  1289,    -1,   483,  1511,    50,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,   284,    -1,    -1,   287,
      -1,    -1,    -1,  1954,    -1,   293,  1762,    -1,  1959,    -1,
      75,    -1,    -1,    -1,    -1,    -1,  1967,  1968,  1969,  1970,
      -1,    -1,    -1,    -1,  1780,    -1,    -1,  1616,    -1,    -1,
    1981,    -1,    -1,    -1,    -1,  1380,    -1,    -1,  1989,   327,
    1796,    -1,    -1,   877,    -1,    -1,    -1,    -1,    -1,    -1,
    2001,    -1,    -1,    -1,    -1,    -1,  1812,    -1,    -1,    -1,
      -1,    -1,   350,    -1,    -1,    -1,  2017,    -1,    -1,  1658,
      -1,  1827,  1380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2031,  2032,    -1,    -1,    -1,    -1,   486,   487,   488,  1616,
     490,   491,   492,   493,   494,   495,    -1,   877,    -1,    -1,
     111,   112,    -1,  2054,    -1,    -1,    -1,    -1,    -1,    -1,
    1866,   176,    -1,  1423,    -1,  1871,    -1,    -1,   406,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,  2708,    -1,
      -1,  1658,   197,    -1,  1444,    -1,  1446,    -1,    -1,    -1,
      -1,  1294,  1295,    -1,  1297,   433,    -1,    -1,  2728,  2729,
      -1,    -1,    -1,   441,    -1,    -1,    -1,    -1,  1056,    -1,
      -1,    -1,    -1,    -1,  2744,    -1,  1511,    -1,    -1,   234,
     458,    -1,   460,   461,    -1,    -1,   187,   188,    -1,    -1,
    1490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2140,
    2141,  2142,  2143,    -1,  2145,  2146,  2147,    -1,    -1,    -1,
      -1,  2152,  2153,  1511,    -1,    -1,    -1,    -1,    -1,   497,
      -1,    -1,   500,   501,   502,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1056,    -1,   289,    -1,    -1,    -1,    -1,    -1,
    2181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2820,   252,   253,   254,   255,   256,   257,    -1,  2199,   260,
     261,  2202,    -1,    -1,    -1,  2206,  2207,  2208,    -1,  2210,
      -1,    -1,    -1,    -1,    -1,  1575,  1576,    -1,    -1,    -1,
      -1,  1616,    -1,    -1,    -1,    -1,  1056,    -1,  2229,    -1,
    2231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2244,  2245,  2246,  2247,  2248,  2249,  2250,
    2251,  2252,  2253,    -1,    -1,    -1,    -1,    -1,  1616,    -1,
      -1,    -1,    -1,  1658,    -1,    -1,   381,    -1,  2269,  1217,
      -1,    -1,    -1,  2274,    -1,    -1,    -1,    -1,    -1,    -1,
    2281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2097,    -1,    -1,  2295,  1243,  1244,    -1,    -1,    -1,
    1658,    -1,    -1,  1506,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,  2313,  1516,    -1,  1518,    -1,    -1,  1521,    -1,
      -1,    -1,  2128,    -1,  1527,    -1,  1529,    -1,    -1,    -1,
      -1,    -1,  1971,  1217,    -1,    -1,    -1,  2143,  1541,  2145,
      -1,  1289,    -1,  1546,    -1,    -1,    -1,  1550,  1551,  1552,
    1553,    -1,  1555,  1556,    -1,    -1,    -1,    -1,    -1,  1243,
    1244,    -1,  2363,    -1,    -1,    -1,    -1,    -1,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,  2387,  1217,  2389,  2390,
    2391,  2392,    -1,    -1,  1971,  2396,  2397,    -1,  2399,  2400,
      -1,    -1,  2403,    -1,  2043,  1289,    -1,  2408,    -1,    -1,
      -1,  2412,    -1,  1243,  1244,    -1,    -1,  2418,   479,   480,
      -1,    -1,  2061,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1380,    -1,  2435,    -1,    -1,    -1,   499,  2440,
      -1,    -1,    -1,    -1,  2445,    -1,  1806,    -1,  2449,  2088,
      -1,    -1,    -1,    -1,  2455,    -1,  2095,    -1,    -1,  1289,
    2461,    -1,    -1,    -1,  2270,    -1,  2043,    -1,    -1,    -1,
      -1,    -1,    -1,  2474,  2475,    -1,    -1,    -1,    -1,  2118,
      -1,  2482,    -1,    -1,  2061,  2291,    -1,  2293,    -1,    -1,
      -1,    -1,    -1,   599,   600,    -1,  1380,    -1,  2499,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2088,    -1,    -1,    -1,    -1,    -1,    -1,  2095,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1730,    -1,    -1,
      -1,    -1,    -1,    -1,  1737,    -1,    -1,    -1,    25,    -1,
      -1,  2118,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
    1380,    38,    -1,    -1,    -1,   661,   662,    -1,    -1,    -1,
      -1,    -1,    -1,  1511,   252,   253,   254,   255,   256,   257,
      57,    -1,   260,   261,  2575,    -1,  1971,     8,    -1,    -1,
      11,    -1,    -1,  2584,    15,    -1,    -1,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,  2596,    -1,    -1,    -1,  1959,
      -1,  2240,  2408,    -1,    -1,    -1,  2412,    -1,  1968,  1969,
    1970,    -1,    43,  1971,    -1,    -1,    -1,    -1,    -1,    50,
      -1,   108,  1825,    -1,    -1,    -1,    -1,  1511,    -1,  1989,
      -1,  2632,    -1,    -1,    -1,    -1,  2442,    -1,  2444,    -1,
    2641,  2642,    -1,  2644,    75,    -1,  2647,    -1,  2043,  2650,
     137,    -1,    -1,    -1,  2655,    -1,    -1,  2658,    -1,  2660,
      -1,    -1,  2663,  2240,  2303,    -1,  2061,    -1,  1616,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2678,   366,   367,
      -1,  1511,    -1,    -1,    -1,  2043,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2088,    -1,    -1,    -1,    -1,    -1,    -1,
    2095,    -1,    -1,  2061,    -1,    -1,    -1,  2708,    -1,    -1,
    1658,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2118,    -1,    -1,  2303,  2728,  2729,    -1,
    2088,    -1,  1616,    -1,  2373,    -1,    -1,  2095,  2739,    -1,
    2741,    -1,    -1,  2744,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2756,    -1,    -1,  2759,    -1,
    2118,   192,    -1,   250,    -1,    -1,   197,    -1,    -1,    -1,
     876,   258,    -1,    -1,  1658,    -1,  2777,    -1,  1981,  2585,
    2140,  2141,  2142,   270,    -1,    -1,  1616,   893,    -1,  2790,
      -1,   479,   480,    -1,  2795,    -1,  2373,    -1,    -1,    -1,
      -1,    -1,    -1,   234,   291,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2813,    -1,   301,    -1,   922,  2818,    -1,  2820,
      -1,  2181,    -1,    -1,    -1,    -1,    -1,  2828,  1658,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   942,   943,   944,    -1,
      -1,   947,    -1,  2844,  2650,  2240,    -1,    -1,    -1,  2655,
      -1,    -1,  2658,    -1,    -1,   342,    -1,  2858,   289,   346,
      -1,   348,    -1,    -1,   970,  2504,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2240,   370,    -1,  2886,    -1,    -1,    -1,   376,
      -1,    -1,    -1,    -1,  2895,    -1,    -1,    -1,  2899,    -1,
    2539,    -1,  2903,   390,    -1,    -1,    -1,    -1,  2303,    -1,
      -1,    -1,    -1,  1019,  2274,    -1,    -1,  1023,  1024,    -1,
    2921,  2922,  2923,    -1,  2925,    -1,    -1,  2504,    -1,    -1,
      -1,    -1,  2738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2303,    -1,    -1,    -1,    -1,
     381,    -1,    -1,  2954,    -1,    -1,    -1,   444,    -1,    -1,
      -1,    -1,  2539,    -1,    -1,    -1,    -1,    -1,  2969,    -1,
      -1,    -1,  2611,    -1,    -1,  1081,    -1,    -1,  2373,    -1,
    2981,    -1,    -1,    -1,  2790,    -1,  1092,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2995,    -1,    -1,  2803,    -1,  2202,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1116,    -1,    -1,    -1,  3015,  2373,    -1,    -1,    -1,    -1,
    3021,    -1,    -1,  1971,    -1,    -1,  2229,    -1,    -1,  2389,
    2390,  2391,  2392,    -1,  2611,    -1,  3037,  3038,    -1,    -1,
      -1,  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,
    2253,    -1,   483,  2859,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1971,  2727,    -1,
      -1,    -1,    -1,    -1,    -1,  2043,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2504,
      -1,    -1,  2918,  2061,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2482,    -1,  2763,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2088,  1971,    -1,    -1,  2539,    -1,  2504,  2095,    -1,    -1,
    2727,    -1,    -1,    -1,    -1,  2794,    -1,    -1,  2797,  2043,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    -1,    -1,
    2118,    -1,    -1,    -1,    -1,    -1,    -1,  2061,    -1,    -1,
      -1,  2539,    -1,    -1,    -1,    -1,  2763,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,
    2403,    -1,    50,    -1,  2088,    -1,    -1,    -1,  3014,    -1,
      -1,  2095,    -1,  2043,    -1,  2418,  2611,  2794,    -1,    -1,
    2797,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    1336,  2061,    -1,    -1,  2118,    -1,    -1,    -1,    -1,    -1,
    1346,    -1,  1348,    -1,    -1,  1351,  1352,  1353,  1354,    -1,
      -1,    -1,    38,  2611,    -1,    -1,    -1,    -1,  2088,    -1,
      -1,    -1,     0,    -1,    -1,  2095,    -1,    -1,    -1,  1375,
      -1,    57,  2475,    -1,    -1,  1381,  1382,  1383,  1384,  1385,
    1386,  1387,    -1,    -1,    -1,    -1,  1392,  1393,  2118,    -1,
      -1,  1397,  2240,    -1,    -1,  1401,    -1,   145,  1404,  1405,
    1406,  1407,  1408,  1409,  1410,  1411,  1412,    -1,    -1,  1415,
      -1,    -1,    -1,    -1,    -1,    -1,  1422,    -1,    -1,  1425,
      -1,    -1,   108,   109,    -1,    -1,    -1,    -1,   176,    -1,
      -1,   117,  2727,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1447,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,  2303,  2240,    95,  2997,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2763,  2727,
    1476,  1477,    -1,    -1,    -1,   963,    -1,    -1,    -1,  2739,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,   175,
      -1,    -1,    -1,    -1,    -1,    -1,  2756,    -1,    -1,  2794,
      -1,    -1,  2797,    -1,    -1,  2763,    -1,    -1,    -1,   147,
    2240,    -1,    -1,   199,    -1,    -1,  1004,    -1,    -1,  2303,
    2997,    -1,    -1,   161,    -1,  2373,    -1,    -1,   166,    -1,
      -1,    -1,    -1,   171,    -1,    -1,  2794,    -1,    -1,  2797,
       8,   289,   180,    11,  2647,    -1,   184,    15,    16,    17,
      18,    19,    20,    -1,    -1,  1561,    -1,  2660,  1564,  1565,
    2663,  1567,    -1,    -1,   250,    -1,    -1,    35,  2828,    -1,
      38,    -1,   258,  2303,    -1,    43,    -1,   215,    -1,    -1,
      -1,    -1,    50,    -1,   270,    -1,   272,    -1,    -1,  2373,
    1596,    -1,    -1,    -1,    -1,    -1,    -1,   235,  2858,    -1,
      -1,    -1,    -1,    -1,    -1,  2708,    -1,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2728,  2729,    -1,    -1,    -1,
      -1,    -1,  1120,   381,    -1,    -1,    -1,    -1,    -1,  1127,
      -1,  2744,    -1,  2373,    -1,    -1,   284,    -1,    -1,   287,
    1656,    -1,    -1,    -1,    -1,   293,  2504,    -1,    -1,    -1,
      -1,  1667,   348,    -1,    -1,    -1,  1672,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2777,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   370,    -1,    -1,    -1,    -1,   327,
      -1,  2539,  2795,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2997,    -1,   390,  1711,   392,    -1,   176,   395,
      -1,    -1,   350,    -1,    -1,    -1,  1722,  2820,  1724,  1725,
    2504,    -1,    -1,    -1,   192,    -1,  1732,    -1,    -1,   197,
    1736,    -1,    -1,  1739,    -1,   483,    -1,    -1,    -1,  2997,
      -1,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,   219,   220,    -1,    -1,  2539,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2611,    -1,    -1,   234,    -1,   406,    -1,
    1776,    -1,    -1,  1779,  2504,  1781,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   433,  2899,    -1,    -1,    -1,
    2903,    -1,    -1,   441,   272,    -1,    -1,   275,    -1,  2539,
      -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     458,   289,   460,   461,   292,    -1,  1832,  2611,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1849,  1850,    -1,  1334,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1345,    -1,   497,
      -1,  1349,   500,   501,   502,    -1,  2969,  1355,  1356,  1357,
      -1,    -1,    -1,    -1,    -1,    -1,  1364,  1883,    -1,  2727,
      -1,  2611,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,    -1,  2763,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1421,    -1,    -1,  1942,    -1,    -1,    -1,
      -1,    -1,    -1,  2727,    -1,    -1,  2794,    -1,    -1,  2797,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,  1459,    -1,    11,    -1,    -1,    -1,    15,    -1,  2763,
      -1,  1987,    -1,    -1,    -1,    -1,    -1,  1475,    -1,    -1,
      -1,    -1,  1480,    -1,    -1,    -1,    -1,  2727,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,
    2794,    -1,    50,  2797,    -1,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,   500,  2763,  2040,    -1,    -1,    75,     0,    -1,
      -1,    -1,    -1,  2049,    -1,    -1,  2052,    -1,    -1,  2055,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      -1,    -1,    -1,    -1,  2794,    -1,    -1,  2797,    -1,    31,
      -1,    33,    34,    -1,    -1,    -1,  2082,  2083,    -1,    -1,
    2086,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
      -1,  2097,    -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,
    2106,    -1,    -1,  2109,    -1,  2111,    -1,   145,    70,    -1,
      -1,    -1,    -1,  2119,    -1,    -1,    -1,    -1,    -1,    81,
      -1,  2127,  2128,    -1,    -1,  2131,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    95,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2997,
      -1,   113,  2158,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,  2184,    -1,
      -1,   143,  1670,     8,    -1,    -1,    11,    -1,    -1,   151,
      15,   153,   154,    -1,    -1,  2201,   234,    -1,    -1,    -1,
      -1,  1689,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2997,    -1,    -1,    -1,    -1,    43,  1707,
      -1,  1709,  1710,    -1,  1712,    50,  1714,    -1,    -1,    -1,
    1718,    -1,    -1,  1721,   196,    -1,    -1,    -1,  1726,    -1,
      -1,  1729,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,
      75,   289,    -1,  1741,    -1,    -1,    -1,  1745,  1746,  1747,
    1748,  1749,  1750,  1751,    -1,    -1,    -1,  2997,    -1,  1757,
    1758,    -1,  1760,  1761,    -1,   237,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,  1772,    11,    -1,  1775,    -1,    15,
      16,    17,    18,    19,    20,  1783,  1784,  1785,  1786,  1787,
    1788,  1789,  1790,  1791,  1792,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    -1,  2319,    -1,    -1,    -1,    43,    -1,    -1,
     145,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1824,    -1,    -1,    -1,
      -1,     8,    -1,   381,    11,    -1,    -1,    -1,    15,    75,
      -1,   176,   314,    -1,    -1,   317,    -1,    -1,    -1,    -1,
      -1,  2367,  2368,    -1,    -1,    -1,  2372,   192,    -1,    -1,
      -1,  2377,   197,    -1,  2380,  2381,    43,    -1,    -1,  2385,
      -1,    -1,    -1,    50,   346,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,    75,   234,
      -1,    -1,    -1,    -1,   376,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,
      -1,    -1,    -1,    -1,  2440,    -1,    -1,    -1,    -1,    -1,
     402,    -1,    -1,    -1,   406,   483,    -1,    -1,    -1,    -1,
     176,    -1,   490,   491,   492,   493,   494,   495,    -1,  1947,
    1948,  1949,  2468,    -1,   289,    -1,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,
     442,    -1,    -1,    -1,    -1,   447,    -1,    -1,    -1,  2495,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
     502,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,  2039,    -1,    -1,    -1,    -1,   381,  2045,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,   234,    -1,    -1,
    2058,  2059,  2060,    -1,  2062,  2063,  2064,  2065,  2066,    -1,
      -1,  2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,  2077,
    2078,  2079,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2614,    -1,
    2098,    -1,    -1,  2101,    -1,  2103,    -1,  2623,  2624,  2107,
    2108,  2627,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2121,  2122,  2123,  2124,    -1,  2126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,   483,  2665,
    2666,    -1,    -1,    -1,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,  2680,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2697,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,   381,  2203,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,   483,    -1,    -1,
     486,   487,   488,    75,   490,   491,   492,   493,   494,   495,
      -1,    35,    -1,    -1,   500,    -1,    -1,    -1,    -1,    43,
    2786,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2803,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2294,    -1,    -1,    -1,
      -1,    75,  2818,    -1,    -1,  2821,   483,    -1,    -1,    -1,
      -1,    -1,    -1,   490,   491,   492,   493,   494,   495,  2835,
      -1,    -1,  2320,    -1,    -1,    -1,  2324,  2325,    -1,  2327,
      -1,    -1,  2330,  2331,  2332,  2333,  2334,    -1,    -1,    -1,
    2338,  2339,  2340,  2341,  2342,  2343,  2344,  2345,  2346,  2347,
    2348,  2349,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,  2359,    -1,    -1,    -1,    -1,    -1,    -1,  2366,    -1,
     192,  2369,    -1,  2371,    -1,   197,    -1,  2375,    -1,    -1,
    2378,  2379,    -1,    -1,  2382,  2383,    -1,    -1,  2386,    -1,
      -1,    -1,    -1,    -1,    -1,  2911,    -1,   219,   220,  2915,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,   197,    -1,    -1,    -1,  2425,    -1,  2945,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2439,    -1,    -1,    -1,   219,   220,    -1,    -1,    -1,
     272,    -1,    -1,   275,  2452,    -1,    -1,    -1,    -1,    -1,
     234,    -1,  2978,    -1,    -1,    -1,    -1,   289,    -1,     8,
     292,    -1,    11,    -1,    -1,    -1,    15,    -1,  2476,    18,
      19,    20,    -1,    -1,    -1,    23,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,   272,    -1,
      -1,   275,    -1,    -1,    43,    -1,    -1,    -1,  3024,  3025,
      -1,    50,    -1,    -1,    -1,   289,     8,    -1,   292,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    76,    -1,
      -1,  3057,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    92,    -1,    -1,    -1,    50,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3098,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2604,   381,   146,    -1,
    2608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,  2617,
    2618,  2619,    -1,    -1,  2622,    -1,    -1,  2625,  2626,    -1,
     168,    -1,  2630,    -1,    -1,   173,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,
      -1,   483,   200,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,    -1,
     219,   220,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   234,  2694,    -1,    -1,    -1,
     192,    -1,  2700,    -1,    -1,   197,    -1,   245,    -1,   483,
      -1,   249,   486,   487,   488,  2713,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,   500,   219,   220,    -1,
      -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2761,  2762,    -1,    -1,    -1,    -1,  2767,
    2768,  2769,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
     292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2811,  2812,    -1,    -1,    -1,    -1,    -1,
      -1,   359,    -1,    -1,   362,    -1,    -1,    -1,    -1,  2827,
      -1,    -1,   370,    -1,    -1,   373,    -1,    -1,  2836,    -1,
      -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,
      -1,    -1,  2880,    -1,   422,    -1,    -1,    -1,    -1,   381,
     428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2898,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   453,    -1,    -1,    -1,    -1,
      -1,    -1,  2920,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2939,    -1,    -1,   483,    -1,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2983,    -1,    -1,    -1,    -1,
      -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,    -1,
      -1,    -1,    -1,    -1,  3012,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,  3060,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,   492,    -1,    -1,    -1,    -1,   497,    -1,   499,
     500,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
     485,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,   500,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,   485,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    36,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,   492,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,   492,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,   492,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,   500,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,   500,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,   458,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,    -1,    -1,    -1,   497,    -1,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,   507,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,    -1,
      -1,    -1,   497,    -1,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,   507,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     490,   491,    -1,    -1,     3,     4,     5,     6,     7,   499,
       9,    10,    -1,    -1,    -1,    -1,   506,   507,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   490,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,    -1,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,    -1,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,   456,    -1,    -1,
     459,    -1,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   490,   491,     3,    -1,    -1,    -1,    -1,   497,    -1,
     499,    -1,    -1,    -1,    -1,   504,    -1,   506,   507,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,    -1,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,    -1,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,    -1,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,    -1,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
     500,    -1,    -1,   503,    38,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,   172,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,    -1,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    63,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,   456,    -1,    -1,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,   485,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,   287,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,   490,
     491,   492,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,   288,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,   485,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
      -1,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,     3,    -1,   485,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
      -1,   452,   453,   454,   455,   456,    -1,    -1,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,     3,   485,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,     3,     4,     5,    -1,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    15,    -1,   499,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,    -1,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,    -1,   314,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   479,   480,   481,   482,    -1,     3,    -1,   486,   487,
     488,     8,   490,   491,   492,   493,   494,   495,    15,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,    -1,   450,    -1,   452,   453,   454,   455,   456,
      -1,    -1,   459,    -1,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,     8,    -1,
      -1,    11,    -1,    -1,    43,    15,    16,    17,    18,    19,
      20,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,     8,    -1,    75,    11,    -1,    -1,
      50,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    -1,     8,    -1,    75,    11,    -1,    -1,    43,
      15,    16,    17,    18,    19,    20,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
      -1,    75,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,
      -1,     8,    -1,    -1,    11,    -1,   176,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
     219,   220,   192,    -1,    -1,    -1,    -1,   197,    35,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    43,    -1,    -1,    -1,
      -1,    -1,   176,    50,    -1,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,   197,   234,    -1,    -1,    -1,    75,    -1,
      -1,   176,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   219,   220,   192,    -1,    -1,
     289,    -1,   197,   292,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   219,   220,    -1,    -1,    -1,   289,
      -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,   176,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,    -1,   289,   192,    -1,   292,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    43,    -1,   275,    -1,
      -1,    -1,    -1,    50,    -1,    -1,   381,    -1,    -1,    -1,
      -1,    -1,   289,    -1,   483,   292,    -1,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    75,    -1,
      -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
     500,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,   483,
      -1,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    35,    -1,    -1,    -1,   500,    -1,     8,    -1,
      43,    11,    -1,    -1,   381,    15,    -1,    50,   483,    -1,
      -1,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,   500,    -1,     8,    -1,   176,
      11,    -1,    75,    43,    15,    16,    17,    18,    19,    20,
      50,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    75,    -1,    -1,    -1,    50,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,     8,    -1,    75,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,   483,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    35,
      -1,    -1,    -1,   500,    -1,   272,    -1,    43,   275,    -1,
      -1,    -1,    -1,   176,    50,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,
      -1,   234,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,   192,    -1,    11,    -1,    -1,   197,    15,    16,    17,
      18,    19,    20,    -1,   234,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,    -1,   381,    -1,    -1,    35,   219,   220,
      -1,    -1,    -1,    -1,    -1,    43,   289,    -1,    -1,   292,
      -1,    -1,    50,   234,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    75,    -1,   289,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,    -1,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,   381,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,   500,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,   289,    -1,    -1,   292,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
     483,    -1,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,   500,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   272,    -1,    -1,   275,    -1,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,   381,   500,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   483,    -1,    -1,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
     498,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,     4,     5,    -1,    -1,    -1,     9,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,     4,     5,    -1,    -1,    -1,     9,
     490,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,     8,    -1,    -1,    11,    -1,
     490,   491,    15,    16,    17,    18,    19,    20,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    -1,
      43,    -1,    -1,    -1,    -1,    35,    -1,    50,    -1,    -1,
      -1,    -1,    -1,    43,     8,    -1,    -1,    11,    -1,    -1,
      50,    15,    16,    17,    18,    19,    20,     8,    -1,    -1,
      11,    -1,    75,    -1,    15,    16,    17,    18,    19,    20,
      -1,    35,    -1,    -1,    -1,    75,    -1,    -1,    -1,    43,
      -1,    -1,    -1,    -1,    35,    -1,    50,    38,    -1,    -1,
      -1,    -1,    43,     8,    -1,    -1,    11,    -1,    -1,    50,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    75,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    75,    -1,    -1,    -1,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    -1,    -1,   176,    -1,    35,   166,    -1,    38,    -1,
      -1,   171,    -1,    43,    -1,    -1,   176,    -1,    -1,   192,
      50,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,
      -1,   165,    -1,    -1,    -1,    75,   219,   220,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,   234,    -1,    -1,    -1,   176,    -1,    -1,   192,    -1,
      -1,    -1,    -1,   197,   234,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,   272,
      -1,   176,   275,    -1,    -1,    -1,    -1,    -1,   219,   220,
     234,    -1,   272,    -1,    -1,   275,   289,   192,    -1,   292,
      -1,    -1,   197,   234,    -1,    -1,    -1,    -1,    -1,   289,
      -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   219,   220,   176,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,   272,   192,    -1,   275,   289,    -1,   197,   292,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,   315,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,
     275,    -1,    -1,    -1,   234,    -1,    -1,    -1,   381,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,
      -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,   289,
      -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   441,    -1,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,
     483,    -1,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,
      -1,    -1,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,   483,    -1,    -1,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   483,    -1,
      -1,   486,   487,   488,    35,   490,   491,   492,   493,   494,
     495,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,    75,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,     8,    38,    -1,    11,    -1,
      -1,    43,    15,    16,    17,    18,    19,    20,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    -1,    -1,    75,    -1,    -1,    -1,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     171,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,     8,    -1,   197,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    35,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      -1,    -1,    -1,   234,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     192,   272,    -1,    -1,   275,   197,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,   219,   220,   192,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,     8,    -1,   289,    11,    -1,
     292,    -1,    15,    16,    17,    18,    19,    20,   192,   272,
     381,    -1,   275,   197,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    -1,   289,    -1,    -1,   292,
      43,    -1,    -1,    -1,    -1,   219,   220,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    75,    -1,    -1,    15,    16,    17,    18,    19,
      20,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    -1,
      -1,    18,    19,    20,    -1,    35,    -1,    -1,   272,   381,
      -1,   275,    -1,    43,    -1,    -1,    -1,    -1,    35,    -1,
      50,    -1,    -1,    -1,    -1,   289,    43,    -1,   292,    -1,
      -1,    -1,   483,    50,    -1,   486,   487,   488,   381,   490,
     491,   492,   493,   494,   495,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,   414,    15,    -1,    -1,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,
      43,    -1,    -1,    -1,   197,    -1,    -1,    50,    -1,    -1,
      -1,   483,    -1,    -1,   486,   487,   488,   381,   490,   491,
     492,   493,   494,   495,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   234,    -1,   486,   487,   488,   176,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,     8,   176,
      -1,    11,   192,    -1,    -1,    15,    -1,   197,    18,    19,
      20,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,   272,
     197,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    43,    -1,    -1,   289,    -1,    -1,   292,
      50,    -1,   219,   220,   234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,   483,
      -1,    -1,   486,   487,   488,    75,   490,   491,   492,   493,
     494,   495,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,   272,    -1,    -1,   275,   289,
      -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,
      -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,   272,
      -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   192,    -1,    -1,    -1,   289,   197,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,
     483,    -1,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,   483,    -1,    -1,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     483,    -1,    -1,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
       5,    -1,    -1,   483,    -1,    -1,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,   287,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    -1,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,   168,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,   434,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,   168,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,   434,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,   288,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,     4,
      -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    -1,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,    -1,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
      -1,   176,   177,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,    -1,   273,   274,
     275,   276,    -1,    -1,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
      -1,   296,   297,   298,    -1,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,    -1,   314,
     315,    -1,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,   447,   448,    -1,
     450,    -1,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,    -1,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,    -1,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,    -1,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,    -1,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
     480,   481,   482,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    38,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    38,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    38,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,    -1,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    -1,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,    -1,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,    -1,   273,   274,
     275,   276,    -1,    -1,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
      -1,   296,   297,   298,    -1,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,    -1,   314,
     315,    -1,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,    -1,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,    -1,   448,    -1,   450,   451,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   479,   480,   481,   482,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,    -1,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,    -1,   176,   177,    -1,   179,
      -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,    -1,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,    -1,   296,   297,   298,    -1,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,    -1,   314,   315,    -1,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,    -1,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,    -1,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,   452,   453,   454,   455,   456,    -1,    -1,   459,
      -1,    -1,   462,   463,   464,   465,   466,   467,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,
     480,   481,   482,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,    -1,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,    -1,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,    -1,   450,    -1,   452,   453,   454,
     455,   456,    -1,    -1,   459,    -1,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    21,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    31,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    58,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    70,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    81,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,    93,    95,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     113,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   127,   127,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   137,   137,    -1,    -1,    -1,    -1,
     143,   143,    -1,    -1,    -1,    -1,    -1,    -1,   151,   151,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   167,   167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,   211,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   237,   237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   314,   314,    -1,   317,   317,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   346,   346,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   355,   355,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   369,   369,    -1,    -1,
      -1,    -1,    -1,   376,   376,    -1,    -1,   380,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   390,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,
     402,    -1,    -1,   406,   406,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   442,
     442,    -1,    -1,    -1,   447,   447,    -1,    -1,   451,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,   461,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   485,   485,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,   499
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    31,    33,    34,    49,    58,    70,    81,    93,
      95,   113,   127,   137,   143,   151,   153,   154,   167,   196,
     211,   237,   314,   317,   346,   355,   369,   376,   380,   390,
     402,   406,   442,   447,   461,   485,   499,   510,   511,   512,
     513,   530,   533,   534,   535,   536,   537,   538,   539,   591,
     592,   737,   738,   741,   742,   744,   751,   752,   800,   802,
     805,   812,   816,   823,   824,   835,   837,   839,   842,   847,
     854,   855,   856,   860,   862,   868,   869,   871,   873,   876,
     877,   878,   882,   897,   419,   464,   836,   200,   362,   370,
     406,   453,   836,     3,    21,    22,    23,    24,    25,    26,
      27,    28,    30,    31,    32,    40,    41,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    56,
      57,    58,    59,    60,    61,    64,    65,    66,    67,    68,
      70,    71,    72,    73,    74,    76,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    89,    90,    91,    92,
      93,    94,    96,    97,    98,    99,   100,   101,   102,   103,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   118,   120,   121,   122,   123,   124,   125,   127,   128,
     129,   130,   131,   134,   135,   136,   137,   138,   140,   141,
     142,   144,   145,   146,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   160,   162,   163,   164,   165,
     167,   169,   170,   172,   173,   174,   175,   176,   177,   179,
     181,   182,   183,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   198,   199,   200,   201,   202,
     203,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   216,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   231,   232,   233,   234,   236,   237,   238,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   273,   274,   275,   276,   278,   279,   280,   281,   282,
     283,   285,   286,   289,   290,   291,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   321,   322,   323,   324,   325,   326,   328,   329,   330,
     331,   332,   333,   334,   335,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   404,   405,
     407,   408,   409,   410,   411,   412,   413,   415,   416,   419,
     420,   421,   422,   423,   425,   426,   427,   428,   429,   430,
     431,   432,   435,   436,   437,   438,   439,   440,   442,   443,
     444,   445,   446,   447,   448,   450,   451,   452,   453,   454,
     455,   456,   459,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   650,   722,   726,   729,   898,   899,
     900,   836,    52,   499,   525,   177,   238,   292,   362,   410,
     412,   428,   434,   437,   798,   853,     3,     5,    29,   175,
     246,   317,   399,   720,   726,   727,   898,    23,    76,    92,
     146,   156,   168,   173,   200,   245,   249,   312,   326,   359,
     362,   370,   373,   392,   406,   413,   422,   428,   453,   817,
     818,   821,   836,   720,   451,   499,   513,   530,   533,   534,
     737,   738,   741,   744,   751,   752,   800,   802,   808,   812,
     816,   823,   824,   835,   837,   839,   842,   847,   856,   860,
     862,   868,   869,   871,   873,   876,   877,   878,   110,    70,
     211,   110,     5,   725,   726,   870,   870,   726,   720,    29,
     415,   419,   531,   532,   726,   743,   836,    29,   132,   547,
     548,   177,   238,   362,   374,   415,   743,   863,   864,   836,
     447,   534,   539,   743,   288,   604,   717,   726,   727,   172,
     499,   844,   499,   334,   540,   541,   720,   540,   535,   536,
       0,   502,   147,   215,   293,   433,   550,   551,   535,   537,
     538,   503,    29,   415,   419,   534,   743,   451,   806,   122,
     210,   439,   190,   717,   720,   190,   717,   190,   604,   190,
     717,   499,   497,   501,   701,   703,   534,   717,   410,   412,
     410,   412,   344,   190,   726,   726,   731,   173,   245,   334,
     370,   406,   453,   874,   200,    29,   720,   251,   422,   109,
     406,   406,   453,   365,     3,    46,    51,    52,    53,    54,
      66,    67,    76,    84,    96,   100,   101,   102,   103,   106,
     114,   115,   136,   164,   170,   172,   176,   190,   192,   206,
     213,   214,   216,   219,   220,   222,   232,   234,   246,   265,
     266,   267,   275,   280,   296,   298,   331,   353,   357,   375,
     377,   381,   384,   399,   408,   415,   416,   427,   440,   448,
     451,   615,   617,   619,   621,   623,   625,   627,   628,   629,
     631,   632,   633,   635,   636,   730,   822,   898,   901,   190,
     731,   819,   190,   718,   720,   190,   720,   499,   801,   808,
       3,    46,    50,    51,    52,    53,    54,    66,    67,    74,
      76,    84,    96,   100,   101,   102,   103,   106,   114,   115,
     152,   158,   164,   170,   172,   175,   176,   181,   182,   192,
     206,   207,   213,   214,   216,   219,   220,   222,   232,   234,
     246,   265,   266,   267,   271,   275,   278,   280,   295,   296,
     298,   299,   313,   316,   331,   353,   357,   375,   377,   381,
     384,   399,   401,   408,   415,   416,   421,   423,   427,   440,
     447,   448,   451,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   809,   811,   812,   814,   815,   898,
     902,   806,   725,   870,   725,   488,   499,   499,   840,   482,
     221,   501,   287,     4,     6,     7,     8,     9,    10,    37,
      51,    53,    54,    62,    63,    66,    67,    74,    76,   100,
     101,   102,   103,   104,   105,   106,   114,   115,   117,   152,
     158,   159,   164,   181,   182,   213,   214,   216,   239,   240,
     265,   267,   272,   277,   278,   280,   289,   299,   313,   331,
     357,   375,   384,   401,   415,   416,   421,   423,   424,   427,
     440,   448,   483,   490,   491,   492,   497,   499,   504,   506,
     507,   535,   581,   620,   623,   626,   627,   628,   630,   631,
     632,   635,   636,   647,   649,   650,   651,   653,   667,   668,
     675,   695,   700,   707,   708,   709,   722,   723,   724,   725,
     726,   706,   708,   863,   863,   725,   863,   482,   171,   417,
     488,   499,   717,   492,   703,     3,   170,   172,   451,   812,
     843,   845,   170,   846,   647,   679,   680,   726,   540,   503,
     499,   733,   500,   500,   512,    29,   132,   545,   545,    56,
     545,   161,   166,   235,   284,   556,   558,   559,   584,   586,
     587,   588,   550,   551,   499,   482,   221,   717,   171,   217,
     604,   857,   152,    25,    31,   137,   291,   342,   346,   376,
     444,   829,   832,   833,   342,   152,    38,    57,   108,   199,
     250,   258,   270,   301,   342,   348,   370,   376,   390,   745,
     748,   832,   152,   342,   376,   832,   152,   342,   376,   832,
       3,    29,    46,    52,    76,    84,    96,   100,   101,   102,
     103,   106,   132,   170,   172,   175,   176,   192,   206,   219,
     220,   222,   232,   234,   246,   266,   275,   296,   298,   353,
     375,   381,   399,   408,   427,   440,   449,   451,   492,   500,
     647,   682,   683,   728,   734,   898,   903,   647,   702,     3,
      29,    33,    34,    35,    36,    37,    38,    39,    42,    55,
      62,    63,    69,    75,    77,    88,    95,   104,   105,   117,
     119,   126,   132,   133,   139,   143,   147,   159,   161,   166,
     168,   171,   178,   180,   184,   197,   204,   215,   217,   229,
     230,   235,   239,   240,   272,   277,   284,   287,   288,   292,
     293,   310,   320,   327,   336,   350,   369,   386,   403,   406,
     414,   417,   418,   424,   433,   434,   441,   447,   449,   457,
     458,   460,   461,   721,   735,   898,   902,   904,   701,   500,
     499,   787,   798,   272,   803,   501,   732,    38,   453,   190,
     717,   190,   717,   740,   717,   717,    84,   850,   465,    85,
     129,   304,   411,   450,   634,   634,   634,   499,   622,   622,
     316,   499,   624,   152,   499,    66,    67,   634,   622,   619,
     463,   485,   499,   637,   499,   637,   499,    37,   618,   499,
     111,   112,   187,   188,   252,   253,   254,   255,   256,   257,
     260,   261,   366,   367,   479,   480,   499,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   622,    60,   349,   503,
     820,   152,   503,   820,   152,   503,   820,   152,   287,   680,
     500,   503,     4,   159,   287,   424,   490,   491,   724,   725,
     747,   750,   807,   809,   810,   813,   808,   499,   520,   524,
     747,   813,   865,   867,   682,   617,   684,    38,   233,   726,
     499,   704,   497,   535,   647,   699,   499,   499,   166,   499,
     499,   535,   499,   499,   499,   647,   499,   499,   499,   499,
     499,   499,   499,   499,   499,   647,   647,   647,   148,   710,
     711,   680,   681,   535,   647,   679,   669,   670,   671,   727,
       9,   704,   703,   499,   725,   499,   724,   725,     3,     8,
      11,    15,    16,    17,    18,    19,    20,    35,    38,    43,
      50,    75,   176,   192,   197,   219,   220,   234,   272,   275,
     289,   292,   381,   483,   486,   487,   488,   490,   491,   492,
     493,   494,   495,   673,   674,   675,   677,   462,   654,   704,
     298,   647,   503,   217,   542,   499,   725,   704,   501,   703,
     542,     3,   117,   238,   636,   725,   747,   866,    99,   117,
     867,   117,   867,   717,   500,   503,   806,   503,   500,   541,
     718,   719,    38,   537,   537,    29,   492,   552,   553,   647,
      56,   537,   546,   163,   269,   572,   224,   270,   330,   379,
     439,     4,     9,    29,   567,   647,   490,   491,   568,   569,
     647,   649,   584,   585,   559,   558,   556,   557,   166,   587,
     282,   589,   556,   584,   680,   233,   733,   857,   717,   880,
      38,   726,   376,   717,    69,    77,    88,   168,   190,   320,
     434,   726,   769,   779,   794,    77,    88,   838,    88,   838,
     499,   417,   499,   767,   244,   437,   767,    88,   503,   417,
     717,   619,   747,    56,   749,   747,   747,   108,   250,   258,
      56,   417,   461,   485,   746,   263,   362,   746,   748,   604,
      88,   417,   838,   362,   717,   417,   362,   682,   682,   683,
     500,   503,   550,   551,    13,    14,   498,   508,   417,   726,
     786,   791,   461,   523,   334,   406,   453,   152,    95,   752,
     804,   847,   860,   871,   721,   501,   617,   717,   272,   745,
     872,   272,   499,   787,    38,   787,   499,   875,   190,   726,
     781,   851,   499,   681,   724,   822,   684,   634,   634,    37,
     618,   415,   415,   724,   724,   614,   726,   497,   497,   724,
     724,   417,   417,   417,   417,   617,   819,   731,   718,   720,
     720,   731,   500,   808,   814,     4,   724,     4,   724,   522,
     529,   735,    52,    97,   123,   141,   145,   167,   170,   185,
     277,   285,   328,   526,   503,   500,   503,   500,   503,   534,
     841,   856,   877,   878,   680,   701,   681,   457,   696,   697,
     647,   680,   499,   724,   724,     3,   638,   639,   640,   641,
     642,   643,   644,   645,   685,   686,   725,   724,   724,   647,
       8,    15,    18,    19,    20,   486,   487,   488,   490,   491,
     492,   493,   494,   495,   673,   678,   726,   647,   687,   490,
     491,   499,   648,   649,   675,   689,   500,   680,   647,   679,
     690,   647,    55,   171,   230,   418,   647,   680,   693,   647,
     499,   726,   344,   715,   498,   500,   503,   503,   505,   508,
     680,   647,   646,   646,   617,   647,   647,   647,   647,   647,
     647,   647,     5,   735,   736,   415,    42,   403,   705,   731,
     647,   647,   499,   535,   694,   132,   159,   272,   277,   282,
     424,   435,   647,   277,   499,   647,   417,    50,   176,   192,
     197,   234,   381,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,    29,    36,   386,   672,   180,   162,   655,
     357,   499,   668,   709,   177,   238,   406,   410,   412,   437,
     543,   717,   171,   593,   682,   492,   593,   499,   725,   500,
     717,   843,   717,   897,   647,   503,   500,   499,    39,   126,
     554,   554,   503,   441,   554,   263,   537,   357,   358,   490,
     491,   569,   571,   649,   379,   224,   288,   309,   309,   503,
     494,     4,   570,   724,   570,   357,   358,   571,   716,   717,
     276,   383,   590,   585,   557,   500,   441,   859,    38,   117,
     300,   499,   534,   879,   726,   499,   726,   884,   893,   894,
     896,   342,   832,   499,   190,   779,   720,   224,   272,   224,
     441,   499,   772,   616,   617,   720,   726,   190,   720,   190,
     726,    25,   137,   376,   735,   763,   777,   828,   831,   720,
     735,   771,   790,   720,   829,   720,   342,   376,   745,   832,
     747,   731,   720,   747,   731,   720,   747,   342,   376,   832,
     720,   720,   720,   720,   342,   376,   832,   720,   720,   550,
     550,   550,   449,   683,   191,   347,   549,   647,   647,   647,
     702,   325,   519,   500,   503,   285,   171,   417,   514,   453,
     717,   740,   717,   726,   292,   798,   721,   499,   152,   152,
     234,   726,   769,   779,   782,   785,   795,   797,   461,   463,
     774,   151,   534,   461,   852,   500,   682,    38,   272,   287,
     680,   500,   500,   820,   500,   497,   482,   482,   500,   500,
     500,   503,   617,   724,   498,   724,   500,   500,   639,   641,
     642,   643,   642,   643,   643,   820,   820,   287,   820,   500,
     503,   492,   499,   521,   747,   813,    38,   518,   725,   518,
     272,   277,   328,   518,   518,   865,   617,   500,   498,   647,
     139,   697,   698,    38,   500,   647,   500,   500,   500,   171,
     500,   500,   503,   500,   501,   310,   688,   500,   648,   648,
     647,    11,    15,    18,    19,    20,   197,   219,   289,   486,
     487,   488,   490,   491,   492,   493,   494,   495,   675,   648,
     500,   500,   166,   171,   691,   692,   503,   500,    38,   693,
     680,   693,   693,   171,   500,    38,   719,   499,   647,   712,
     704,   647,   669,   647,   500,   500,   482,   648,   648,   145,
     680,   171,   132,   159,   277,   282,   424,   435,   499,   145,
     678,   647,   403,   705,   647,   694,   647,   417,   499,   535,
     499,   499,   155,   656,   410,   412,   410,   412,   717,   406,
     544,   544,   544,   229,   358,   499,   535,   592,   594,   595,
     596,   597,   604,   605,   650,   652,   653,   726,   458,   610,
     550,   711,   610,   724,   646,   733,   841,   484,   555,   555,
     553,   289,   673,   676,   555,     4,   724,   571,   288,   439,
     568,   503,   243,   595,   458,   858,   726,   447,   405,   440,
     888,   726,   883,   892,   287,   885,   889,   896,   704,   503,
     593,   488,   417,   647,   272,   794,   499,   152,   499,   772,
     200,   791,   792,   753,    38,   175,   762,   788,   753,    25,
     137,   346,   348,   376,   825,   826,   827,   833,   834,   152,
     820,   152,   820,   763,   777,   763,   725,   756,   500,   503,
     488,   501,   500,   503,   417,   362,    88,   417,   838,   362,
     417,   417,   417,   362,   549,   549,   549,   683,   279,   279,
     500,   498,   393,   394,   528,   725,   786,   519,   717,   499,
      38,   787,   803,   344,   406,   791,   717,   717,   740,   717,
     500,   503,   285,   767,   285,   287,   766,   720,   461,   739,
     767,    38,   500,   406,   647,   152,   717,   500,   618,   724,
     637,   637,   618,   726,   498,   498,   731,   522,   516,   527,
     813,   725,   725,   277,   791,   492,   791,   725,   725,   414,
     647,   143,   617,   500,   647,   647,   678,   647,   691,   617,
     648,   648,   648,   648,   648,   132,   272,   282,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   647,   647,
     692,   691,   617,   500,   500,   500,   680,   617,   500,   647,
     712,   713,   714,    38,   500,   646,   647,    35,    35,   647,
     500,   647,   171,   499,   684,   647,   500,   145,   648,   648,
     145,   145,   647,   647,   551,   458,   647,   297,   660,   544,
     544,   544,   544,   717,   717,   717,   535,   605,   171,   535,
     592,   596,   597,    38,   598,   599,   726,   598,   503,    96,
     172,   206,   222,   232,   266,   353,   601,   599,    38,   598,
     600,   726,   485,   609,   703,   647,   180,   573,   549,   715,
     573,   500,   500,   163,   228,   499,   555,   288,   717,   647,
     350,   887,   446,   704,   500,   503,    86,   887,   500,   503,
     884,   858,   647,   720,   500,   152,   792,   779,   792,   753,
     781,   503,   500,   119,   204,   270,   272,   778,   499,    32,
      56,   799,   788,    69,    75,    88,   117,   119,   204,   272,
     277,   320,   336,   434,   441,   758,   759,   773,   175,   117,
     189,   272,   767,   746,   109,   117,   175,   272,   392,   395,
     748,   767,   376,   827,   428,   720,   726,   831,     3,    46,
      52,    76,    84,    96,   100,   101,   102,   103,   106,   170,
     172,   175,   176,   192,   206,   219,   220,   222,   232,   234,
     246,   266,   271,   275,   289,   296,   298,   353,   375,   377,
     381,   399,   408,   427,   440,   451,   490,   491,   617,   676,
     725,   728,   747,   754,   793,   898,   904,   735,   790,   720,
     720,   720,   720,   720,   720,   720,   720,   720,   720,   500,
     500,   500,   550,   746,   528,   499,   785,   534,   852,   798,
     190,   717,   500,   872,   499,    38,   776,   774,   782,    81,
     801,   109,   270,   534,   534,   781,   441,   849,   498,   617,
     820,   500,   503,   791,   647,   500,   500,   692,   171,   132,
     282,   499,   500,   500,   503,   500,   726,   647,   647,   647,
     684,   500,   647,    35,    35,   647,   647,   145,   500,   500,
     647,   500,   499,   661,   726,   717,   717,   717,   717,   599,
     600,   499,   500,   727,   408,   564,   565,   499,   565,   596,
     222,   296,   602,   596,   602,   222,   601,   602,   222,   565,
     499,   727,   565,   499,   294,    56,   184,   582,   500,   582,
     725,   678,   707,   534,   300,   534,   883,   287,   499,   881,
     488,   896,   887,   753,   779,   500,   500,   461,   784,   120,
     193,   202,   119,   443,   647,   117,    38,   499,   731,   720,
     648,   120,   193,   119,   277,   224,   717,   784,    83,   799,
     190,   277,   747,   647,   799,   277,   490,   491,   750,   726,
     617,   820,   820,   246,   399,   728,   732,   488,   417,   417,
     549,   520,   441,   515,   517,   791,   500,   739,    38,   406,
     272,   499,   852,   785,   151,   534,   149,   198,   766,   122,
     137,   319,   739,   109,   461,   861,   287,   726,   848,   499,
     527,   648,   171,   499,   684,   712,   500,   647,   647,   647,
     500,   662,   726,   606,   607,   652,   598,   499,     4,     9,
     560,   562,   563,   726,   719,   596,   287,   441,   603,   596,
     222,   596,   611,   612,   727,   499,   611,   727,    29,    98,
     181,   356,   492,   499,   574,   575,   576,   577,   578,   579,
     580,   647,   647,   460,   657,   725,   657,   500,   503,   888,
      88,   499,   652,   726,   886,   895,   133,   647,   336,   784,
     499,   775,   753,   500,   189,   499,   647,   272,   759,   784,
     787,   720,    38,   152,    75,   613,   732,   494,   754,   720,
     720,   500,   746,   124,   500,   774,   534,   717,   152,    38,
     500,   720,   739,    29,    80,    89,   118,   189,   201,   392,
     395,   770,   770,   358,   358,    61,    69,   238,   717,   895,
     648,   684,   500,   306,   663,   500,   503,    38,   608,   719,
     309,   494,   309,   358,   494,   499,   499,   500,   647,   499,
     596,   603,   500,   503,   617,   611,   500,   499,   378,   499,
     500,   503,   658,   659,   726,   327,   583,   583,   446,   720,
     647,    75,   890,   890,   500,   503,   273,   439,   717,   753,
     735,   780,   783,   396,   455,   760,   761,   499,   755,   647,
     500,   248,   796,   189,   731,   441,   830,   494,   428,   520,
     725,   852,   766,   861,   499,   717,   534,   774,   801,    69,
     290,    69,   849,   500,   500,    56,   550,   609,   606,   499,
     500,   726,   560,   719,   612,   613,   500,   680,   499,   680,
     576,   503,    38,   647,   441,   561,   561,   534,   500,   731,
     731,   891,   891,   610,   886,   376,   787,   488,   500,   503,
     745,   500,   270,   768,   172,   305,   382,   287,   764,   765,
     789,   755,   647,   428,    38,   499,   861,   766,   739,   290,
     290,   499,   852,   679,   329,   358,   664,   611,   500,   503,
     500,   500,   500,   575,   500,   659,   661,   360,   890,   554,
     554,   894,   796,   754,   783,   500,   761,   202,   122,   439,
     287,   789,   287,   764,   534,   895,   610,    50,    99,   430,
     647,   665,   666,   665,   500,   500,     9,   343,   566,   500,
     563,   891,   555,   555,   610,   765,    60,   270,   349,   376,
     757,   757,   861,   500,   666,   357,   165,   315,   165,   315,
     500,   499,   554,   753,    24,   117,   277,   852,    35,     9,
     555,   610,   666,   500
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   509,   510,   511,   511,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     512,   512,   512,   512,   512,   512,   512,   512,   512,   512,
     513,   513,   514,   514,   515,   515,   516,   516,   517,   517,
     518,   518,   519,   519,   520,   520,   521,   521,   521,   521,
     521,   522,   523,   523,   524,   524,   525,   525,   526,   526,
     526,   526,   526,   526,   526,   526,   526,   526,   526,   526,
     526,   526,   527,   528,   528,   528,   529,   529,   530,   531,
     531,   532,   532,   532,   533,   534,   534,   535,   535,   536,
     536,   536,   536,   536,   536,   536,   536,   537,   537,   538,
     538,   538,   538,   538,   538,   538,   538,   539,   539,   539,
     540,   540,   541,   542,   542,   543,   543,   543,   543,   543,
     543,   543,   543,   543,   544,   544,   545,   545,   545,   546,
     547,   547,   548,   548,   549,   549,   549,   550,   550,   551,
     551,   551,   552,   552,   553,   553,   554,   554,   554,   555,
     555,   555,   556,   556,   556,   556,   557,   557,   558,   558,
     558,   558,   559,   559,   560,   560,   560,   560,   560,   560,
     561,   561,   562,   562,   563,   563,   563,   563,   564,   565,
     565,   566,   566,   567,   567,   567,   567,   567,   568,   569,
     569,   569,   570,   570,   571,   571,   572,   572,   573,   573,
     573,   573,   574,   574,   575,   575,   576,   576,   576,   576,
     576,   577,   578,   579,   580,   581,   581,   582,   582,   583,
     583,   584,   584,   585,   585,   586,   586,   587,   588,   588,
     588,   588,   589,   589,   590,   590,   590,   591,   591,   592,
     592,   593,   593,   594,   594,   595,   595,   596,   596,   596,
     596,   596,   596,   596,   596,   597,   597,   597,   597,   597,
     597,   598,   598,   598,   598,   599,   599,   600,   600,   600,
     600,   600,   601,   601,   601,   601,   602,   602,   603,   603,
     604,   604,   604,   604,   605,   605,   606,   607,   607,   608,
     608,   609,   609,   610,   610,   611,   611,   612,   613,   613,
     614,   614,   615,   615,   616,   616,   617,   617,   617,   617,
     617,   617,   617,   617,   618,   618,   618,   619,   619,   619,
     619,   619,   619,   619,   620,   620,   620,   620,   621,   622,
     622,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   624,   624,   625,   625,   626,   626,   627,   628,
     629,   629,   630,   630,   631,   632,   633,   633,   633,   633,
     633,   633,   634,   634,   635,   635,   635,   635,   636,   637,
     637,   637,   638,   638,   639,   639,   640,   640,   641,   641,
     642,   642,   643,   643,   644,   644,   645,   645,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   650,   650,   650,   650,   650,   650,   650,   651,   651,
     652,   652,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   654,   654,   655,   655,   655,   656,   656,   657,   657,
     658,   658,   659,   660,   660,   660,   661,   662,   662,   663,
     663,   664,   664,   664,   665,   665,   666,   666,   666,   666,
     666,   667,   667,   668,   668,   669,   670,   670,   671,   671,
     672,   672,   672,   673,   673,   674,   674,   674,   674,   674,
     674,   674,   674,   674,   674,   674,   674,   674,   675,   675,
     676,   676,   677,   677,   677,   677,   677,   677,   677,   677,
     678,   678,   679,   679,   680,   680,   681,   681,   682,   682,
     683,   683,   683,   684,   684,   685,   685,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   687,   687,   688,
     689,   689,   690,   690,   690,   690,   690,   690,   691,   692,
     693,   693,   693,   694,   694,   695,   696,   696,   697,   698,
     698,   699,   699,   700,   700,   701,   701,   701,   702,   702,
     703,   703,   704,   704,   705,   705,   706,   706,   707,   707,
     708,   708,   709,   709,   709,   709,   709,   710,   710,   711,
     711,   712,   713,   713,   714,   714,   715,   715,   715,   716,
     716,   717,   717,   718,   718,   719,   719,   720,   721,   722,
     722,   723,   723,   723,   723,   723,   723,   723,   723,   723,
     723,   723,   723,   723,   723,   724,   725,   726,   726,   726,
     727,   727,   728,   728,   728,   729,   729,   729,   730,   730,
     730,   731,   731,   732,   732,   733,   733,   734,   735,   735,
     735,   735,   736,   736,   737,   737,   737,   738,   738,   738,
     739,   739,   739,   740,   741,   741,   741,   741,   741,   741,
     741,   741,   742,   742,   743,   743,   744,   744,   745,   745,
     746,   746,   746,   747,   747,   747,   747,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   749,   749,   750,   750,   750,   751,   751,   751,   751,
     752,   752,   752,   753,   753,   754,   754,   754,   754,   754,
     754,   755,   755,   756,   757,   757,   757,   757,   757,   758,
     758,   758,   758,   759,   759,   759,   759,   759,   759,   759,
     759,   760,   760,   761,   761,   762,   762,   762,   763,   764,
     765,   765,   765,   765,   765,   766,   766,   766,   766,   767,
     768,   768,   769,   769,   770,   770,   770,   770,   770,   770,
     770,   770,   771,   771,   772,   773,   773,   773,   773,   774,
     774,   774,   774,   775,   776,   776,   776,   777,   778,   778,
     778,   778,   778,   778,   779,   779,   780,   780,   781,   782,
     782,   782,   783,   783,   784,   784,   785,   785,   785,   786,
     787,   787,   788,   788,   789,   790,   790,   790,   790,   791,
     791,   792,   792,   793,   793,   793,   794,   794,   794,   794,
     794,   794,   795,   795,   796,   796,   796,   796,   797,   798,
     798,   798,   798,   798,   798,   798,   798,   799,   799,   800,
     800,   800,   801,   801,   802,   802,   803,   803,   804,   804,
     804,   804,   805,   805,   805,   805,   806,   806,   807,   807,
     807,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   809,   809,   809,   810,   810,   811,   811,   812,   812,
     813,   813,   813,   813,   814,   815,   815,   816,   816,   816,
     816,   816,   816,   816,   816,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   818,   818,   818,   818,   818,   818,   818,   819,   819,
     820,   820,   820,   821,   821,   821,   822,   822,   823,   824,
     824,   824,   824,   824,   824,   824,   824,   825,   825,   826,
     826,   827,   827,   827,   827,   828,   828,   829,   829,   829,
     829,   829,   829,   829,   829,   829,   829,   829,   829,   829,
     829,   829,   829,   829,   829,   829,   829,   829,   829,   829,
     829,   829,   829,   829,   829,   829,   830,   830,   831,   831,
     831,   831,   832,   832,   833,   834,   834,   834,   835,   835,
     835,   835,   835,   835,   836,   836,   836,   837,   837,   837,
     837,   837,   837,   837,   837,   837,   837,   837,   837,   837,
     838,   838,   839,   840,   840,   841,   841,   841,   841,   842,
     842,   842,   842,   842,   843,   843,   843,   843,   843,   844,
     844,   845,   845,   846,   846,   847,   847,   848,   849,   849,
     850,   850,   851,   851,   852,   852,   853,   853,   854,   855,
     856,   857,   857,   857,   858,   858,   859,   859,   860,   860,
     860,   860,   861,   861,   861,   861,   862,   862,   862,   862,
     863,   863,   863,   863,   864,   864,   864,   864,   865,   865,
     866,   866,   866,   866,   866,   866,   866,   867,   867,   868,
     868,   869,   869,   869,   870,   870,   871,   871,   872,   872,
     873,   873,   874,   874,   875,   875,   876,   876,   876,   876,
     876,   876,   877,   878,   879,   879,   879,   879,   879,   880,
     880,   881,   881,   881,   882,   882,   883,   884,   884,   885,
     885,   885,   886,   886,   886,   887,   887,   888,   888,   889,
     889,   890,   890,   891,   891,   892,   892,   893,   893,   894,
     894,   895,   895,   896,   897,   897,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   903,   903,   903,
     903,   903,   903,   903,   903,   903,   903,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
      11,     9,     1,     1,     3,     0,     1,     3,     1,     0,
       1,     0,     1,     0,     1,     3,     1,     1,     1,     3,
       0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     4,
       3,     2,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     1,     2,     3,     2,     1,     1,     3,     3,     1,
       2,     4,     4,     2,     3,     5,     5,     1,     1,    11,
      11,     1,     2,     5,     4,     4,     4,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     2,
       1,     5,     1,     0,     2,     2,     0,     1,     0,     3,
       5,     5,     1,     3,     4,     3,     1,     1,     0,     2,
       2,     0,     2,     2,     1,     1,     1,     0,     2,     4,
       5,     4,     2,     3,     2,     2,     2,     2,     1,     2,
       3,     0,     1,     0,     5,     1,     4,     6,     2,     1,
       0,     4,     0,     1,     1,     2,     2,     2,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     0,     1,     3,     1,     2,     1,     1,     1,     1,
       1,     2,     4,     4,     5,     1,     1,     2,     0,     2,
       0,     1,     3,     1,     0,     1,     2,     3,     2,     4,
       2,     3,     2,     0,     1,     2,     0,     4,     5,     1,
       2,     2,     0,     1,     3,     1,     2,     3,     3,     3,
       3,     3,     3,     1,     4,     3,     4,     5,     4,     5,
       4,     5,     2,     4,     1,     1,     0,     1,     4,     5,
       4,     0,     2,     2,     2,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     1,     0,     2,     3,     5,     6,
       2,     3,     5,     5,     3,     4,     0,     1,     1,     1,
       1,     1,     2,     4,     1,     1,     1,     1,     2,     3,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     1,     3,     0,     1,     1,     1,     1,     5,     2,
       1,     1,     1,     1,     4,     1,     2,     2,     1,     3,
       3,     2,     1,     0,     5,     2,     5,     2,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     0,     1,     3,     3,     5,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     1,     3,
       3,     3,     3,     3,     3,     4,     3,     4,     3,     4,
       5,     6,     6,     7,     6,     7,     6,     7,     3,     4,
       4,     6,     2,     1,     4,     1,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     5,     6,     6,     7,     1,
       1,     2,     2,     2,     4,     1,     2,     1,     2,     2,
       4,     3,     6,     7,     9,     7,     7,     4,     5,     1,
       1,     1,     5,     1,     1,     4,     1,     4,     1,     4,
       1,     4,     1,     1,     1,     1,     1,     1,     6,     6,
       4,     4,     4,     4,     6,     5,     5,     5,     4,     6,
       4,     5,     0,     5,     4,     0,     1,     0,     2,     0,
       1,     3,     3,     2,     2,     0,     6,     1,     0,     3,
       0,     2,     2,     0,     1,     4,     2,     2,     2,     2,
       2,     4,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     4,     1,     4,     1,     2,     1,     2,     1,     2,
       1,     3,     1,     3,     1,     2,     1,     0,     1,     3,
       1,     3,     3,     1,     3,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
       3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
       3,     2,     1,     1,     3,     5,     1,     2,     4,     2,
       0,     1,     0,     1,     2,     2,     3,     5,     1,     0,
       1,     2,     0,     2,     1,     0,     1,     0,     1,     3,
       1,     2,     3,     2,     1,     3,     5,     4,     2,     1,
       0,     3,     1,     3,     1,     2,     4,     2,     0,     1,
       3,     1,     2,     1,     3,     1,     2,     1,     1,     1,
       2,     1,     1,     2,     1,     1,     2,     7,     2,     5,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     3,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     2,     4,     5,     7,    10,     9,
       2,     3,     0,     4,     2,     2,     2,     2,     3,     4,
       2,     1,     1,     1,     1,     3,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     2,     3,     2,     3,
       9,    12,    11,     0,     2,     1,     1,     1,     1,     1,
       1,     3,     0,     1,     2,     1,     1,     2,     2,     3,
       1,     1,     2,     2,     1,     2,     3,     5,     3,     2,
       5,     1,     1,     1,     0,     5,     7,     5,     2,     3,
       1,     1,     2,     2,     0,     3,     4,     4,     0,     3,
       2,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     1,     2,     2,     2,     2,
       2,     2,     0,     3,     3,     3,     0,     1,     2,     1,
       2,     2,     2,     2,     3,     4,     1,     3,     1,     1,
       1,     1,     3,     1,     2,     0,     1,     2,     0,     1,
       3,     0,     2,     0,     3,     3,     1,     5,     3,     1,
       3,     1,     2,     1,     4,     5,     5,     6,     3,     7,
       4,    11,     1,     3,     2,     2,     2,     0,     3,     1,
       1,     2,     2,     2,     2,     1,     0,     1,     2,     3,
       9,    12,     3,     0,     4,     7,     2,     0,     1,     1,
       1,     1,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     6,     4,     6,
       4,     6,     8,     4,     6,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     3,     3,     3,
       3,     2,     2,     1,     3,     1,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     5,     4,
       6,     4,     6,     4,     6,     4,     6,     1,     2,     3,
       2,     1,     3,     2,     3,     1,     3,     2,     5,     3,
       6,     4,     6,     6,     6,     5,     5,     6,     9,     4,
       5,     7,     6,     4,     8,     4,     2,     4,     3,     6,
       4,     2,     2,     2,     2,     1,     2,     0,     1,     2,
       2,     2,     1,     3,     4,     2,     1,     0,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     6,     6,     8,
       6,     8,     6,     8,     6,     8,     8,    10,     8,    10,
       1,     0,     5,     3,     0,     1,     1,     1,     1,     4,
       5,     5,     4,     6,     1,     1,     1,     1,     1,     1,
       0,     1,     3,     1,     0,    13,    16,     1,     2,     0,
       1,     0,     1,     0,     2,     0,     1,     0,     4,     3,
       7,     1,     2,     3,     2,     0,     2,     0,     9,    11,
      12,    14,     3,     4,     4,     0,     2,     3,     3,     3,
       1,     3,     3,     2,     3,     3,     3,     3,     1,     1,
       1,     1,     3,     5,     1,     1,     1,     1,     3,     2,
       1,     2,     2,     3,     1,     1,     5,     8,     1,     0,
       8,     7,     1,     1,     2,     3,     6,     8,     6,     8,
       6,     8,     8,     7,     1,     4,     4,     7,     2,     1,
       3,     4,     3,     0,     1,     0,     2,     3,     5,     8,
       5,     0,     5,     5,     7,     2,     0,     1,     1,     1,
       3,     2,     0,     1,     0,     1,     3,     1,     3,     1,
       2,     1,     3,     2,     2,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyo, *yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 467 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 15305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3:
#line 483 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 15321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4:
#line 495 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 15332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 39:
#line 538 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 15338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 15370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 15393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 15399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 15405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 15413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 15453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 15459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 15465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 15471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 15483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 15495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 15501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 15507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 15513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 15521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 15529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 15541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 15547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 15555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 15561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 15569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 15609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 15617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 15633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 15641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 15649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 15657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 15665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 15673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 15679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 15685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 15691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 15697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 15719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 15730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 15740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 15746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 15757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 15768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 15778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 15784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 15790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 15843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 15855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 15879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110:
#line 174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 15934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112:
#line 190 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 15957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113:
#line 209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 15965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114:
#line 213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115:
#line 217 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116:
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 15989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117:
#line 238 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118:
#line 245 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 16011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119:
#line 252 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 16022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120:
#line 261 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121:
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122:
#line 266 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 16047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123:
#line 278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 16061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124:
#line 288 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 16067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125:
#line 297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126:
#line 302 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127:
#line 307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128:
#line 312 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129:
#line 317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130:
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 16127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131:
#line 333 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 16136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132:
#line 338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133:
#line 343 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 16154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134:
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 16160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135:
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 16166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136:
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 16172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137:
#line 355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138:
#line 356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139:
#line 360 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 16190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140:
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 16196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141:
#line 368 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142:
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 16208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143:
#line 373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144:
#line 377 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 16220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145:
#line 378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 16226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146:
#line 379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 16232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147:
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 16238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148:
#line 384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149:
#line 388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150:
#line 390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 16264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151:
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 16278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152:
#line 412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 16284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153:
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 16290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154:
#line 417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 16303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155:
#line 426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 16316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156:
#line 436 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 16322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157:
#line 437 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 16328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158:
#line 438 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 16334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159:
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 16340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160:
#line 442 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 16346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161:
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 16352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162:
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 16358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163:
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 16364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164:
#line 449 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 16370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165:
#line 450 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 16376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166:
#line 454 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167:
#line 455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 16388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168:
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169:
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 16407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170:
#line 478 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 16413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171:
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 16419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172:
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 16425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173:
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 16431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174:
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175:
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176:
#line 504 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 16455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177:
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 16463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178:
#line 512 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 16471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179:
#line 516 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 16479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180:
#line 523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 16493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182:
#line 534 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 16499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183:
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 16505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184:
#line 540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 16514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185:
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 16522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186:
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 16530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187:
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 16539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188:
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 16547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189:
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190:
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 16559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191:
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 16565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192:
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 16571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193:
#line 578 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194:
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 16586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195:
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 16592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 16598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197:
#line 589 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 16604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198:
#line 593 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199:
#line 613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200:
#line 615 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 16622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201:
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 16628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202:
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 16634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203:
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 16640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204:
#line 626 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 16646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205:
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 16652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206:
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 16658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207:
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 16664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208:
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209:
#line 658 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 16679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210:
#line 663 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 16688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211:
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212:
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213:
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 16706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214:
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215:
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216:
#line 681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217:
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218:
#line 683 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219:
#line 684 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220:
#line 685 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221:
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 16756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222:
#line 703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 16764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223:
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 16772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224:
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 16780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225:
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 16786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226:
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 16792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227:
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228:
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229:
#line 733 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230:
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 16816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231:
#line 738 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232:
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233:
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234:
#line 744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235:
#line 748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236:
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 16852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237:
#line 754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 16864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238:
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 16870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239:
#line 765 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 16876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240:
#line 766 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 16882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241:
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 16888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242:
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243:
#line 772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 16900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244:
#line 777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 16906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245:
#line 778 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 16912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246:
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 16918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247:
#line 789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248:
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 16938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249:
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250:
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 16950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251:
#line 817 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252:
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 16962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253:
#line 822 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254:
#line 823 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 16974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255:
#line 827 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256:
#line 828 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257:
#line 835 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 16996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258:
#line 841 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259:
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 17021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260:
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 17033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261:
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 17046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262:
#line 875 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 17059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263:
#line 884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 17067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264:
#line 888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 17076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265:
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 17084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266:
#line 918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267:
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268:
#line 945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269:
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 17154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270:
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 17171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271:
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272:
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273:
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 17200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274:
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 17209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275:
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 17215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276:
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 17221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277:
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 17229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278:
#line 1025 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 17237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279:
#line 1029 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280:
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 17257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281:
#line 1041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 17265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282:
#line 1046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 17271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283:
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 17277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284:
#line 1048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 17283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285:
#line 1049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 17289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286:
#line 1053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 17295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287:
#line 1054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288:
#line 1066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 17307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289:
#line 1067 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290:
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291:
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 17335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292:
#line 1087 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293:
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 17357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294:
#line 1126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295:
#line 1137 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 17387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296:
#line 1150 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 17393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297:
#line 1154 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 17399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298:
#line 1155 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 17405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299:
#line 1158 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300:
#line 1159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 17417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301:
#line 1162 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 17423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302:
#line 1163 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 17429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303:
#line 1168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304:
#line 1169 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 17441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305:
#line 1175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 17449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306:
#line 1179 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 17457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307:
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308:
#line 1206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309:
#line 1213 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 17497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310:
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311:
#line 1229 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 17513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314:
#line 1236 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315:
#line 1237 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 17525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316:
#line 1240 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 17534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317:
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 17544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318:
#line 1252 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 17553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319:
#line 1257 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 17563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320:
#line 1263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 17572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321:
#line 1268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 17582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322:
#line 1273 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 17593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323:
#line 1279 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 17604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324:
#line 1289 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 17610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325:
#line 1291 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 17616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326:
#line 1293 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 17622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327:
#line 1297 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328:
#line 1298 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329:
#line 1299 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330:
#line 1300 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331:
#line 1301 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332:
#line 1303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 17661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333:
#line 1308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 17671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334:
#line 1327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335:
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336:
#line 1329 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337:
#line 1330 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338:
#line 1342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339:
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340:
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 17717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341:
#line 1363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342:
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343:
#line 1373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344:
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345:
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346:
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347:
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348:
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349:
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350:
#line 1410 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351:
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352:
#line 1423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 17844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353:
#line 1444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 17852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354:
#line 1454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355:
#line 1458 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356:
#line 1466 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357:
#line 1470 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358:
#line 1478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 17898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359:
#line 1490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 17916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360:
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361:
#line 1515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362:
#line 1521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 17940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363:
#line 1525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 17955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364:
#line 1538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 17965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365:
#line 1546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 17977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366:
#line 1556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367:
#line 1558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 17989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368:
#line 1560 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 17995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369:
#line 1562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370:
#line 1564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371:
#line 1566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 18013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372:
#line 1570 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 18019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373:
#line 1571 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374:
#line 1579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375:
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376:
#line 1596 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 18063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377:
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 18075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378:
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 18084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379:
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 18090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380:
#line 1624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 18096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381:
#line 1625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 18102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398:
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 18108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399:
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 18114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400:
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 18120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401:
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 18126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402:
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 18132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403:
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 18138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404:
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 18144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405:
#line 1668 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 18150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406:
#line 1670 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 18159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407:
#line 1675 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 18168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408:
#line 1680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409:
#line 1686 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410:
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 18198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411:
#line 1698 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412:
#line 1704 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 18217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413:
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 18223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414:
#line 1740 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415:
#line 1743 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 18235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416:
#line 1745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417:
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 18257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418:
#line 1768 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419:
#line 1770 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420:
#line 1772 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421:
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422:
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423:
#line 1778 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424:
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425:
#line 1782 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426:
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427:
#line 1786 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428:
#line 1788 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429:
#line 1790 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430:
#line 1792 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431:
#line 1794 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432:
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433:
#line 1799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434:
#line 1801 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435:
#line 1803 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 18365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436:
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437:
#line 1808 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438:
#line 1810 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439:
#line 1812 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 18389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440:
#line 1814 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441:
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442:
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443:
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444:
#line 1836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445:
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446:
#line 1848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 18458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447:
#line 1855 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 18467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448:
#line 1860 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 18478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449:
#line 1868 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 18490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450:
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 18502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451:
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 18514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452:
#line 1892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 18526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453:
#line 1910 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454:
#line 1918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455:
#line 1926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456:
#line 1934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457:
#line 1942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458:
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 18595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459:
#line 1953 "third_party/libpg_query/grammar/statements/select.y"
                                                           {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 18604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460:
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 18613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461:
#line 1962 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 18625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462:
#line 1970 "third_party/libpg_query/grammar/statements/select.y"
                        {
                                        (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
                        }
#line 18633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463:
#line 1974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 18653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464:
#line 1990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465:
#line 1998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466:
#line 2006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467:
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468:
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 18713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469:
#line 2030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 18725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470:
#line 2038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 18733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471:
#line 2042 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 18741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472:
#line 2046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473:
#line 2050 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 18757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474:
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 18769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475:
#line 2062 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476:
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 18793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477:
#line 2078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 18805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478:
#line 2086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 18829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479:
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 18855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480:
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 18870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481:
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 18881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482:
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483:
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484:
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 18924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485:
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 18930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486:
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 18936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487:
#line 2191 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 18942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488:
#line 2193 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 18948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489:
#line 2195 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490:
#line 2197 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491:
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492:
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493:
#line 2203 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494:
#line 2205 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495:
#line 2207 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496:
#line 2209 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 18996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497:
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498:
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499:
#line 2215 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500:
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501:
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502:
#line 2221 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 19032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503:
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504:
#line 2225 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 19044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505:
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 19052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506:
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 19060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507:
#line 2235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508:
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 19076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509:
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510:
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511:
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512:
#line 2262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 19115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513:
#line 2274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 19134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514:
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515:
#line 2301 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516:
#line 2303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 19172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517:
#line 2315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518:
#line 2326 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 19215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519:
#line 2350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520:
#line 2361 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 19241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521:
#line 2370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 19249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522:
#line 2374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523:
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524:
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 19284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525:
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 19299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526:
#line 2408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527:
#line 2416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528:
#line 2444 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 19371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529:
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530:
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531:
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532:
#line 2499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533:
#line 2505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 19407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534:
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 19415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535:
#line 2513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536:
#line 2517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 19431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537:
#line 2521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538:
#line 2525 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 19447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539:
#line 2529 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540:
#line 2533 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 19463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541:
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 19471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542:
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 19479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543:
#line 2545 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 19487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544:
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 19495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545:
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 19503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546:
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 19511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547:
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 19519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548:
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 19525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549:
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 19531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550:
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551:
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552:
#line 2582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553:
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554:
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 19591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555:
#line 2609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556:
#line 2616 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557:
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558:
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559:
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 19634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560:
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 19645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561:
#line 2645 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562:
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563:
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564:
#line 2651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565:
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566:
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 19681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567:
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568:
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569:
#line 2665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570:
#line 2669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 19705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571:
#line 2671 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 19711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572:
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 19721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573:
#line 2684 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 19727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574:
#line 2686 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 19744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575:
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 19750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576:
#line 2704 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 19768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577:
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578:
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 19780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579:
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580:
#line 2734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581:
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 19802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582:
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 19812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583:
#line 2758 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584:
#line 2768 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 19845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585:
#line 2785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 19886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586:
#line 2830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587:
#line 2838 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588:
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589:
#line 2854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590:
#line 2862 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 19946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591:
#line 2882 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592:
#line 2883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593:
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 19964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594:
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 19970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595:
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 19983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596:
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597:
#line 2902 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598:
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599:
#line 2907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600:
#line 2911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601:
#line 2912 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 20019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602:
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 20025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603:
#line 2916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604:
#line 2917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 20037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605:
#line 2920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 20043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606:
#line 2921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 20049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607:
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 20055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608:
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 20061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609:
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 20067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610:
#line 2925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 20073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611:
#line 2926 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 20079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612:
#line 2927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 20085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 20091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614:
#line 2929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 20097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615:
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 20103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616:
#line 2931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 20109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617:
#line 2932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 20115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618:
#line 2936 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619:
#line 2938 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620:
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621:
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622:
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623:
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624:
#line 2954 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 20157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625:
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 20163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626:
#line 2958 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 20169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627:
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 20175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628:
#line 2962 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 20181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629:
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 20187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630:
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631:
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 20199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632:
#line 2984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633:
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634:
#line 2995 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 20231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636:
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637:
#line 3011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 20247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638:
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639:
#line 3024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640:
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641:
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642:
#line 3043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 20297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643:
#line 3053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 20303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644:
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 20309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645:
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 20317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646:
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647:
#line 3069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648:
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 20335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649:
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 20341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650:
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651:
#line 3073 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 20353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652:
#line 3074 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653:
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 20365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654:
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 20371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655:
#line 3077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 20377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656:
#line 3078 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657:
#line 3089 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658:
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659:
#line 3100 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660:
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 20411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661:
#line 3107 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662:
#line 3124 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663:
#line 3128 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 20434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664:
#line 3133 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 20442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665:
#line 3137 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 20461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666:
#line 3152 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 20469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667:
#line 3156 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668:
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669:
#line 3163 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670:
#line 3166 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 20493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671:
#line 3167 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672:
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673:
#line 3172 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 20516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674:
#line 3178 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 20522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675:
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 20536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676:
#line 3202 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677:
#line 3203 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678:
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 20560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679:
#line 3218 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680:
#line 3219 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681:
#line 3222 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682:
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683:
#line 3227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 20592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684:
#line 3231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 20600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685:
#line 3238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686:
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687:
#line 3250 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 20632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688:
#line 3260 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689:
#line 3261 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690:
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691:
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693:
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696:
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697:
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698:
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699:
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700:
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701:
#line 3296 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702:
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 20716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703:
#line 3316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704:
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705:
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 20759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706:
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 20779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707:
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708:
#line 3365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709:
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710:
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 20803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711:
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 20809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712:
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713:
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714:
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715:
#line 3382 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716:
#line 3385 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717:
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718:
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 20851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719:
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 20857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720:
#line 3398 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 20863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721:
#line 3410 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722:
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 20900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723:
#line 3441 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724:
#line 3443 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 20912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725:
#line 3448 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726:
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727:
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728:
#line 3454 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729:
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 20942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730:
#line 3468 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 20951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731:
#line 3479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 20959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732:
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 20967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733:
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 20983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734:
#line 3499 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 20991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735:
#line 3503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736:
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737:
#line 3519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738:
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739:
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 21073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740:
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741:
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 21089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742:
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 21097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743:
#line 3577 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 21105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744:
#line 3581 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 21113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745:
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746:
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747:
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748:
#line 3604 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749:
#line 3605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750:
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751:
#line 3609 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752:
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753:
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754:
#line 3617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755:
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756:
#line 3621 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757:
#line 3622 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758:
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759:
#line 3626 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760:
#line 3627 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761:
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762:
#line 3631 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 21221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763:
#line 3635 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764:
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765:
#line 3641 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766:
#line 3642 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768:
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769:
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770:
#line 3655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771:
#line 3656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772:
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773:
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779:
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780:
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781:
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 21379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782:
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 21385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783:
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 21399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 21434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791:
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794:
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795:
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 21501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832:
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833:
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834:
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836:
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837:
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838:
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839:
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842:
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844:
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847:
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849:
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850:
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851:
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852:
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853:
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854:
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855:
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856:
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857:
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858:
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859:
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860:
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862:
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863:
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865:
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868:
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869:
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870:
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871:
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872:
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873:
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874:
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875:
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 22212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876:
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877:
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 22224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878:
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 22230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879:
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880:
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 22242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 22248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882:
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884:
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 22277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886:
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887:
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888:
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889:
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893:
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895:
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896:
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897:
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898:
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900:
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901:
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902:
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904:
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905:
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906:
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907:
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908:
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909:
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911:
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912:
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913:
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914:
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915:
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 22518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916:
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917:
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918:
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919:
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920:
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922:
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923:
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924:
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925:
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926:
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927:
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928:
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929:
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930:
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931:
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932:
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933:
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934:
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935:
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936:
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938:
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939:
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941:
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942:
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943:
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944:
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945:
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946:
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947:
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948:
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949:
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951:
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952:
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953:
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954:
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955:
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956:
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957:
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958:
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959:
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960:
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961:
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962:
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963:
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964:
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965:
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966:
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967:
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968:
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 22995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 23027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 23058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 23068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 23085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 23099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 23110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 23121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 23127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 23133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 23151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027:
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028:
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 23203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029:
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 23209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030:
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 23215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031:
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 23221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032:
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 23227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033:
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034:
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035:
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036:
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043:
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 23395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051:
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052:
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057:
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058:
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 23455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060:
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 23461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061:
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 23467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062:
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 23473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 23479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 23485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 23491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067:
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 23503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068:
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069:
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070:
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 23521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071:
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 23527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072:
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073:
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074:
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075:
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076:
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 23557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077:
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078:
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].list);
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 23709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 23717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 23740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 23748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 23824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 23858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 23894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 23914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 23994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 24035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 24092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 24114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 24137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 24145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 24154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 24163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 24171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 24195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 24207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 24228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 24238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 24277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 24283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 24289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 24508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 24560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 24586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 24592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 24604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 24610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 24624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 24642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 24648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 24732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 24738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 24756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 24768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 24774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 24794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 24826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 24837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 24848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 24860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 24872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 24888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 24904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 24925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 24946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 24952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 24958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 24964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 24970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 24980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 25000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 25010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 25016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 25042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 25054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 25078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 25100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 25147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 25158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 25164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 25176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 25219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242:
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243:
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 25241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244:
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245:
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 25253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 25293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250:
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
				
			}
#line 25308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251:
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				(yyval.node) = (PGNode *)n;
                         }
#line 25322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254:
#line 42 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 25330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255:
#line 46 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 25338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 25403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 25416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 25431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 25443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 25485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 25495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 25503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 25512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 25536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 25544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 25550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 25556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 25577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 25602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 25615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 25628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 25636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 25681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 25693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 25699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 25705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 25717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 25741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 25753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 25765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301:
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 25783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302:
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 25789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303:
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 25833 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 41 "third_party/libpg_query/grammar/statements/analyze.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
